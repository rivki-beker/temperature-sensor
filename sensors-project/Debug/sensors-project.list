
sensors-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008618  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088d4  080088d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088dc  080088dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088dc  080088dc  000188dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080088e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c68  20000070  08008954  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd8  08008954  00021cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017568  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cce  00000000  00000000  00037644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  0003b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6a  00000000  00000000  0003c628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a3bc  00000000  00000000  0003d492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000178c3  00000000  00000000  0005784e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c022  00000000  00000000  0006f111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058b8  00000000  00000000  0010b134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001109ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08008740 	.word	0x08008740

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08008740 	.word	0x08008740

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_frsub>:
 80009bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009c0:	e002      	b.n	80009c8 <__addsf3>
 80009c2:	bf00      	nop

080009c4 <__aeabi_fsub>:
 80009c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c8 <__addsf3>:
 80009c8:	0042      	lsls	r2, r0, #1
 80009ca:	bf1f      	itttt	ne
 80009cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009d0:	ea92 0f03 	teqne	r2, r3
 80009d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009dc:	d06a      	beq.n	8000ab4 <__addsf3+0xec>
 80009de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009e6:	bfc1      	itttt	gt
 80009e8:	18d2      	addgt	r2, r2, r3
 80009ea:	4041      	eorgt	r1, r0
 80009ec:	4048      	eorgt	r0, r1
 80009ee:	4041      	eorgt	r1, r0
 80009f0:	bfb8      	it	lt
 80009f2:	425b      	neglt	r3, r3
 80009f4:	2b19      	cmp	r3, #25
 80009f6:	bf88      	it	hi
 80009f8:	4770      	bxhi	lr
 80009fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4240      	negne	r0, r0
 8000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4249      	negne	r1, r1
 8000a1a:	ea92 0f03 	teq	r2, r3
 8000a1e:	d03f      	beq.n	8000aa0 <__addsf3+0xd8>
 8000a20:	f1a2 0201 	sub.w	r2, r2, #1
 8000a24:	fa41 fc03 	asr.w	ip, r1, r3
 8000a28:	eb10 000c 	adds.w	r0, r0, ip
 8000a2c:	f1c3 0320 	rsb	r3, r3, #32
 8000a30:	fa01 f103 	lsl.w	r1, r1, r3
 8000a34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a38:	d502      	bpl.n	8000a40 <__addsf3+0x78>
 8000a3a:	4249      	negs	r1, r1
 8000a3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a44:	d313      	bcc.n	8000a6e <__addsf3+0xa6>
 8000a46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a4a:	d306      	bcc.n	8000a5a <__addsf3+0x92>
 8000a4c:	0840      	lsrs	r0, r0, #1
 8000a4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a52:	f102 0201 	add.w	r2, r2, #1
 8000a56:	2afe      	cmp	r2, #254	; 0xfe
 8000a58:	d251      	bcs.n	8000afe <__addsf3+0x136>
 8000a5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a62:	bf08      	it	eq
 8000a64:	f020 0001 	biceq.w	r0, r0, #1
 8000a68:	ea40 0003 	orr.w	r0, r0, r3
 8000a6c:	4770      	bx	lr
 8000a6e:	0049      	lsls	r1, r1, #1
 8000a70:	eb40 0000 	adc.w	r0, r0, r0
 8000a74:	3a01      	subs	r2, #1
 8000a76:	bf28      	it	cs
 8000a78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a7c:	d2ed      	bcs.n	8000a5a <__addsf3+0x92>
 8000a7e:	fab0 fc80 	clz	ip, r0
 8000a82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a86:	ebb2 020c 	subs.w	r2, r2, ip
 8000a8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a8e:	bfaa      	itet	ge
 8000a90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a94:	4252      	neglt	r2, r2
 8000a96:	4318      	orrge	r0, r3
 8000a98:	bfbc      	itt	lt
 8000a9a:	40d0      	lsrlt	r0, r2
 8000a9c:	4318      	orrlt	r0, r3
 8000a9e:	4770      	bx	lr
 8000aa0:	f092 0f00 	teq	r2, #0
 8000aa4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa8:	bf06      	itte	eq
 8000aaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aae:	3201      	addeq	r2, #1
 8000ab0:	3b01      	subne	r3, #1
 8000ab2:	e7b5      	b.n	8000a20 <__addsf3+0x58>
 8000ab4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000abc:	bf18      	it	ne
 8000abe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac2:	d021      	beq.n	8000b08 <__addsf3+0x140>
 8000ac4:	ea92 0f03 	teq	r2, r3
 8000ac8:	d004      	beq.n	8000ad4 <__addsf3+0x10c>
 8000aca:	f092 0f00 	teq	r2, #0
 8000ace:	bf08      	it	eq
 8000ad0:	4608      	moveq	r0, r1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea90 0f01 	teq	r0, r1
 8000ad8:	bf1c      	itt	ne
 8000ada:	2000      	movne	r0, #0
 8000adc:	4770      	bxne	lr
 8000ade:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ae2:	d104      	bne.n	8000aee <__addsf3+0x126>
 8000ae4:	0040      	lsls	r0, r0, #1
 8000ae6:	bf28      	it	cs
 8000ae8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	4770      	bx	lr
 8000aee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000af2:	bf3c      	itt	cc
 8000af4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bxcc	lr
 8000afa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b06:	4770      	bx	lr
 8000b08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b0c:	bf16      	itet	ne
 8000b0e:	4608      	movne	r0, r1
 8000b10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b14:	4601      	movne	r1, r0
 8000b16:	0242      	lsls	r2, r0, #9
 8000b18:	bf06      	itte	eq
 8000b1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b1e:	ea90 0f01 	teqeq	r0, r1
 8000b22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_ui2f>:
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	e004      	b.n	8000b38 <__aeabi_i2f+0x8>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_i2f>:
 8000b30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	bf48      	it	mi
 8000b36:	4240      	negmi	r0, r0
 8000b38:	ea5f 0c00 	movs.w	ip, r0
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b44:	4601      	mov	r1, r0
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	e01c      	b.n	8000b86 <__aeabi_l2f+0x2a>

08000b4c <__aeabi_ul2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	e00a      	b.n	8000b70 <__aeabi_l2f+0x14>
 8000b5a:	bf00      	nop

08000b5c <__aeabi_l2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__aeabi_l2f+0x14>
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b70:	ea5f 0c01 	movs.w	ip, r1
 8000b74:	bf02      	ittt	eq
 8000b76:	4684      	moveq	ip, r0
 8000b78:	4601      	moveq	r1, r0
 8000b7a:	2000      	moveq	r0, #0
 8000b7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b80:	bf08      	it	eq
 8000b82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b8a:	fabc f28c 	clz	r2, ip
 8000b8e:	3a08      	subs	r2, #8
 8000b90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b94:	db10      	blt.n	8000bb8 <__aeabi_l2f+0x5c>
 8000b96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f102 0220 	add.w	r2, r2, #32
 8000bbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bd6:	4770      	bx	lr

08000bd8 <__gesf2>:
 8000bd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bdc:	e006      	b.n	8000bec <__cmpsf2+0x4>
 8000bde:	bf00      	nop

08000be0 <__lesf2>:
 8000be0:	f04f 0c01 	mov.w	ip, #1
 8000be4:	e002      	b.n	8000bec <__cmpsf2+0x4>
 8000be6:	bf00      	nop

08000be8 <__cmpsf2>:
 8000be8:	f04f 0c01 	mov.w	ip, #1
 8000bec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bf0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d011      	beq.n	8000c28 <__cmpsf2+0x40>
 8000c04:	b001      	add	sp, #4
 8000c06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c0a:	bf18      	it	ne
 8000c0c:	ea90 0f01 	teqne	r0, r1
 8000c10:	bf58      	it	pl
 8000c12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c16:	bf88      	it	hi
 8000c18:	17c8      	asrhi	r0, r1, #31
 8000c1a:	bf38      	it	cc
 8000c1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c20:	bf18      	it	ne
 8000c22:	f040 0001 	orrne.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	d102      	bne.n	8000c34 <__cmpsf2+0x4c>
 8000c2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c32:	d105      	bne.n	8000c40 <__cmpsf2+0x58>
 8000c34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c38:	d1e4      	bne.n	8000c04 <__cmpsf2+0x1c>
 8000c3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c3e:	d0e1      	beq.n	8000c04 <__cmpsf2+0x1c>
 8000c40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_cfrcmple>:
 8000c48:	4684      	mov	ip, r0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	4661      	mov	r1, ip
 8000c4e:	e7ff      	b.n	8000c50 <__aeabi_cfcmpeq>

08000c50 <__aeabi_cfcmpeq>:
 8000c50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c52:	f7ff ffc9 	bl	8000be8 <__cmpsf2>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	bf48      	it	mi
 8000c5a:	f110 0f00 	cmnmi.w	r0, #0
 8000c5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c60 <__aeabi_fcmpeq>:
 8000c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c64:	f7ff fff4 	bl	8000c50 <__aeabi_cfcmpeq>
 8000c68:	bf0c      	ite	eq
 8000c6a:	2001      	moveq	r0, #1
 8000c6c:	2000      	movne	r0, #0
 8000c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c72:	bf00      	nop

08000c74 <__aeabi_fcmplt>:
 8000c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c78:	f7ff ffea 	bl	8000c50 <__aeabi_cfcmpeq>
 8000c7c:	bf34      	ite	cc
 8000c7e:	2001      	movcc	r0, #1
 8000c80:	2000      	movcs	r0, #0
 8000c82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c86:	bf00      	nop

08000c88 <__aeabi_fcmple>:
 8000c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c8c:	f7ff ffe0 	bl	8000c50 <__aeabi_cfcmpeq>
 8000c90:	bf94      	ite	ls
 8000c92:	2001      	movls	r0, #1
 8000c94:	2000      	movhi	r0, #0
 8000c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fcmpge>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff ffd2 	bl	8000c48 <__aeabi_cfrcmple>
 8000ca4:	bf94      	ite	ls
 8000ca6:	2001      	movls	r0, #1
 8000ca8:	2000      	movhi	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fcmpgt>:
 8000cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb4:	f7ff ffc8 	bl	8000c48 <__aeabi_cfrcmple>
 8000cb8:	bf34      	ite	cc
 8000cba:	2001      	movcc	r0, #1
 8000cbc:	2000      	movcs	r0, #0
 8000cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_uldivmod>:
 8000cc4:	b953      	cbnz	r3, 8000cdc <__aeabi_uldivmod+0x18>
 8000cc6:	b94a      	cbnz	r2, 8000cdc <__aeabi_uldivmod+0x18>
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	bf08      	it	eq
 8000ccc:	2800      	cmpeq	r0, #0
 8000cce:	bf1c      	itt	ne
 8000cd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd8:	f000 b972 	b.w	8000fc0 <__aeabi_idiv0>
 8000cdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce4:	f000 f806 	bl	8000cf4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4770      	bx	lr

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	468e      	mov	lr, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14c      	bne.n	8000d9e <__udivmoddi4+0xaa>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d967      	bls.n	8000dda <__udivmoddi4+0xe6>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b153      	cbz	r3, 8000d26 <__udivmoddi4+0x32>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	fa01 fe03 	lsl.w	lr, r1, r3
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	ea42 0e0e 	orr.w	lr, r2, lr
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fbbe f1f7 	udiv	r1, lr, r7
 8000d2e:	fa1f f58c 	uxth.w	r5, ip
 8000d32:	fb07 ee11 	mls	lr, r7, r1, lr
 8000d36:	fb01 f005 	mul.w	r0, r1, r5
 8000d3a:	0c22      	lsrs	r2, r4, #16
 8000d3c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x66>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 3eff 	add.w	lr, r1, #4294967295
 8000d4c:	f080 8119 	bcs.w	8000f82 <__udivmoddi4+0x28e>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8116 	bls.w	8000f82 <__udivmoddi4+0x28e>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d60:	fb07 2210 	mls	r2, r7, r0, r2
 8000d64:	fb00 f505 	mul.w	r5, r0, r5
 8000d68:	b2a4      	uxth	r4, r4
 8000d6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x94>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8104 	bcs.w	8000f86 <__udivmoddi4+0x292>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8101 	bls.w	8000f86 <__udivmoddi4+0x292>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	1b64      	subs	r4, r4, r5
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa6>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xc0>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ea 	beq.w	8000f7c <__udivmoddi4+0x288>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d148      	bne.n	8000e4e <__udivmoddi4+0x15a>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xd2>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4696      	mov	lr, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa6>
 8000dd4:	e9c6 4e00 	strd	r4, lr, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xea>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 808e 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de8:	1a88      	subs	r0, r1, r2
 8000dea:	2101      	movs	r1, #1
 8000dec:	0c17      	lsrs	r7, r2, #16
 8000dee:	fa1f fe82 	uxth.w	lr, r2
 8000df2:	fbb0 f5f7 	udiv	r5, r0, r7
 8000df6:	fb07 0015 	mls	r0, r7, r5, r0
 8000dfa:	0c22      	lsrs	r2, r4, #16
 8000dfc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e00:	fb0e f005 	mul.w	r0, lr, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x126>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x124>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f200 80cc 	bhi.w	8000fb0 <__udivmoddi4+0x2bc>
 8000e18:	4645      	mov	r5, r8
 8000e1a:	1a12      	subs	r2, r2, r0
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	b2a4      	uxth	r4, r4
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x150>
 8000e32:	eb1c 0404 	adds.w	r4, ip, r4
 8000e36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14e>
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	f200 80b4 	bhi.w	8000faa <__udivmoddi4+0x2b6>
 8000e42:	4610      	mov	r0, r2
 8000e44:	eba4 040e 	sub.w	r4, r4, lr
 8000e48:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4c:	e7a0      	b.n	8000d90 <__udivmoddi4+0x9c>
 8000e4e:	f1c1 0720 	rsb	r7, r1, #32
 8000e52:	408b      	lsls	r3, r1
 8000e54:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e58:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000e60:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e64:	fbba f8f9 	udiv	r8, sl, r9
 8000e68:	408d      	lsls	r5, r1
 8000e6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e6e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	432b      	orrs	r3, r5
 8000e78:	fa00 f501 	lsl.w	r5, r0, r1
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	0c1c      	lsrs	r4, r3, #16
 8000e82:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e86:	42a0      	cmp	r0, r4
 8000e88:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8c:	d90b      	bls.n	8000ea6 <__udivmoddi4+0x1b2>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e96:	f080 8086 	bcs.w	8000fa6 <__udivmoddi4+0x2b2>
 8000e9a:	42a0      	cmp	r0, r4
 8000e9c:	f240 8083 	bls.w	8000fa6 <__udivmoddi4+0x2b2>
 8000ea0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	1a24      	subs	r4, r4, r0
 8000ea8:	b298      	uxth	r0, r3
 8000eaa:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eae:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb2:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x1dc>
 8000ebe:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec2:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec6:	d26a      	bcs.n	8000f9e <__udivmoddi4+0x2aa>
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	d968      	bls.n	8000f9e <__udivmoddi4+0x2aa>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4464      	add	r4, ip
 8000ed0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000ed4:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed8:	eba4 040e 	sub.w	r4, r4, lr
 8000edc:	429c      	cmp	r4, r3
 8000ede:	46c8      	mov	r8, r9
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	d354      	bcc.n	8000f8e <__udivmoddi4+0x29a>
 8000ee4:	d051      	beq.n	8000f8a <__udivmoddi4+0x296>
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	d067      	beq.n	8000fba <__udivmoddi4+0x2c6>
 8000eea:	ebb5 0308 	subs.w	r3, r5, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	40cb      	lsrs	r3, r1
 8000ef4:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef8:	431f      	orrs	r7, r3
 8000efa:	40cc      	lsrs	r4, r1
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	2100      	movs	r1, #0
 8000f02:	e74a      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000f04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f08:	f1c3 0020 	rsb	r0, r3, #32
 8000f0c:	40c1      	lsrs	r1, r0
 8000f0e:	409d      	lsls	r5, r3
 8000f10:	fa24 f000 	lsr.w	r0, r4, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	4328      	orrs	r0, r5
 8000f1a:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f1e:	fb07 1115 	mls	r1, r7, r5, r1
 8000f22:	fa1f fe8c 	uxth.w	lr, ip
 8000f26:	0c02      	lsrs	r2, r0, #16
 8000f28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f30:	4291      	cmp	r1, r2
 8000f32:	fa04 f403 	lsl.w	r4, r4, r3
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x256>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d22f      	bcs.n	8000fa2 <__udivmoddi4+0x2ae>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d92d      	bls.n	8000fa2 <__udivmoddi4+0x2ae>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000f50:	fb07 2211 	mls	r2, r7, r1, r2
 8000f54:	b280      	uxth	r0, r0
 8000f56:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000f5a:	fb01 f20e 	mul.w	r2, r1, lr
 8000f5e:	4282      	cmp	r2, r0
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x280>
 8000f62:	eb1c 0000 	adds.w	r0, ip, r0
 8000f66:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f6a:	d216      	bcs.n	8000f9a <__udivmoddi4+0x2a6>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	d914      	bls.n	8000f9a <__udivmoddi4+0x2a6>
 8000f70:	3902      	subs	r1, #2
 8000f72:	4460      	add	r0, ip
 8000f74:	1a80      	subs	r0, r0, r2
 8000f76:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7a:	e73a      	b.n	8000df2 <__udivmoddi4+0xfe>
 8000f7c:	4631      	mov	r1, r6
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e70b      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000f82:	4671      	mov	r1, lr
 8000f84:	e6e9      	b.n	8000d5a <__udivmoddi4+0x66>
 8000f86:	4610      	mov	r0, r2
 8000f88:	e6fe      	b.n	8000d88 <__udivmoddi4+0x94>
 8000f8a:	454d      	cmp	r5, r9
 8000f8c:	d2ab      	bcs.n	8000ee6 <__udivmoddi4+0x1f2>
 8000f8e:	ebb9 0802 	subs.w	r8, r9, r2
 8000f92:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000f96:	3801      	subs	r0, #1
 8000f98:	e7a5      	b.n	8000ee6 <__udivmoddi4+0x1f2>
 8000f9a:	4641      	mov	r1, r8
 8000f9c:	e7ea      	b.n	8000f74 <__udivmoddi4+0x280>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	e796      	b.n	8000ed0 <__udivmoddi4+0x1dc>
 8000fa2:	4645      	mov	r5, r8
 8000fa4:	e7d1      	b.n	8000f4a <__udivmoddi4+0x256>
 8000fa6:	46d0      	mov	r8, sl
 8000fa8:	e77d      	b.n	8000ea6 <__udivmoddi4+0x1b2>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e749      	b.n	8000e44 <__udivmoddi4+0x150>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e731      	b.n	8000e1a <__udivmoddi4+0x126>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xdc>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e6ed      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <init_alarm>:
#include "distance_sensor.h"
#include "temperature_sensor.h"
#include "led_control.h"
#include "sync_manager.h"

void init_alarm(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	init_led();
 8000fc8:	f000 f942 	bl	8001250 <init_led>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <calc_status_led>:

void calc_status_led(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0

take_temp();
 8000fd6:	f000 fcf9 	bl	80019cc <take_temp>
float temp = Temperature;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <calc_status_led+0x84>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	60bb      	str	r3, [r7, #8]
give_temp();
 8000fe0:	f000 fd24 	bl	8001a2c <give_temp>

take_dis();
 8000fe4:	f000 fd02 	bl	80019ec <take_dis>
float dis = Distance;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <calc_status_led+0x88>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	607b      	str	r3, [r7, #4]
give_dis();
 8000fee:	f000 fd2b 	bl	8001a48 <give_dis>

int stat;

if(Temperature>30)//blink
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <calc_status_led+0x84>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4919      	ldr	r1, [pc, #100]	; (800105c <calc_status_led+0x8c>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe59 	bl	8000cb0 <__aeabi_fcmpgt>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <calc_status_led+0x3a>
	stat=4;
 8001004:	2304      	movs	r3, #4
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e019      	b.n	800103e <calc_status_led+0x6e>
else if(Temperature<15)//analog
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <calc_status_led+0x84>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4914      	ldr	r1, [pc, #80]	; (8001060 <calc_status_led+0x90>)
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fe2f 	bl	8000c74 <__aeabi_fcmplt>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <calc_status_led+0x52>
	stat=3;
 800101c:	2303      	movs	r3, #3
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e00d      	b.n	800103e <calc_status_led+0x6e>
else if(Distance<100)//alight
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <calc_status_led+0x88>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	490f      	ldr	r1, [pc, #60]	; (8001064 <calc_status_led+0x94>)
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fe23 	bl	8000c74 <__aeabi_fcmplt>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <calc_status_led+0x6a>
	stat=2;
 8001034:	2302      	movs	r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e001      	b.n	800103e <calc_status_led+0x6e>
else//off
	stat=1;
 800103a:	2301      	movs	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]

take_status();
 800103e:	f000 fce5 	bl	8001a0c <take_status>
Status=stat;
 8001042:	4a09      	ldr	r2, [pc, #36]	; (8001068 <calc_status_led+0x98>)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6013      	str	r3, [r2, #0]
give_status();
 8001048:	f000 fd0c 	bl	8001a64 <give_status>


}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000094 	.word	0x20000094
 8001058:	20000090 	.word	0x20000090
 800105c:	41f00000 	.word	0x41f00000
 8001060:	41700000 	.word	0x41700000
 8001064:	42c80000 	.word	0x42c80000
 8001068:	2000008c 	.word	0x2000008c

0800106c <turn_on_by_status>:

void turn_on_by_status(TIM_HandleTypeDef *htim3){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
take_status();
 8001074:	f000 fcca 	bl	8001a0c <take_status>
	switch (Status) {
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <turn_on_by_status+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3b01      	subs	r3, #1
 800107e:	2b03      	cmp	r3, #3
 8001080:	d826      	bhi.n	80010d0 <turn_on_by_status+0x64>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <turn_on_by_status+0x1c>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	08001099 	.word	0x08001099
 800108c:	0800109f 	.word	0x0800109f
 8001090:	080010a5 	.word	0x080010a5
 8001094:	080010ad 	.word	0x080010ad
		case 1:
			led_off();
 8001098:	f000 f8ec 	bl	8001274 <led_off>
			break;
 800109c:	e018      	b.n	80010d0 <turn_on_by_status+0x64>
		case 2:
			led_on();
 800109e:	f000 f8dd 	bl	800125c <led_on>
			break;
 80010a2:	e015      	b.n	80010d0 <turn_on_by_status+0x64>
		case 3:
			led_pwm(htim3);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f901 	bl	80012ac <led_pwm>
			break;
 80010aa:	e011      	b.n	80010d0 <turn_on_by_status+0x64>
		case 4:
			if(Distance<50)
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <turn_on_by_status+0x74>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <turn_on_by_status+0x78>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fdde 	bl	8000c74 <__aeabi_fcmplt>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <turn_on_by_status+0x5a>
				led_blink(250);
 80010be:	20fa      	movs	r0, #250	; 0xfa
 80010c0:	f000 f8e4 	bl	800128c <led_blink>
			else
				led_blink(500);
			break;
 80010c4:	e003      	b.n	80010ce <turn_on_by_status+0x62>
				led_blink(500);
 80010c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ca:	f000 f8df 	bl	800128c <led_blink>
			break;
 80010ce:	bf00      	nop

}
give_status();
 80010d0:	f000 fcc8 	bl	8001a64 <give_status>

}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000008c 	.word	0x2000008c
 80010e0:	20000090 	.word	0x20000090
 80010e4:	42480000 	.word	0x42480000

080010e8 <task_measure_calc>:

void task_measure_calc()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	while(1)
	{
		calc_status_led();
 80010ec:	f7ff ff70 	bl	8000fd0 <calc_status_led>
 80010f0:	e7fc      	b.n	80010ec <task_measure_calc+0x4>

080010f2 <task_measure_turn_on>:
		//vTaskDelay(1000);
	}
}

void task_measure_turn_on(TIM_HandleTypeDef *htim3)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
	while(1)
	{
		turn_on_by_status(htim3);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb6 	bl	800106c <turn_on_by_status>
 8001100:	e7fb      	b.n	80010fa <task_measure_turn_on+0x8>
	...

08001104 <init_distance_sensor>:
uint32_t pMillis;
uint32_t time_start = 0;
uint32_t time_end = 0;

Status_t init_distance_sensor(TIM_HandleTypeDef *timer)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(timer);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f002 fce3 	bl	8003ad8 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <init_distance_sensor+0x24>)
 800111a:	f001 fec0 	bl	8002e9e <HAL_GPIO_WritePin>
	return xSUCCESS; //TODO
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020000 	.word	0x40020000
 800112c:	00000000 	.word	0x00000000

08001130 <read_distance>:

float read_distance(TIM_HandleTypeDef *sensorTimer)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113e:	4836      	ldr	r0, [pc, #216]	; (8001218 <read_distance+0xe8>)
 8001140:	f001 fead 	bl	8002e9e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(sensorTimer, 0);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (sensorTimer) < TIMER_GAP);  // wait for 10 us
 800114c:	bf00      	nop
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	2b09      	cmp	r3, #9
 8001156:	d9fa      	bls.n	800114e <read_distance+0x1e>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115e:	482e      	ldr	r0, [pc, #184]	; (8001218 <read_distance+0xe8>)
 8001160:	f001 fe9d 	bl	8002e9e <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001164:	f000 feb6 	bl	8001ed4 <HAL_GetTick>
 8001168:	4603      	mov	r3, r0
 800116a:	4a2c      	ldr	r2, [pc, #176]	; (800121c <read_distance+0xec>)
 800116c:	6013      	str	r3, [r2, #0]
		// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + TIMER_GAP >  HAL_GetTick());
 800116e:	bf00      	nop
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	4828      	ldr	r0, [pc, #160]	; (8001218 <read_distance+0xe8>)
 8001176:	f001 fe7b 	bl	8002e70 <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d108      	bne.n	8001192 <read_distance+0x62>
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <read_distance+0xec>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f103 040a 	add.w	r4, r3, #10
 8001188:	f000 fea4 	bl	8001ed4 <HAL_GetTick>
 800118c:	4603      	mov	r3, r0
 800118e:	429c      	cmp	r4, r3
 8001190:	d8ee      	bhi.n	8001170 <read_distance+0x40>
	time_start = __HAL_TIM_GET_COUNTER (sensorTimer);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	4a21      	ldr	r2, [pc, #132]	; (8001220 <read_distance+0xf0>)
 800119a:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800119c:	f000 fe9a 	bl	8001ed4 <HAL_GetTick>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <read_distance+0xec>)
 80011a4:	6013      	str	r3, [r2, #0]
		// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick()); //TODO
 80011a6:	bf00      	nop
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	481a      	ldr	r0, [pc, #104]	; (8001218 <read_distance+0xe8>)
 80011ae:	f001 fe5f 	bl	8002e70 <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <read_distance+0x9a>
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <read_distance+0xec>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80011c0:	f000 fe88 	bl	8001ed4 <HAL_GetTick>
 80011c4:	4603      	mov	r3, r0
 80011c6:	429c      	cmp	r4, r3
 80011c8:	d8ee      	bhi.n	80011a8 <read_distance+0x78>
	time_end = __HAL_TIM_GET_COUNTER (sensorTimer);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <read_distance+0xf4>)
 80011d2:	6013      	str	r3, [r2, #0]

	return (float)(time_end - time_start) * SPEED_OF_SOUND ;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <read_distance+0xf4>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <read_distance+0xf0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fca2 	bl	8000b28 <__aeabi_ui2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f92e 	bl	8000448 <__aeabi_f2d>
 80011ec:	a308      	add	r3, pc, #32	; (adr r3, 8001210 <read_distance+0xe0>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff f981 	bl	80004f8 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fb8d 	bl	800091c <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	f3af 8000 	nop.w
 8001210:	04816f00 	.word	0x04816f00
 8001214:	3fa18fc5 	.word	0x3fa18fc5
 8001218:	40020000 	.word	0x40020000
 800121c:	2000009c 	.word	0x2000009c
 8001220:	200000a0 	.word	0x200000a0
 8001224:	200000a4 	.word	0x200000a4

08001228 <task_periodic_measure_distance>:

void task_periodic_measure_distance(void *timer)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *sensorTimer = (TIM_HandleTypeDef*)timer;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60fb      	str	r3, [r7, #12]
	float dis;
	while(1)
		{

			dis = read_distance(sensorTimer);
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff ff7b 	bl	8001130 <read_distance>
 800123a:	60b8      	str	r0, [r7, #8]
//			vTaskDelay(100);
			take_dis();
 800123c:	f000 fbd6 	bl	80019ec <take_dis>
			Distance=dis;
 8001240:	4a02      	ldr	r2, [pc, #8]	; (800124c <task_periodic_measure_distance+0x24>)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	6013      	str	r3, [r2, #0]
			give_dis();
 8001246:	f000 fbff 	bl	8001a48 <give_dis>
			dis = read_distance(sensorTimer);
 800124a:	e7f3      	b.n	8001234 <task_periodic_measure_distance+0xc>
 800124c:	20000098 	.word	0x20000098

08001250 <init_led>:
 *      Author: hitmachut
 */
#include "led_control.h"
#include "main.h"

void init_led(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  led_off();
 8001254:	f000 f80e 	bl	8001274 <led_off>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <led_on>:

void led_on(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001266:	4802      	ldr	r0, [pc, #8]	; (8001270 <led_on+0x14>)
 8001268:	f001 fe19 	bl	8002e9e <HAL_GPIO_WritePin>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40020000 	.word	0x40020000

08001274 <led_off>:
void led_off(){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127e:	4802      	ldr	r0, [pc, #8]	; (8001288 <led_off+0x14>)
 8001280:	f001 fe0d 	bl	8002e9e <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40020000 	.word	0x40020000

0800128c <led_blink>:
void led_blink(uint32_t frequency){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	led_on();
 8001294:	f7ff ffe2 	bl	800125c <led_on>
	vTaskDelay(frequency);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f004 fc9d 	bl	8005bd8 <vTaskDelay>
	led_off();
 800129e:	f7ff ffe9 	bl	8001274 <led_off>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <led_pwm>:

void led_pwm(TIM_HandleTypeDef *htim3){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	int* data = (int*)malloc(sizeof(int));
 80012b4:	2004      	movs	r0, #4
 80012b6:	f006 f9e9 	bl	800768c <malloc>
 80012ba:	4603      	mov	r3, r0
 80012bc:	60fb      	str	r3, [r7, #12]
	*data = (int)(rand() % PWM_MAX_VALUE) + 1;
 80012be:	f006 faa1 	bl	8007804 <rand>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <led_pwm+0x60>)
 80012c6:	fb83 1302 	smull	r1, r3, r3, r2
 80012ca:	1199      	asrs	r1, r3, #6
 80012cc:	17d3      	asrs	r3, r2, #31
 80012ce:	1acb      	subs	r3, r1, r3
 80012d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012d4:	fb01 f303 	mul.w	r3, r1, r3
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	601a      	str	r2, [r3, #0]
	pwmSetValue(*data,htim3);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f811 	bl	8001310 <pwmSetValue>
	if (data)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <led_pwm+0x4e>
		free(data);
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f006 f9d1 	bl	800769c <free>
	vTaskDelay(500);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f004 fc6b 	bl	8005bd8 <vTaskDelay>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	10624dd3 	.word	0x10624dd3

08001310 <pwmSetValue>:


void pwmSetValue(uint16_t pulseWidth, TIM_HandleTypeDef *htim3)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	; 0x60
 800132c:	60bb      	str	r3, [r7, #8]
	sConfigOC.Pulse = pulseWidth;
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(htim3, &sConfigOC, TIM_CHANNEL_1);//config the channel with the new pulse width
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f002 fdcc 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);//start the PWM signal
 8001348:	2100      	movs	r1, #0
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f002 fc56 	bl	8003bfc <HAL_TIM_PWM_Start>
}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135c:	f000 fd55 	bl	8001e0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001360:	f000 f832 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001364:	f000 f998 	bl	8001698 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001368:	f000 f8d6 	bl	8001518 <MX_TIM2_Init>
  MX_ADC_Init();
 800136c:	f000 f87c 	bl	8001468 <MX_ADC_Init>
  MX_TIM3_Init();
 8001370:	f000 f91e 	bl	80015b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  init_distance_sensor(&htim2);
 8001374:	480e      	ldr	r0, [pc, #56]	; (80013b0 <main+0x58>)
 8001376:	f7ff fec5 	bl	8001104 <init_distance_sensor>
  init_temperature_sensor(&hadc);
 800137a:	480e      	ldr	r0, [pc, #56]	; (80013b4 <main+0x5c>)
 800137c:	f000 fcc2 	bl	8001d04 <init_temperature_sensor>
  init_alarm();
 8001380:	f7ff fe20 	bl	8000fc4 <init_alarm>
  init_led();
 8001384:	f7ff ff64 	bl	8001250 <init_led>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001388:	f003 f9de 	bl	8004748 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  init_mutex();
 800138c:	f000 fb02 	bl	8001994 <init_mutex>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001390:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <main+0x60>)
 8001392:	2100      	movs	r1, #0
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <main+0x64>)
 8001396:	f003 fa3d 	bl	8004814 <osThreadNew>
 800139a:	4603      	mov	r3, r0
 800139c:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <main+0x68>)
 800139e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  create_tasks(&htim2, &hadc,&htim3);
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <main+0x6c>)
 80013a2:	4904      	ldr	r1, [pc, #16]	; (80013b4 <main+0x5c>)
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <main+0x58>)
 80013a6:	f000 fc31 	bl	8001c0c <create_tasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013aa:	f003 f9ff 	bl	80047ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <main+0x56>
 80013b0:	200000fc 	.word	0x200000fc
 80013b4:	200000a8 	.word	0x200000a8
 80013b8:	080087b4 	.word	0x080087b4
 80013bc:	08001735 	.word	0x08001735
 80013c0:	2000017c 	.word	0x2000017c
 80013c4:	2000013c 	.word	0x2000013c

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b092      	sub	sp, #72	; 0x48
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2234      	movs	r2, #52	; 0x34
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f006 fb57 	bl	8007a8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <SystemClock_Config+0x9c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <SystemClock_Config+0x9c>)
 80013f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013fa:	2303      	movs	r3, #3
 80013fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001402:	2301      	movs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001406:	2310      	movs	r3, #16
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001414:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001418:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800141a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4618      	mov	r0, r3
 8001426:	f001 fd53 	bl	8002ed0 <HAL_RCC_OscConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001430:	f000 f988 	bl	8001744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001434:	230f      	movs	r3, #15
 8001436:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001438:	2303      	movs	r3, #3
 800143a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	2101      	movs	r1, #1
 800144c:	4618      	mov	r0, r3
 800144e:	f002 f86f 	bl	8003530 <HAL_RCC_ClockConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001458:	f000 f974 	bl	8001744 <Error_Handler>
  }
}
 800145c:	bf00      	nop
 800145e:	3748      	adds	r7, #72	; 0x48
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40007000 	.word	0x40007000

08001468 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_ADC_Init+0xa8>)
 800147a:	4a26      	ldr	r2, [pc, #152]	; (8001514 <MX_ADC_Init+0xac>)
 800147c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_ADC_Init+0xa8>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_ADC_Init+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <MX_ADC_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <MX_ADC_Init+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <MX_ADC_Init+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <MX_ADC_Init+0xa8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_ADC_Init+0xa8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_ADC_Init+0xa8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_ADC_Init+0xa8>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_ADC_Init+0xa8>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_ADC_Init+0xa8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_ADC_Init+0xa8>)
 80014c6:	2210      	movs	r2, #16
 80014c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_ADC_Init+0xa8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_ADC_Init+0xa8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <MX_ADC_Init+0xa8>)
 80014da:	f000 fd05 	bl	8001ee8 <HAL_ADC_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80014e4:	f000 f92e 	bl	8001744 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 80014f0:	2307      	movs	r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_ADC_Init+0xa8>)
 80014fa:	f001 f849 	bl	8002590 <HAL_ADC_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001504:	f000 f91e 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000a8 	.word	0x200000a8
 8001514:	40012400 	.word	0x40012400

08001518 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_TIM2_Init+0x94>)
 8001536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_TIM2_Init+0x94>)
 800153e:	221f      	movs	r2, #31
 8001540:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_TIM2_Init+0x94>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF-1;
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_TIM2_Init+0x94>)
 800154a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800154e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_TIM2_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_TIM2_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800155c:	4813      	ldr	r0, [pc, #76]	; (80015ac <MX_TIM2_Init+0x94>)
 800155e:	f002 fa7b 	bl	8003a58 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001568:	f000 f8ec 	bl	8001744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4619      	mov	r1, r3
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <MX_TIM2_Init+0x94>)
 800157a:	f002 fd73 	bl	8004064 <HAL_TIM_ConfigClockSource>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001584:	f000 f8de 	bl	8001744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_TIM2_Init+0x94>)
 8001596:	f003 f879 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015a0:	f000 f8d0 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200000fc 	.word	0x200000fc

080015b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <MX_TIM3_Init+0xe0>)
 80015dc:	4a2d      	ldr	r2, [pc, #180]	; (8001694 <MX_TIM3_Init+0xe4>)
 80015de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MX_TIM3_Init+0xe0>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <MX_TIM3_Init+0xe0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <MX_TIM3_Init+0xe0>)
 80015ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80015f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_TIM3_Init+0xe0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <MX_TIM3_Init+0xe0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001600:	4823      	ldr	r0, [pc, #140]	; (8001690 <MX_TIM3_Init+0xe0>)
 8001602:	f002 fa29 	bl	8003a58 <HAL_TIM_Base_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800160c:	f000 f89a 	bl	8001744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001614:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	4619      	mov	r1, r3
 800161c:	481c      	ldr	r0, [pc, #112]	; (8001690 <MX_TIM3_Init+0xe0>)
 800161e:	f002 fd21 	bl	8004064 <HAL_TIM_ConfigClockSource>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001628:	f000 f88c 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800162c:	4818      	ldr	r0, [pc, #96]	; (8001690 <MX_TIM3_Init+0xe0>)
 800162e:	f002 fa9d 	bl	8003b6c <HAL_TIM_PWM_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001638:	f000 f884 	bl	8001744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	4811      	ldr	r0, [pc, #68]	; (8001690 <MX_TIM3_Init+0xe0>)
 800164c:	f003 f81e 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001656:	f000 f875 	bl	8001744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165a:	2360      	movs	r3, #96	; 0x60
 800165c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <MX_TIM3_Init+0xe0>)
 8001672:	f002 fc35 	bl	8003ee0 <HAL_TIM_PWM_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800167c:	f000 f862 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <MX_TIM3_Init+0xe0>)
 8001682:	f000 f919 	bl	80018b8 <HAL_TIM_MspPostInit>

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000013c 	.word	0x2000013c
 8001694:	40000400 	.word	0x40000400

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_GPIO_Init+0x94>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <MX_GPIO_Init+0x94>)
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	61d3      	str	r3, [r2, #28]
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_GPIO_Init+0x94>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_GPIO_Init+0x94>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a18      	ldr	r2, [pc, #96]	; (800172c <MX_GPIO_Init+0x94>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_GPIO_Init+0x94>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <MX_GPIO_Init+0x98>)
 80016e6:	f001 fbda 	bl	8002e9e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80016ea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80016ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	4619      	mov	r1, r3
 8001702:	480b      	ldr	r0, [pc, #44]	; (8001730 <MX_GPIO_Init+0x98>)
 8001704:	f001 fa24 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	4619      	mov	r1, r3
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_GPIO_Init+0x98>)
 800171e:	f001 fa17 	bl	8002b50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40020000 	.word	0x40020000

08001734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800173c:	2001      	movs	r0, #1
 800173e:	f003 f913 	bl	8004968 <osDelay>
 8001742:	e7fb      	b.n	800173c <StartDefaultTask+0x8>

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	e7fe      	b.n	800174c <Error_Handler+0x8>
	...

08001750 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_MspInit+0x64>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <HAL_MspInit+0x64>)
 800175c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001760:	6253      	str	r3, [r2, #36]	; 0x24
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_MspInit+0x64>)
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_MspInit+0x64>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <HAL_MspInit+0x64>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6213      	str	r3, [r2, #32]
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_MspInit+0x64>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_MspInit+0x64>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_MspInit+0x64>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6253      	str	r3, [r2, #36]	; 0x24
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_MspInit+0x64>)
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	210f      	movs	r1, #15
 80017a2:	f06f 0001 	mvn.w	r0, #1
 80017a6:	f001 f99c 	bl	8002ae2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a19      	ldr	r2, [pc, #100]	; (800183c <HAL_ADC_MspInit+0x84>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d12b      	bne.n	8001832 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_ADC_MspInit+0x88>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4a18      	ldr	r2, [pc, #96]	; (8001840 <HAL_ADC_MspInit+0x88>)
 80017e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e4:	6213      	str	r3, [r2, #32]
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_ADC_MspInit+0x88>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_ADC_MspInit+0x88>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <HAL_ADC_MspInit+0x88>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_ADC_MspInit+0x88>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800180a:	2301      	movs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180e:	2303      	movs	r3, #3
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <HAL_ADC_MspInit+0x8c>)
 800181e:	f001 f997 	bl	8002b50 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2012      	movs	r0, #18
 8001828:	f001 f95b 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800182c:	2012      	movs	r0, #18
 800182e:	f001 f974 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40012400 	.word	0x40012400
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001858:	d114      	bne.n	8001884 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_TIM_Base_MspInit+0x68>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <HAL_TIM_Base_MspInit+0x68>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6253      	str	r3, [r2, #36]	; 0x24
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_TIM_Base_MspInit+0x68>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2105      	movs	r1, #5
 8001876:	201c      	movs	r0, #28
 8001878:	f001 f933 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800187c:	201c      	movs	r0, #28
 800187e:	f001 f94c 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001882:	e010      	b.n	80018a6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_TIM_Base_MspInit+0x6c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10b      	bne.n	80018a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_TIM_Base_MspInit+0x68>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <HAL_TIM_Base_MspInit+0x68>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6253      	str	r3, [r2, #36]	; 0x24
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_TIM_Base_MspInit+0x68>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40000400 	.word	0x40000400

080018b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a11      	ldr	r2, [pc, #68]	; (800191c <HAL_TIM_MspPostInit+0x64>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d11b      	bne.n	8001912 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_TIM_MspPostInit+0x68>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_TIM_MspPostInit+0x68>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_TIM_MspPostInit+0x68>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018f2:	2340      	movs	r3, #64	; 0x40
 80018f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001902:	2302      	movs	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_TIM_MspPostInit+0x6c>)
 800190e:	f001 f91f 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40000400 	.word	0x40000400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800192c:	e7fe      	b.n	800192c <NMI_Handler+0x4>

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <MemManage_Handler+0x4>

0800193a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler+0x4>

08001946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001956:	f000 faab 	bl	8001eb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800195a:	f004 fdd3 	bl	8006504 <xTaskGetSchedulerState>
 800195e:	4603      	mov	r3, r0
 8001960:	2b01      	cmp	r3, #1
 8001962:	d001      	beq.n	8001968 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001964:	f005 fc38 	bl	80071d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <ADC1_IRQHandler+0x10>)
 8001972:	f000 fcfb 	bl	800236c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200000a8 	.word	0x200000a8

08001980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TIM2_IRQHandler+0x10>)
 8001986:	f002 f9cf 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200000fc 	.word	0x200000fc

08001994 <init_mutex>:
 *
 *  Created on: Jun 4, 2024
 *      Author: hitmachut
 */
#include "sync_manager.h"
void init_mutex(){
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	mutex_temp = xSemaphoreCreateMutex();
 8001998:	2001      	movs	r0, #1
 800199a:	f003 fa4f 	bl	8004e3c <xQueueCreateMutex>
 800199e:	4603      	mov	r3, r0
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <init_mutex+0x2c>)
 80019a2:	6013      	str	r3, [r2, #0]
	mutex_dis = xSemaphoreCreateMutex();
 80019a4:	2001      	movs	r0, #1
 80019a6:	f003 fa49 	bl	8004e3c <xQueueCreateMutex>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <init_mutex+0x30>)
 80019ae:	6013      	str	r3, [r2, #0]
	mutex_status = xSemaphoreCreateMutex();
 80019b0:	2001      	movs	r0, #1
 80019b2:	f003 fa43 	bl	8004e3c <xQueueCreateMutex>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <init_mutex+0x34>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000180 	.word	0x20000180
 80019c4:	20000184 	.word	0x20000184
 80019c8:	20000188 	.word	0x20000188

080019cc <take_temp>:
void take_temp(){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	xSemaphoreTake(mutex_temp, MAX_DELAY);
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <take_temp+0x18>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <take_temp+0x1c>)
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 fcbc 	bl	8005358 <xQueueSemaphoreTake>
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000180 	.word	0x20000180
 80019e8:	20000000 	.word	0x20000000

080019ec <take_dis>:
void take_dis(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	xSemaphoreTake(mutex_dis, MAX_DELAY);
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <take_dis+0x18>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <take_dis+0x1c>)
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fcac 	bl	8005358 <xQueueSemaphoreTake>
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000184 	.word	0x20000184
 8001a08:	20000000 	.word	0x20000000

08001a0c <take_status>:
void take_status(){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	xSemaphoreTake(mutex_status, MAX_DELAY);
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <take_status+0x18>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <take_status+0x1c>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fc9c 	bl	8005358 <xQueueSemaphoreTake>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000188 	.word	0x20000188
 8001a28:	20000000 	.word	0x20000000

08001a2c <give_temp>:

void give_temp(){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	xSemaphoreGive(mutex_temp);
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <give_temp+0x18>)
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	2300      	movs	r3, #0
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	f003 fa17 	bl	8004e6c <xQueueGenericSend>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000180 	.word	0x20000180

08001a48 <give_dis>:
void give_dis(){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	xSemaphoreGive(mutex_dis);
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <give_dis+0x18>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	2300      	movs	r3, #0
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	f003 fa09 	bl	8004e6c <xQueueGenericSend>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000184 	.word	0x20000184

08001a64 <give_status>:
void give_status(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	xSemaphoreGive(mutex_status);
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <give_status+0x18>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	f003 f9fb 	bl	8004e6c <xQueueGenericSend>
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000188 	.word	0x20000188

08001a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return 1;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <_kill>:

int _kill(int pid, int sig)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a98:	f006 f8ac 	bl	8007bf4 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2216      	movs	r2, #22
 8001aa0:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_exit>:

void _exit (int status)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffe7 	bl	8001a8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ac0:	e7fe      	b.n	8001ac0 <_exit+0x12>

08001ac2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e00a      	b.n	8001aea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	4601      	mov	r1, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	60ba      	str	r2, [r7, #8]
 8001ae0:	b2ca      	uxtb	r2, r1
 8001ae2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbf0      	blt.n	8001ad4 <_read+0x12>
  }

  return len;
 8001af2:	687b      	ldr	r3, [r7, #4]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e009      	b.n	8001b22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	60ba      	str	r2, [r7, #8]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbf1      	blt.n	8001b0e <_write+0x12>
  }
  return len;
 8001b2a:	687b      	ldr	r3, [r7, #4]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_close>:

int _close(int file)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <_isatty>:

int _isatty(int file)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc4:	f006 f816 	bl	8007bf4 <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20014000 	.word	0x20014000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	2000018c 	.word	0x2000018c
 8001bfc:	20001cd8 	.word	0x20001cd8

08001c00 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <create_tasks>:
static TaskHandle_t * MeasureTempTask;
static TaskHandle_t * AlarmCalcTask;
static TaskHandle_t * AlarmTurnOnTask;

void create_tasks(TIM_HandleTypeDef *timer, ADC_HandleTypeDef *adc, TIM_HandleTypeDef *htim3)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
	create_read_distance_task(timer);
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f80d 	bl	8001c38 <create_read_distance_task>
	create_measure_temperature_task(adc);
 8001c1e:	68b8      	ldr	r0, [r7, #8]
 8001c20:	f000 f824 	bl	8001c6c <create_measure_temperature_task>
	create_alarm_calc_task();
 8001c24:	f000 f83c 	bl	8001ca0 <create_alarm_calc_task>
	create_alarm_turn_on_task(htim3);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f851 	bl	8001cd0 <create_alarm_turn_on_task>
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <create_read_distance_task>:

void create_read_distance_task(TIM_HandleTypeDef *timer)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	6078      	str	r0, [r7, #4]
	xTaskCreate(task_periodic_measure_distance, "Read Distance", QUEUE_DEPTH, timer, READ_DISTANCE_TASK_PRIORITY, ReadDistanceTask);
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <create_read_distance_task+0x28>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	230a      	movs	r3, #10
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2264      	movs	r2, #100	; 0x64
 8001c4e:	4905      	ldr	r1, [pc, #20]	; (8001c64 <create_read_distance_task+0x2c>)
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <create_read_distance_task+0x30>)
 8001c52:	f003 fe6d 	bl	8005930 <xTaskCreate>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000190 	.word	0x20000190
 8001c64:	08008764 	.word	0x08008764
 8001c68:	08001229 	.word	0x08001229

08001c6c <create_measure_temperature_task>:

void create_measure_temperature_task(ADC_HandleTypeDef *adc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	6078      	str	r0, [r7, #4]
	xTaskCreate(task_measure_temperature, "Read Temp", QUEUE_DEPTH, adc, MEASURE_TEMP_TASK_PRIORITY, MeasureTempTask);
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <create_measure_temperature_task+0x28>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2264      	movs	r2, #100	; 0x64
 8001c82:	4905      	ldr	r1, [pc, #20]	; (8001c98 <create_measure_temperature_task+0x2c>)
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <create_measure_temperature_task+0x30>)
 8001c86:	f003 fe53 	bl	8005930 <xTaskCreate>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000194 	.word	0x20000194
 8001c98:	08008774 	.word	0x08008774
 8001c9c:	08001d91 	.word	0x08001d91

08001ca0 <create_alarm_calc_task>:


void create_alarm_calc_task(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af02      	add	r7, sp, #8
	xTaskCreate(task_measure_calc, "Alarm_Calc", QUEUE_DEPTH, NULL, MEASURE_TEMP_TASK_PRIORITY, AlarmCalcTask);
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <create_alarm_calc_task+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	230a      	movs	r3, #10
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2264      	movs	r2, #100	; 0x64
 8001cb4:	4904      	ldr	r1, [pc, #16]	; (8001cc8 <create_alarm_calc_task+0x28>)
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <create_alarm_calc_task+0x2c>)
 8001cb8:	f003 fe3a 	bl	8005930 <xTaskCreate>
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000198 	.word	0x20000198
 8001cc8:	08008780 	.word	0x08008780
 8001ccc:	080010e9 	.word	0x080010e9

08001cd0 <create_alarm_turn_on_task>:

void create_alarm_turn_on_task(TIM_HandleTypeDef *htim3){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	6078      	str	r0, [r7, #4]
	xTaskCreate(task_measure_turn_on, "Alarm_Turn_on", QUEUE_DEPTH, htim3, MEASURE_TEMP_TASK_PRIORITY, AlarmTurnOnTask);
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <create_alarm_turn_on_task+0x28>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	230a      	movs	r3, #10
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2264      	movs	r2, #100	; 0x64
 8001ce6:	4905      	ldr	r1, [pc, #20]	; (8001cfc <create_alarm_turn_on_task+0x2c>)
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <create_alarm_turn_on_task+0x30>)
 8001cea:	f003 fe21 	bl	8005930 <xTaskCreate>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000019c 	.word	0x2000019c
 8001cfc:	0800878c 	.word	0x0800878c
 8001d00:	080010f3 	.word	0x080010f3

08001d04 <init_temperature_sensor>:
#include "task.h"

uint16_t adc_value = 0;

Status_t init_temperature_sensor(ADC_HandleTypeDef *adc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	  HAL_ADC_Start(adc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fa31 	bl	8002174 <HAL_ADC_Start>
	  return xSUCCESS; //TODO
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	0000      	movs	r0, r0
	...

08001d20 <read_temperature>:

float read_temperature(ADC_HandleTypeDef *adc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	  int x = HAL_ADC_PollForConversion(adc, 1000);
 8001d28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fa81 	bl	8002234 <HAL_ADC_PollForConversion>
 8001d32:	4603      	mov	r3, r0
 8001d34:	60fb      	str	r3, [r7, #12]
	  adc_value = HAL_ADC_GetValue(adc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fb0c 	bl	8002354 <HAL_ADC_GetValue>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <read_temperature+0x68>)
 8001d42:	801a      	strh	r2, [r3, #0]
	  return adc_value * (VOLT_SUPPLY / ANALOG_RANGE) / MILIVOLT_PER_DEGREE;
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <read_temperature+0x68>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb6b 	bl	8000424 <__aeabi_i2d>
 8001d4e:	a30c      	add	r3, pc, #48	; (adr r3, 8001d80 <read_temperature+0x60>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fbd0 	bl	80004f8 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <read_temperature+0x6c>)
 8001d66:	f7fe fcf1 	bl	800074c <__aeabi_ddiv>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7fe fdd3 	bl	800091c <__aeabi_d2f>
 8001d76:	4603      	mov	r3, r0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	00000000 	.word	0x00000000
 8001d84:	3fe9c800 	.word	0x3fe9c800
 8001d88:	200001a4 	.word	0x200001a4
 8001d8c:	40240000 	.word	0x40240000

08001d90 <task_measure_temperature>:

void task_measure_temperature(void *adc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	float temp;
	ADC_HandleTypeDef *pADC = (ADC_HandleTypeDef*)adc;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]
	while(1)
	{

//			take_temp();
			temp = read_temperature(pADC);
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff ffbf 	bl	8001d20 <read_temperature>
 8001da2:	60b8      	str	r0, [r7, #8]
			take_temp();
 8001da4:	f7ff fe12 	bl	80019cc <take_temp>
			Temperature=temp;
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <task_measure_temperature+0x2c>)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	6013      	str	r3, [r2, #0]
			give_temp();
 8001dae:	f7ff fe3d 	bl	8001a2c <give_temp>
		vTaskDelay(1000);
 8001db2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db6:	f003 ff0f 	bl	8005bd8 <vTaskDelay>
			temp = read_temperature(pADC);
 8001dba:	e7ef      	b.n	8001d9c <task_measure_temperature+0xc>
 8001dbc:	200001a0 	.word	0x200001a0

08001dc0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dc0:	f7ff ff1e 	bl	8001c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc4:	480b      	ldr	r0, [pc, #44]	; (8001df4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dc6:	490c      	ldr	r1, [pc, #48]	; (8001df8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dc8:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ddc:	4c09      	ldr	r4, [pc, #36]	; (8001e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dea:	f005 ff09 	bl	8007c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dee:	f7ff fab3 	bl	8001358 <main>
  bx lr
 8001df2:	4770      	bx	lr
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001dfc:	080088e4 	.word	0x080088e4
  ldr r2, =_sbss
 8001e00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e04:	20001cd8 	.word	0x20001cd8

08001e08 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <COMP_ACQ_IRQHandler>

08001e0a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 fe59 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f000 f80e 	bl	8001e3c <HAL_InitTick>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	e001      	b.n	8001e30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e2c:	f7ff fc90 	bl	8001750 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e30:	79fb      	ldrb	r3, [r7, #7]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_InitTick+0x68>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d022      	beq.n	8001e96 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_InitTick+0x6c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_InitTick+0x68>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fe66 	bl	8002b36 <HAL_SYSTICK_Config>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10f      	bne.n	8001e90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	d809      	bhi.n	8001e8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e76:	2200      	movs	r2, #0
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7e:	f000 fe30 	bl	8002ae2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <HAL_InitTick+0x70>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	e007      	b.n	8001e9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e004      	b.n	8001e9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e001      	b.n	8001e9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_IncTick+0x1c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_IncTick+0x20>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_IncTick+0x1c>)
 8001ec0:	6013      	str	r3, [r2, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	200001a8 	.word	0x200001a8
 8001ed0:	2000000c 	.word	0x2000000c

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b02      	ldr	r3, [pc, #8]	; (8001ee4 <HAL_GetTick+0x10>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	200001a8 	.word	0x200001a8

08001ee8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08e      	sub	sp, #56	; 0x38
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e127      	b.n	8002158 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d115      	bne.n	8001f42 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f24:	4b8e      	ldr	r3, [pc, #568]	; (8002160 <HAL_ADC_Init+0x278>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a8d      	ldr	r2, [pc, #564]	; (8002160 <HAL_ADC_Init+0x278>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	4b8b      	ldr	r3, [pc, #556]	; (8002160 <HAL_ADC_Init+0x278>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff fc3b 	bl	80017b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80ff 	bne.w	800214e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f58:	f023 0302 	bic.w	r3, r3, #2
 8001f5c:	f043 0202 	orr.w	r2, r3, #2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001f64:	4b7f      	ldr	r3, [pc, #508]	; (8002164 <HAL_ADC_Init+0x27c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	497c      	ldr	r1, [pc, #496]	; (8002164 <HAL_ADC_Init+0x27c>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001f7e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f86:	4619      	mov	r1, r3
 8001f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001fa2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001fa8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001fca:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d007      	beq.n	8001fea <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff4:	2b40      	cmp	r3, #64	; 0x40
 8001ff6:	d04f      	beq.n	8002098 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffe:	4313      	orrs	r3, r2
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800200a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6912      	ldr	r2, [r2, #16]
 8002010:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002014:	d003      	beq.n	800201e <HAL_ADC_Init+0x136>
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6912      	ldr	r2, [r2, #16]
 800201a:	2a01      	cmp	r2, #1
 800201c:	d102      	bne.n	8002024 <HAL_ADC_Init+0x13c>
 800201e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002022:	e000      	b.n	8002026 <HAL_ADC_Init+0x13e>
 8002024:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002026:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800202a:	4313      	orrs	r3, r2
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002034:	2b01      	cmp	r3, #1
 8002036:	d125      	bne.n	8002084 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800203e:	2b00      	cmp	r3, #0
 8002040:	d114      	bne.n	800206c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	3b01      	subs	r3, #1
 8002048:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800204c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	fa92 f2a2 	rbit	r2, r2
 8002054:	617a      	str	r2, [r7, #20]
  return result;
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	fab2 f282 	clz	r2, r2
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	4093      	lsls	r3, r2
 8002060:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002066:	4313      	orrs	r3, r2
 8002068:	633b      	str	r3, [r7, #48]	; 0x30
 800206a:	e00b      	b.n	8002084 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_ADC_Init+0x280>)
 800208c:	4013      	ands	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002094:	430b      	orrs	r3, r1
 8002096:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	4b33      	ldr	r3, [pc, #204]	; (800216c <HAL_ADC_Init+0x284>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b4:	d003      	beq.n	80020be <HAL_ADC_Init+0x1d6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d119      	bne.n	80020f2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	3b01      	subs	r3, #1
 80020ce:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80020d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	fa92 f2a2 	rbit	r2, r2
 80020da:	60fa      	str	r2, [r7, #12]
  return result;
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	fab2 f282 	clz	r2, r2
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	fa03 f202 	lsl.w	r2, r3, r2
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
 80020f0:	e007      	b.n	8002102 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_ADC_Init+0x288>)
 800210a:	4013      	ands	r3, r2
 800210c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800210e:	429a      	cmp	r2, r3
 8002110:	d10b      	bne.n	800212a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f023 0303 	bic.w	r3, r3, #3
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	64da      	str	r2, [r3, #76]	; 0x4c
 8002128:	e014      	b.n	8002154 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	f023 0312 	bic.w	r3, r3, #18
 8002132:	f043 0210 	orr.w	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800214c:	e002      	b.n	8002154 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002154:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002158:	4618      	mov	r0, r3
 800215a:	3738      	adds	r7, #56	; 0x38
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	40012700 	.word	0x40012700
 8002168:	fcfc16ff 	.word	0xfcfc16ff
 800216c:	c0fff189 	.word	0xc0fff189
 8002170:	bf80fffe 	.word	0xbf80fffe

08002174 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_ADC_Start+0x1a>
 800218a:	2302      	movs	r3, #2
 800218c:	e04e      	b.n	800222c <HAL_ADC_Start+0xb8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fb66 	bl	8002868 <ADC_Enable>
 800219c:	4603      	mov	r3, r0
 800219e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d141      	bne.n	800222a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e4:	d106      	bne.n	80021f4 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ea:	f023 0206 	bic.w	r2, r3, #6
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	651a      	str	r2, [r3, #80]	; 0x50
 80021f2:	e002      	b.n	80021fa <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800220a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002228:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002250:	d113      	bne.n	800227a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800225c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002260:	d10b      	bne.n	800227a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	f043 0220 	orr.w	r2, r3, #32
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e068      	b.n	800234c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800227a:	f7ff fe2b 	bl	8001ed4 <HAL_GetTick>
 800227e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002280:	e021      	b.n	80022c6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d01d      	beq.n	80022c6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_ADC_PollForConversion+0x6c>
 8002290:	f7ff fe20 	bl	8001ed4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d212      	bcs.n	80022c6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10b      	bne.n	80022c6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	f043 0204 	orr.w	r2, r3, #4
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e042      	b.n	800234c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0d6      	beq.n	8002282 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d104      	bne.n	80022e6 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0212 	mvn.w	r2, #18
 80022e4:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d124      	bne.n	800234a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11f      	bne.n	800234a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002322:	2b00      	cmp	r3, #0
 8002324:	d111      	bne.n	800234a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d04c      	beq.n	8002428 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d047      	beq.n	8002428 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d12c      	bne.n	8002418 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d127      	bne.n	8002418 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d119      	bne.n	8002418 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0220 	bic.w	r2, r2, #32
 80023f2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f89e 	bl	800255a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f06f 0212 	mvn.w	r2, #18
 8002426:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	2b00      	cmp	r3, #0
 8002430:	d05a      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d055      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d13a      	bne.n	80024d8 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800246c:	2b00      	cmp	r3, #0
 800246e:	d006      	beq.n	800247e <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800247a:	2b00      	cmp	r3, #0
 800247c:	d12c      	bne.n	80024d8 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002488:	2b00      	cmp	r3, #0
 800248a:	d125      	bne.n	80024d8 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11e      	bne.n	80024d8 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d119      	bne.n	80024d8 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fa21 	bl	8002920 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f06f 020c 	mvn.w	r2, #12
 80024e6:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d012      	beq.n	8002518 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00d      	beq.n	8002518 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002500:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f82f 	bl	800256c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f06f 0201 	mvn.w	r2, #1
 8002516:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d017      	beq.n	8002552 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d012      	beq.n	8002552 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	f043 0202 	orr.w	r2, r3, #2
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0220 	mvn.w	r2, #32
 8002540:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f81b 	bl	800257e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0220 	mvn.w	r2, #32
 8002550:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x20>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e14f      	b.n	8002850 <HAL_ADC_ConfigChannel+0x2c0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b06      	cmp	r3, #6
 80025be:	d81c      	bhi.n	80025fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	3b05      	subs	r3, #5
 80025d2:	221f      	movs	r2, #31
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	4019      	ands	r1, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	3b05      	subs	r3, #5
 80025ec:	fa00 f203 	lsl.w	r2, r0, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
 80025f8:	e07e      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d81c      	bhi.n	800263c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3b23      	subs	r3, #35	; 0x23
 8002614:	221f      	movs	r2, #31
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	4019      	ands	r1, r3
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	3b23      	subs	r3, #35	; 0x23
 800262e:	fa00 f203 	lsl.w	r2, r0, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	63da      	str	r2, [r3, #60]	; 0x3c
 800263a:	e05d      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b12      	cmp	r3, #18
 8002642:	d81c      	bhi.n	800267e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	3b41      	subs	r3, #65	; 0x41
 8002656:	221f      	movs	r2, #31
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	4019      	ands	r1, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b41      	subs	r3, #65	; 0x41
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
 800267c:	e03c      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b18      	cmp	r3, #24
 8002684:	d81c      	bhi.n	80026c0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	3b5f      	subs	r3, #95	; 0x5f
 8002698:	221f      	movs	r2, #31
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	4019      	ands	r1, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	3b5f      	subs	r3, #95	; 0x5f
 80026b2:	fa00 f203 	lsl.w	r2, r0, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	635a      	str	r2, [r3, #52]	; 0x34
 80026be:	e01b      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	3b7d      	subs	r3, #125	; 0x7d
 80026d2:	221f      	movs	r2, #31
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	4019      	ands	r1, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	3b7d      	subs	r3, #125	; 0x7d
 80026ec:	fa00 f203 	lsl.w	r2, r0, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b09      	cmp	r3, #9
 80026fe:	d81a      	bhi.n	8002736 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6959      	ldr	r1, [r3, #20]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	2207      	movs	r2, #7
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	4019      	ands	r1, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6898      	ldr	r0, [r3, #8]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	fa00 f203 	lsl.w	r2, r0, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	615a      	str	r2, [r3, #20]
 8002734:	e05d      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b13      	cmp	r3, #19
 800273c:	d81c      	bhi.n	8002778 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6919      	ldr	r1, [r3, #16]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	3b1e      	subs	r3, #30
 8002750:	2207      	movs	r2, #7
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	4019      	ands	r1, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6898      	ldr	r0, [r3, #8]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	3b1e      	subs	r3, #30
 800276a:	fa00 f203 	lsl.w	r2, r0, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	e03c      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b1d      	cmp	r3, #29
 800277e:	d81c      	bhi.n	80027ba <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68d9      	ldr	r1, [r3, #12]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	3b3c      	subs	r3, #60	; 0x3c
 8002792:	2207      	movs	r2, #7
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	4019      	ands	r1, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6898      	ldr	r0, [r3, #8]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	3b3c      	subs	r3, #60	; 0x3c
 80027ac:	fa00 f203 	lsl.w	r2, r0, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	e01b      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	3b5a      	subs	r3, #90	; 0x5a
 80027cc:	2207      	movs	r2, #7
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	4019      	ands	r1, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6898      	ldr	r0, [r3, #8]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	3b5a      	subs	r3, #90	; 0x5a
 80027e6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d003      	beq.n	8002802 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027fe:	2b11      	cmp	r3, #17
 8002800:	d121      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <HAL_ADC_ConfigChannel+0x2cc>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d11b      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <HAL_ADC_ConfigChannel+0x2cc>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4a12      	ldr	r2, [pc, #72]	; (800285c <HAL_ADC_ConfigChannel+0x2cc>)
 8002814:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002818:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b10      	cmp	r3, #16
 8002820:	d111      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_ADC_ConfigChannel+0x2d0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <HAL_ADC_ConfigChannel+0x2d4>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	0c9a      	lsrs	r2, r3, #18
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002838:	e002      	b.n	8002840 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3b01      	subs	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40012700 	.word	0x40012700
 8002860:	20000004 	.word	0x20000004
 8002864:	431bde83 	.word	0x431bde83

08002868 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d043      	beq.n	800290e <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <ADC_Enable+0xb0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a20      	ldr	r2, [pc, #128]	; (800291c <ADC_Enable+0xb4>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	0c9a      	lsrs	r2, r3, #18
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80028aa:	e002      	b.n	80028b2 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f9      	bne.n	80028ac <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80028b8:	f7ff fb0c 	bl	8001ed4 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028be:	e01f      	b.n	8002900 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80028c0:	f7ff fb08 	bl	8001ed4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d918      	bls.n	8002900 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d011      	beq.n	8002900 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	f043 0210 	orr.w	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e007      	b.n	8002910 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	d1d8      	bne.n	80028c0 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000004 	.word	0x20000004
 800291c:	431bde83 	.word	0x431bde83

08002920 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
	...

08002934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002950:	4013      	ands	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800295c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <__NVIC_GetPriorityGrouping+0x18>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 0307 	and.w	r3, r3, #7
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	db0b      	blt.n	80029c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	4906      	ldr	r1, [pc, #24]	; (80029cc <__NVIC_EnableIRQ+0x34>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2001      	movs	r0, #1
 80029ba:	fa00 f202 	lsl.w	r2, r0, r2
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	e000e100 	.word	0xe000e100

080029d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	db0a      	blt.n	80029fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	490c      	ldr	r1, [pc, #48]	; (8002a1c <__NVIC_SetPriority+0x4c>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	0112      	lsls	r2, r2, #4
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	440b      	add	r3, r1
 80029f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f8:	e00a      	b.n	8002a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4908      	ldr	r1, [pc, #32]	; (8002a20 <__NVIC_SetPriority+0x50>)
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	3b04      	subs	r3, #4
 8002a08:	0112      	lsls	r2, r2, #4
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	761a      	strb	r2, [r3, #24]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f1c3 0307 	rsb	r3, r3, #7
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	bf28      	it	cs
 8002a42:	2304      	movcs	r3, #4
 8002a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d902      	bls.n	8002a54 <NVIC_EncodePriority+0x30>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3b03      	subs	r3, #3
 8002a52:	e000      	b.n	8002a56 <NVIC_EncodePriority+0x32>
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	401a      	ands	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	43d9      	mvns	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	4313      	orrs	r3, r2
         );
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3724      	adds	r7, #36	; 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00f      	b.n	8002abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <SysTick_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f7ff ff90 	bl	80029d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff2d 	bl	8002934 <__NVIC_SetPriorityGrouping>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af4:	f7ff ff42 	bl	800297c <__NVIC_GetPriorityGrouping>
 8002af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	6978      	ldr	r0, [r7, #20]
 8002b00:	f7ff ff90 	bl	8002a24 <NVIC_EncodePriority>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff5f 	bl	80029d0 <__NVIC_SetPriority>
}
 8002b12:	bf00      	nop
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff35 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ffa2 	bl	8002a88 <SysTick_Config>
 8002b44:	4603      	mov	r3, r0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b66:	e160      	b.n	8002e2a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	4013      	ands	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8152 	beq.w	8002e24 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d005      	beq.n	8002b98 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d130      	bne.n	8002bfa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002bce:	2201      	movs	r2, #1
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	f003 0201 	and.w	r2, r3, #1
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d017      	beq.n	8002c36 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	2203      	movs	r2, #3
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d123      	bne.n	8002c8a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	08da      	lsrs	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3208      	adds	r2, #8
 8002c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	220f      	movs	r2, #15
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	08da      	lsrs	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	6939      	ldr	r1, [r7, #16]
 8002c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	2203      	movs	r2, #3
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0203 	and.w	r2, r3, #3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80ac 	beq.w	8002e24 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ccc:	4b5e      	ldr	r3, [pc, #376]	; (8002e48 <HAL_GPIO_Init+0x2f8>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a5d      	ldr	r2, [pc, #372]	; (8002e48 <HAL_GPIO_Init+0x2f8>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	4b5b      	ldr	r3, [pc, #364]	; (8002e48 <HAL_GPIO_Init+0x2f8>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ce4:	4a59      	ldr	r2, [pc, #356]	; (8002e4c <HAL_GPIO_Init+0x2fc>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3302      	adds	r3, #2
 8002cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a51      	ldr	r2, [pc, #324]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d025      	beq.n	8002d5c <HAL_GPIO_Init+0x20c>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a50      	ldr	r2, [pc, #320]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d01f      	beq.n	8002d58 <HAL_GPIO_Init+0x208>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a4f      	ldr	r2, [pc, #316]	; (8002e58 <HAL_GPIO_Init+0x308>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d019      	beq.n	8002d54 <HAL_GPIO_Init+0x204>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a4e      	ldr	r2, [pc, #312]	; (8002e5c <HAL_GPIO_Init+0x30c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <HAL_GPIO_Init+0x200>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a4d      	ldr	r2, [pc, #308]	; (8002e60 <HAL_GPIO_Init+0x310>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00d      	beq.n	8002d4c <HAL_GPIO_Init+0x1fc>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a4c      	ldr	r2, [pc, #304]	; (8002e64 <HAL_GPIO_Init+0x314>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d007      	beq.n	8002d48 <HAL_GPIO_Init+0x1f8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a4b      	ldr	r2, [pc, #300]	; (8002e68 <HAL_GPIO_Init+0x318>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <HAL_GPIO_Init+0x1f4>
 8002d40:	2306      	movs	r3, #6
 8002d42:	e00c      	b.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d44:	2307      	movs	r3, #7
 8002d46:	e00a      	b.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d48:	2305      	movs	r3, #5
 8002d4a:	e008      	b.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	e006      	b.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d50:	2303      	movs	r3, #3
 8002d52:	e004      	b.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e002      	b.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	f002 0203 	and.w	r2, r2, #3
 8002d64:	0092      	lsls	r2, r2, #2
 8002d66:	4093      	lsls	r3, r2
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d6e:	4937      	ldr	r1, [pc, #220]	; (8002e4c <HAL_GPIO_Init+0x2fc>)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002da0:	4a32      	ldr	r2, [pc, #200]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dca:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd0:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002df4:	4a1d      	ldr	r2, [pc, #116]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e1e:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3301      	adds	r3, #1
 8002e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f47f ae97 	bne.w	8002b68 <HAL_GPIO_Init+0x18>
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40020000 	.word	0x40020000
 8002e54:	40020400 	.word	0x40020400
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020c00 	.word	0x40020c00
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40021400 	.word	0x40021400
 8002e68:	40021800 	.word	0x40021800
 8002e6c:	40010400 	.word	0x40010400

08002e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e001      	b.n	8002e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	807b      	strh	r3, [r7, #2]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eae:	787b      	ldrb	r3, [r7, #1]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eb4:	887a      	ldrh	r2, [r7, #2]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002eba:	e003      	b.n	8002ec4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	041a      	lsls	r2, r3, #16
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	619a      	str	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e31d      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee2:	4b94      	ldr	r3, [pc, #592]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eec:	4b91      	ldr	r3, [pc, #580]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d07b      	beq.n	8002ffa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d006      	beq.n	8002f16 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d10f      	bne.n	8002f2e <HAL_RCC_OscConfig+0x5e>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d10b      	bne.n	8002f2e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f16:	4b87      	ldr	r3, [pc, #540]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d06a      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x128>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d166      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e2f7      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x74>
 8002f36:	4b7f      	ldr	r3, [pc, #508]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7e      	ldr	r2, [pc, #504]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e02d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCC_OscConfig+0x96>
 8002f4c:	4b79      	ldr	r3, [pc, #484]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a78      	ldr	r2, [pc, #480]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b76      	ldr	r3, [pc, #472]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a75      	ldr	r2, [pc, #468]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e01c      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd0>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0xb8>
 8002f6e:	4b71      	ldr	r3, [pc, #452]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a70      	ldr	r2, [pc, #448]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b6e      	ldr	r3, [pc, #440]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6d      	ldr	r2, [pc, #436]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xd0>
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a69      	ldr	r2, [pc, #420]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b67      	ldr	r3, [pc, #412]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a66      	ldr	r2, [pc, #408]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe ff94 	bl	8001ed4 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe ff90 	bl	8001ed4 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e2ad      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fc2:	4b5c      	ldr	r3, [pc, #368]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xe0>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe ff80 	bl	8001ed4 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe ff7c 	bl	8001ed4 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e299      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fea:	4b52      	ldr	r3, [pc, #328]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x108>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d05a      	beq.n	80030bc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d005      	beq.n	8003018 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d119      	bne.n	8003046 <HAL_RCC_OscConfig+0x176>
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d116      	bne.n	8003046 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003018:	4b46      	ldr	r3, [pc, #280]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_OscConfig+0x160>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d001      	beq.n	8003030 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e276      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4b40      	ldr	r3, [pc, #256]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	493d      	ldr	r1, [pc, #244]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003044:	e03a      	b.n	80030bc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d020      	beq.n	8003090 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304e:	4b3a      	ldr	r3, [pc, #232]	; (8003138 <HAL_RCC_OscConfig+0x268>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe ff3e 	bl	8001ed4 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305c:	f7fe ff3a 	bl	8001ed4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e257      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800306e:	4b31      	ldr	r3, [pc, #196]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b2e      	ldr	r3, [pc, #184]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	492a      	ldr	r1, [pc, #168]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
 800308e:	e015      	b.n	80030bc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_RCC_OscConfig+0x268>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fe ff1d 	bl	8001ed4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800309e:	f7fe ff19 	bl	8001ed4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e236      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030b0:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f0      	bne.n	800309e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80b8 	beq.w	800323a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d170      	bne.n	80031b2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030d0:	4b18      	ldr	r3, [pc, #96]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_OscConfig+0x218>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e21a      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d921      	bls.n	800313c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fc4b 	bl	8003998 <RCC_SetFlashLatencyFromMSIRange>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e208      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4906      	ldr	r1, [pc, #24]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	4901      	ldr	r1, [pc, #4]	; (8003134 <HAL_RCC_OscConfig+0x264>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
 8003132:	e020      	b.n	8003176 <HAL_RCC_OscConfig+0x2a6>
 8003134:	40023800 	.word	0x40023800
 8003138:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800313c:	4b99      	ldr	r3, [pc, #612]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4996      	ldr	r1, [pc, #600]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314e:	4b95      	ldr	r3, [pc, #596]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	061b      	lsls	r3, r3, #24
 800315c:	4991      	ldr	r1, [pc, #580]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fc16 	bl	8003998 <RCC_SetFlashLatencyFromMSIRange>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1d3      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	0b5b      	lsrs	r3, r3, #13
 800317c:	3301      	adds	r3, #1
 800317e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003186:	4a87      	ldr	r2, [pc, #540]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003188:	6892      	ldr	r2, [r2, #8]
 800318a:	0912      	lsrs	r2, r2, #4
 800318c:	f002 020f 	and.w	r2, r2, #15
 8003190:	4985      	ldr	r1, [pc, #532]	; (80033a8 <HAL_RCC_OscConfig+0x4d8>)
 8003192:	5c8a      	ldrb	r2, [r1, r2]
 8003194:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003196:	4a85      	ldr	r2, [pc, #532]	; (80033ac <HAL_RCC_OscConfig+0x4dc>)
 8003198:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800319a:	4b85      	ldr	r3, [pc, #532]	; (80033b0 <HAL_RCC_OscConfig+0x4e0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fe4c 	bl	8001e3c <HAL_InitTick>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d045      	beq.n	800323a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	e1b5      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d029      	beq.n	800320e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031ba:	4b7e      	ldr	r3, [pc, #504]	; (80033b4 <HAL_RCC_OscConfig+0x4e4>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fe fe88 	bl	8001ed4 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c8:	f7fe fe84 	bl	8001ed4 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1a1      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031da:	4b72      	ldr	r3, [pc, #456]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e6:	4b6f      	ldr	r3, [pc, #444]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	496c      	ldr	r1, [pc, #432]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f8:	4b6a      	ldr	r3, [pc, #424]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	4967      	ldr	r1, [pc, #412]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
 800320c:	e015      	b.n	800323a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800320e:	4b69      	ldr	r3, [pc, #420]	; (80033b4 <HAL_RCC_OscConfig+0x4e4>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fe5e 	bl	8001ed4 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800321c:	f7fe fe5a 	bl	8001ed4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e177      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800322e:	4b5d      	ldr	r3, [pc, #372]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d030      	beq.n	80032a8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324e:	4b5a      	ldr	r3, [pc, #360]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003254:	f7fe fe3e 	bl	8001ed4 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800325c:	f7fe fe3a 	bl	8001ed4 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e157      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800326e:	4b4d      	ldr	r3, [pc, #308]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x38c>
 800327a:	e015      	b.n	80032a8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327c:	4b4e      	ldr	r3, [pc, #312]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fe fe27 	bl	8001ed4 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe fe23 	bl	8001ed4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e140      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800329c:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 800329e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80b5 	beq.w	8003420 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10d      	bne.n	80032e2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	4a36      	ldr	r2, [pc, #216]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6253      	str	r3, [r2, #36]	; 0x24
 80032d2:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	4b36      	ldr	r3, [pc, #216]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d118      	bne.n	8003320 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a32      	ldr	r2, [pc, #200]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7fe fdeb 	bl	8001ed4 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fe fde7 	bl	8001ed4 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b64      	cmp	r3, #100	; 0x64
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e104      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	4b29      	ldr	r3, [pc, #164]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x466>
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 800332a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332c:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 800332e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003332:	6353      	str	r3, [r2, #52]	; 0x34
 8003334:	e02d      	b.n	8003392 <HAL_RCC_OscConfig+0x4c2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x488>
 800333e:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003348:	6353      	str	r3, [r2, #52]	; 0x34
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003354:	6353      	str	r3, [r2, #52]	; 0x34
 8003356:	e01c      	b.n	8003392 <HAL_RCC_OscConfig+0x4c2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x4aa>
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003364:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336a:	6353      	str	r3, [r2, #52]	; 0x34
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 800336e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003370:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6353      	str	r3, [r2, #52]	; 0x34
 8003378:	e00b      	b.n	8003392 <HAL_RCC_OscConfig+0x4c2>
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003384:	6353      	str	r3, [r2, #52]	; 0x34
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x4d4>)
 800338c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003390:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d024      	beq.n	80033e4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7fe fd9b 	bl	8001ed4 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a0:	e019      	b.n	80033d6 <HAL_RCC_OscConfig+0x506>
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	080087e4 	.word	0x080087e4
 80033ac:	20000004 	.word	0x20000004
 80033b0:	20000008 	.word	0x20000008
 80033b4:	42470020 	.word	0x42470020
 80033b8:	42470680 	.word	0x42470680
 80033bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe fd88 	bl	8001ed4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0a3      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033d6:	4b54      	ldr	r3, [pc, #336]	; (8003528 <HAL_RCC_OscConfig+0x658>)
 80033d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ee      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4f0>
 80033e2:	e014      	b.n	800340e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e4:	f7fe fd76 	bl	8001ed4 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ec:	f7fe fd72 	bl	8001ed4 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e08d      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003402:	4b49      	ldr	r3, [pc, #292]	; (8003528 <HAL_RCC_OscConfig+0x658>)
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1ee      	bne.n	80033ec <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800340e:	7ffb      	ldrb	r3, [r7, #31]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b44      	ldr	r3, [pc, #272]	; (8003528 <HAL_RCC_OscConfig+0x658>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	4a43      	ldr	r2, [pc, #268]	; (8003528 <HAL_RCC_OscConfig+0x658>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	2b00      	cmp	r3, #0
 8003426:	d079      	beq.n	800351c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d056      	beq.n	80034dc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b02      	cmp	r3, #2
 8003434:	d13b      	bne.n	80034ae <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b3d      	ldr	r3, [pc, #244]	; (800352c <HAL_RCC_OscConfig+0x65c>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fe fd4a 	bl	8001ed4 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe fd46 	bl	8001ed4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e063      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003456:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_RCC_OscConfig+0x658>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003462:	4b31      	ldr	r3, [pc, #196]	; (8003528 <HAL_RCC_OscConfig+0x658>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	4319      	orrs	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	430b      	orrs	r3, r1
 800347a:	492b      	ldr	r1, [pc, #172]	; (8003528 <HAL_RCC_OscConfig+0x658>)
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <HAL_RCC_OscConfig+0x65c>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fe fd25 	bl	8001ed4 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe fd21 	bl	8001ed4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e03e      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034a0:	4b21      	ldr	r3, [pc, #132]	; (8003528 <HAL_RCC_OscConfig+0x658>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x5be>
 80034ac:	e036      	b.n	800351c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ae:	4b1f      	ldr	r3, [pc, #124]	; (800352c <HAL_RCC_OscConfig+0x65c>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fd0e 	bl	8001ed4 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fe fd0a 	bl	8001ed4 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e027      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ce:	4b16      	ldr	r3, [pc, #88]	; (8003528 <HAL_RCC_OscConfig+0x658>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x5ec>
 80034da:	e01f      	b.n	800351c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e01a      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_RCC_OscConfig+0x658>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d10d      	bne.n	8003518 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d106      	bne.n	8003518 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	42470060 	.word	0x42470060

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e11a      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b8f      	ldr	r3, [pc, #572]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d919      	bls.n	8003586 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCC_ClockConfig+0x34>
 8003558:	4b8a      	ldr	r3, [pc, #552]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a89      	ldr	r2, [pc, #548]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 800355e:	f043 0304 	orr.w	r3, r3, #4
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b87      	ldr	r3, [pc, #540]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 0201 	bic.w	r2, r3, #1
 800356c:	4985      	ldr	r1, [pc, #532]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003574:	4b83      	ldr	r3, [pc, #524]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e0f9      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003592:	4b7d      	ldr	r3, [pc, #500]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	497a      	ldr	r1, [pc, #488]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 808e 	beq.w	80036ce <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ba:	4b73      	ldr	r3, [pc, #460]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d121      	bne.n	800360a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0d7      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035d2:	4b6d      	ldr	r3, [pc, #436]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d115      	bne.n	800360a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0cb      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035ea:	4b67      	ldr	r3, [pc, #412]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0bf      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035fa:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e0b7      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360a:	4b5f      	ldr	r3, [pc, #380]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	495c      	ldr	r1, [pc, #368]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800361c:	f7fe fc5a 	bl	8001ed4 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d112      	bne.n	8003650 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362c:	f7fe fc52 	bl	8001ed4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e09b      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003642:	4b51      	ldr	r3, [pc, #324]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b08      	cmp	r3, #8
 800364c:	d1ee      	bne.n	800362c <HAL_RCC_ClockConfig+0xfc>
 800364e:	e03e      	b.n	80036ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d112      	bne.n	800367e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365a:	f7fe fc3b 	bl	8001ed4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e084      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003670:	4b45      	ldr	r3, [pc, #276]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 030c 	and.w	r3, r3, #12
 8003678:	2b0c      	cmp	r3, #12
 800367a:	d1ee      	bne.n	800365a <HAL_RCC_ClockConfig+0x12a>
 800367c:	e027      	b.n	80036ce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d11d      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003686:	e00a      	b.n	800369e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003688:	f7fe fc24 	bl	8001ed4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e06d      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d1ee      	bne.n	8003688 <HAL_RCC_ClockConfig+0x158>
 80036aa:	e010      	b.n	80036ce <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fe fc12 	bl	8001ed4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e05b      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ee      	bne.n	80036ac <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ce:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d219      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d105      	bne.n	80036ee <HAL_RCC_ClockConfig+0x1be>
 80036e2:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a27      	ldr	r2, [pc, #156]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 80036e8:	f043 0304 	orr.w	r3, r3, #4
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b25      	ldr	r3, [pc, #148]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 0201 	bic.w	r2, r3, #1
 80036f6:	4923      	ldr	r1, [pc, #140]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b21      	ldr	r3, [pc, #132]	; (8003784 <HAL_RCC_ClockConfig+0x254>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e034      	b.n	800377a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4917      	ldr	r1, [pc, #92]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373a:	4b13      	ldr	r3, [pc, #76]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	490f      	ldr	r1, [pc, #60]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800374e:	f000 f823 	bl	8003798 <HAL_RCC_GetSysClockFreq>
 8003752:	4602      	mov	r2, r0
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <HAL_RCC_ClockConfig+0x258>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	490b      	ldr	r1, [pc, #44]	; (800378c <HAL_RCC_ClockConfig+0x25c>)
 8003760:	5ccb      	ldrb	r3, [r1, r3]
 8003762:	fa22 f303 	lsr.w	r3, r2, r3
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <HAL_RCC_ClockConfig+0x260>)
 8003768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_RCC_ClockConfig+0x264>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fb64 	bl	8001e3c <HAL_InitTick>
 8003774:	4603      	mov	r3, r0
 8003776:	72fb      	strb	r3, [r7, #11]

  return status;
 8003778:	7afb      	ldrb	r3, [r7, #11]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023c00 	.word	0x40023c00
 8003788:	40023800 	.word	0x40023800
 800378c:	080087e4 	.word	0x080087e4
 8003790:	20000004 	.word	0x20000004
 8003794:	20000008 	.word	0x20000008

08003798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b092      	sub	sp, #72	; 0x48
 800379e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80037a0:	4b79      	ldr	r3, [pc, #484]	; (8003988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b0c      	cmp	r3, #12
 80037ae:	d00d      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x34>
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	f200 80d5 	bhi.w	8003960 <HAL_RCC_GetSysClockFreq+0x1c8>
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x28>
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x2e>
 80037be:	e0cf      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b72      	ldr	r3, [pc, #456]	; (800398c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80037c2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80037c4:	e0da      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037c6:	4b72      	ldr	r3, [pc, #456]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80037c8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80037ca:	e0d7      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80037cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ce:	0c9b      	lsrs	r3, r3, #18
 80037d0:	f003 020f 	and.w	r2, r3, #15
 80037d4:	4b6f      	ldr	r3, [pc, #444]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80037d6:	5c9b      	ldrb	r3, [r3, r2]
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80037da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037dc:	0d9b      	lsrs	r3, r3, #22
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	3301      	adds	r3, #1
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e6:	4b68      	ldr	r3, [pc, #416]	; (8003988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d05d      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	2200      	movs	r2, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	4611      	mov	r1, r2
 80037fa:	4604      	mov	r4, r0
 80037fc:	460d      	mov	r5, r1
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	f04f 0000 	mov.w	r0, #0
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003810:	0150      	lsls	r0, r2, #5
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4621      	mov	r1, r4
 8003818:	1a51      	subs	r1, r2, r1
 800381a:	6139      	str	r1, [r7, #16]
 800381c:	4629      	mov	r1, r5
 800381e:	eb63 0301 	sbc.w	r3, r3, r1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003830:	4659      	mov	r1, fp
 8003832:	018b      	lsls	r3, r1, #6
 8003834:	4651      	mov	r1, sl
 8003836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383a:	4651      	mov	r1, sl
 800383c:	018a      	lsls	r2, r1, #6
 800383e:	46d4      	mov	ip, sl
 8003840:	ebb2 080c 	subs.w	r8, r2, ip
 8003844:	4659      	mov	r1, fp
 8003846:	eb63 0901 	sbc.w	r9, r3, r1
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800385e:	4690      	mov	r8, r2
 8003860:	4699      	mov	r9, r3
 8003862:	4623      	mov	r3, r4
 8003864:	eb18 0303 	adds.w	r3, r8, r3
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	462b      	mov	r3, r5
 800386c:	eb49 0303 	adc.w	r3, r9, r3
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800387e:	4629      	mov	r1, r5
 8003880:	024b      	lsls	r3, r1, #9
 8003882:	4620      	mov	r0, r4
 8003884:	4629      	mov	r1, r5
 8003886:	4604      	mov	r4, r0
 8003888:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800388c:	4601      	mov	r1, r0
 800388e:	024a      	lsls	r2, r1, #9
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	2200      	movs	r2, #0
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
 800389a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800389c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038a0:	f7fd fa10 	bl	8000cc4 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	647b      	str	r3, [r7, #68]	; 0x44
 80038ac:	e055      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	2200      	movs	r2, #0
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	627a      	str	r2, [r7, #36]	; 0x24
 80038b6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038ba:	4642      	mov	r2, r8
 80038bc:	464b      	mov	r3, r9
 80038be:	f04f 0000 	mov.w	r0, #0
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	0159      	lsls	r1, r3, #5
 80038c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038cc:	0150      	lsls	r0, r2, #5
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	46c4      	mov	ip, r8
 80038d4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80038d8:	4640      	mov	r0, r8
 80038da:	4649      	mov	r1, r9
 80038dc:	468c      	mov	ip, r1
 80038de:	eb63 0b0c 	sbc.w	fp, r3, ip
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038ee:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038f6:	ebb2 040a 	subs.w	r4, r2, sl
 80038fa:	eb63 050b 	sbc.w	r5, r3, fp
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	00eb      	lsls	r3, r5, #3
 8003908:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390c:	00e2      	lsls	r2, r4, #3
 800390e:	4614      	mov	r4, r2
 8003910:	461d      	mov	r5, r3
 8003912:	4603      	mov	r3, r0
 8003914:	18e3      	adds	r3, r4, r3
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	460b      	mov	r3, r1
 800391a:	eb45 0303 	adc.w	r3, r5, r3
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392c:	4629      	mov	r1, r5
 800392e:	028b      	lsls	r3, r1, #10
 8003930:	4620      	mov	r0, r4
 8003932:	4629      	mov	r1, r5
 8003934:	4604      	mov	r4, r0
 8003936:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800393a:	4601      	mov	r1, r0
 800393c:	028a      	lsls	r2, r1, #10
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003944:	2200      	movs	r2, #0
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	61fa      	str	r2, [r7, #28]
 800394a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800394e:	f7fd f9b9 	bl	8000cc4 <__aeabi_uldivmod>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4613      	mov	r3, r2
 8003958:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800395a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800395c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800395e:	e00d      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	0b5b      	lsrs	r3, r3, #13
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396e:	3301      	adds	r3, #1
 8003970:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800397a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800397e:	4618      	mov	r0, r3
 8003980:	3748      	adds	r7, #72	; 0x48
 8003982:	46bd      	mov	sp, r7
 8003984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	00f42400 	.word	0x00f42400
 8003990:	007a1200 	.word	0x007a1200
 8003994:	080087d8 	.word	0x080087d8

08003998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039a4:	4b29      	ldr	r3, [pc, #164]	; (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d12c      	bne.n	8003a0a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039b0:	4b26      	ldr	r3, [pc, #152]	; (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e016      	b.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	4a1f      	ldr	r2, [pc, #124]	; (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d2:	6253      	str	r3, [r2, #36]	; 0x24
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80039e8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ea:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80039f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80039fc:	d105      	bne.n	8003a0a <RCC_SetFlashLatencyFromMSIRange+0x72>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a04:	d101      	bne.n	8003a0a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003a06:	2301      	movs	r3, #1
 8003a08:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d105      	bne.n	8003a1c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f023 0201 	bic.w	r2, r3, #1
 8003a24:	490b      	ldr	r1, [pc, #44]	; (8003a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d001      	beq.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40007000 	.word	0x40007000
 8003a54:	40023c00 	.word	0x40023c00

08003a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e031      	b.n	8003ace <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fee2 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4619      	mov	r1, r3
 8003a96:	4610      	mov	r0, r2
 8003a98:	f000 fbd8 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d001      	beq.n	8003af0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e032      	b.n	8003b56 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b00:	d00e      	beq.n	8003b20 <HAL_TIM_Base_Start+0x48>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <HAL_TIM_Base_Start+0x88>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_TIM_Base_Start+0x48>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <HAL_TIM_Base_Start+0x8c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIM_Base_Start+0x48>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <HAL_TIM_Base_Start+0x90>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d111      	bne.n	8003b44 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d010      	beq.n	8003b54 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b42:	e007      	b.n	8003b54 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40010800 	.word	0x40010800

08003b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e031      	b.n	8003be2 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f829 	bl	8003bea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f000 fb4e 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_TIM_PWM_Start+0x24>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e022      	b.n	8003c66 <HAL_TIM_PWM_Start+0x6a>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d109      	bne.n	8003c3a <HAL_TIM_PWM_Start+0x3e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	bf14      	ite	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	2300      	moveq	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	e015      	b.n	8003c66 <HAL_TIM_PWM_Start+0x6a>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d109      	bne.n	8003c54 <HAL_TIM_PWM_Start+0x58>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	bf14      	ite	ne
 8003c4c:	2301      	movne	r3, #1
 8003c4e:	2300      	moveq	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	e008      	b.n	8003c66 <HAL_TIM_PWM_Start+0x6a>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e051      	b.n	8003d12 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <HAL_TIM_PWM_Start+0x82>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003c7c:	e013      	b.n	8003ca6 <HAL_TIM_PWM_Start+0xaa>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d104      	bne.n	8003c8e <HAL_TIM_PWM_Start+0x92>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003c8c:	e00b      	b.n	8003ca6 <HAL_TIM_PWM_Start+0xaa>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d104      	bne.n	8003c9e <HAL_TIM_PWM_Start+0xa2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c9c:	e003      	b.n	8003ca6 <HAL_TIM_PWM_Start+0xaa>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2201      	movs	r2, #1
 8003cac:	6839      	ldr	r1, [r7, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fcc7 	bl	8004642 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbc:	d00e      	beq.n	8003cdc <HAL_TIM_PWM_Start+0xe0>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a16      	ldr	r2, [pc, #88]	; (8003d1c <HAL_TIM_PWM_Start+0x120>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_TIM_PWM_Start+0xe0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <HAL_TIM_PWM_Start+0x124>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_TIM_PWM_Start+0xe0>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a13      	ldr	r2, [pc, #76]	; (8003d24 <HAL_TIM_PWM_Start+0x128>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d111      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d010      	beq.n	8003d10 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfe:	e007      	b.n	8003d10 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40010800 	.word	0x40010800

08003d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0202 	mvn.w	r2, #2
 8003d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa53 	bl	8004216 <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa46 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fa55 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d122      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0204 	mvn.w	r2, #4
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fa29 	bl	8004216 <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa1c 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fa2b 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d122      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d11b      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0208 	mvn.w	r2, #8
 8003dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2204      	movs	r2, #4
 8003e02:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f9ff 	bl	8004216 <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f9f2 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fa01 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d122      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d11b      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0210 	mvn.w	r2, #16
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2208      	movs	r2, #8
 8003e56:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f9d5 	bl	8004216 <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f9c8 	bl	8004204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f9d7 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10e      	bne.n	8003eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0201 	mvn.w	r2, #1
 8003ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9a3 	bl	80041f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b40      	cmp	r3, #64	; 0x40
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f9b1 	bl	800423a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e0ae      	b.n	800405c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b0c      	cmp	r3, #12
 8003f0a:	f200 809f 	bhi.w	800404c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f0e:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f49 	.word	0x08003f49
 8003f18:	0800404d 	.word	0x0800404d
 8003f1c:	0800404d 	.word	0x0800404d
 8003f20:	0800404d 	.word	0x0800404d
 8003f24:	08003f89 	.word	0x08003f89
 8003f28:	0800404d 	.word	0x0800404d
 8003f2c:	0800404d 	.word	0x0800404d
 8003f30:	0800404d 	.word	0x0800404d
 8003f34:	08003fcb 	.word	0x08003fcb
 8003f38:	0800404d 	.word	0x0800404d
 8003f3c:	0800404d 	.word	0x0800404d
 8003f40:	0800404d 	.word	0x0800404d
 8003f44:	0800400b 	.word	0x0800400b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f9ec 	bl	800432c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0208 	orr.w	r2, r2, #8
 8003f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0204 	bic.w	r2, r2, #4
 8003f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6999      	ldr	r1, [r3, #24]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	619a      	str	r2, [r3, #24]
      break;
 8003f86:	e064      	b.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fa08 	bl	80043a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6999      	ldr	r1, [r3, #24]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	021a      	lsls	r2, r3, #8
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	619a      	str	r2, [r3, #24]
      break;
 8003fc8:	e043      	b.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fa25 	bl	8004420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0208 	orr.w	r2, r2, #8
 8003fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0204 	bic.w	r2, r2, #4
 8003ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69d9      	ldr	r1, [r3, #28]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	61da      	str	r2, [r3, #28]
      break;
 8004008:	e023      	b.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fa42 	bl	800449a <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69d9      	ldr	r1, [r3, #28]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	021a      	lsls	r2, r3, #8
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	61da      	str	r2, [r3, #28]
      break;
 800404a:	e002      	b.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	75fb      	strb	r3, [r7, #23]
      break;
 8004050:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800405a:	7dfb      	ldrb	r3, [r7, #23]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_TIM_ConfigClockSource+0x1c>
 800407c:	2302      	movs	r3, #2
 800407e:	e0b4      	b.n	80041ea <HAL_TIM_ConfigClockSource+0x186>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800409e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b8:	d03e      	beq.n	8004138 <HAL_TIM_ConfigClockSource+0xd4>
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040be:	f200 8087 	bhi.w	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c6:	f000 8086 	beq.w	80041d6 <HAL_TIM_ConfigClockSource+0x172>
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ce:	d87f      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d0:	2b70      	cmp	r3, #112	; 0x70
 80040d2:	d01a      	beq.n	800410a <HAL_TIM_ConfigClockSource+0xa6>
 80040d4:	2b70      	cmp	r3, #112	; 0x70
 80040d6:	d87b      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d8:	2b60      	cmp	r3, #96	; 0x60
 80040da:	d050      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x11a>
 80040dc:	2b60      	cmp	r3, #96	; 0x60
 80040de:	d877      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e0:	2b50      	cmp	r3, #80	; 0x50
 80040e2:	d03c      	beq.n	800415e <HAL_TIM_ConfigClockSource+0xfa>
 80040e4:	2b50      	cmp	r3, #80	; 0x50
 80040e6:	d873      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d058      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x13a>
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d86f      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b30      	cmp	r3, #48	; 0x30
 80040f2:	d064      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x15a>
 80040f4:	2b30      	cmp	r3, #48	; 0x30
 80040f6:	d86b      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d060      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x15a>
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d867      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d05c      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x15a>
 8004104:	2b10      	cmp	r3, #16
 8004106:	d05a      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x15a>
 8004108:	e062      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800411a:	f000 fa73 	bl	8004604 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800412c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	609a      	str	r2, [r3, #8]
      break;
 8004136:	e04f      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004148:	f000 fa5c 	bl	8004604 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800415a:	609a      	str	r2, [r3, #8]
      break;
 800415c:	e03c      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416a:	461a      	mov	r2, r3
 800416c:	f000 f9d3 	bl	8004516 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2150      	movs	r1, #80	; 0x50
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fa2a 	bl	80045d0 <TIM_ITRx_SetConfig>
      break;
 800417c:	e02c      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800418a:	461a      	mov	r2, r3
 800418c:	f000 f9f1 	bl	8004572 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2160      	movs	r1, #96	; 0x60
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fa1a 	bl	80045d0 <TIM_ITRx_SetConfig>
      break;
 800419c:	e01c      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041aa:	461a      	mov	r2, r3
 80041ac:	f000 f9b3 	bl	8004516 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2140      	movs	r1, #64	; 0x40
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fa0a 	bl	80045d0 <TIM_ITRx_SetConfig>
      break;
 80041bc:	e00c      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4619      	mov	r1, r3
 80041c8:	4610      	mov	r0, r2
 80041ca:	f000 fa01 	bl	80045d0 <TIM_ITRx_SetConfig>
      break;
 80041ce:	e003      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      break;
 80041d4:	e000      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004262:	d00f      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a2b      	ldr	r2, [pc, #172]	; (8004314 <TIM_Base_SetConfig+0xc8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00b      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a2a      	ldr	r2, [pc, #168]	; (8004318 <TIM_Base_SetConfig+0xcc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a29      	ldr	r2, [pc, #164]	; (800431c <TIM_Base_SetConfig+0xd0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a28      	ldr	r2, [pc, #160]	; (8004320 <TIM_Base_SetConfig+0xd4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d108      	bne.n	8004296 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429c:	d017      	beq.n	80042ce <TIM_Base_SetConfig+0x82>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <TIM_Base_SetConfig+0xc8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <TIM_Base_SetConfig+0x82>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <TIM_Base_SetConfig+0xcc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00f      	beq.n	80042ce <TIM_Base_SetConfig+0x82>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a1a      	ldr	r2, [pc, #104]	; (800431c <TIM_Base_SetConfig+0xd0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00b      	beq.n	80042ce <TIM_Base_SetConfig+0x82>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a19      	ldr	r2, [pc, #100]	; (8004320 <TIM_Base_SetConfig+0xd4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <TIM_Base_SetConfig+0x82>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a18      	ldr	r2, [pc, #96]	; (8004324 <TIM_Base_SetConfig+0xd8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d003      	beq.n	80042ce <TIM_Base_SetConfig+0x82>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a17      	ldr	r2, [pc, #92]	; (8004328 <TIM_Base_SetConfig+0xdc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40010800 	.word	0x40010800
 8004324:	40010c00 	.word	0x40010c00
 8004328:	40011000 	.word	0x40011000

0800432c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f023 0201 	bic.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 0302 	bic.w	r3, r3, #2
 8004374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f023 0210 	bic.w	r2, r3, #16
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f023 0320 	bic.w	r3, r3, #32
 80043ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	621a      	str	r2, [r3, #32]
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0303 	bic.w	r3, r3, #3
 8004456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	031b      	lsls	r3, r3, #12
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	621a      	str	r2, [r3, #32]
}
 800450c:	bf00      	nop
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004516:	b480      	push	{r7}
 8004518:	b087      	sub	sp, #28
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f023 0201 	bic.w	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004540:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 030a 	bic.w	r3, r3, #10
 8004552:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	621a      	str	r2, [r3, #32]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr

08004572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004572:	b480      	push	{r7}
 8004574:	b087      	sub	sp, #28
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f023 0210 	bic.w	r2, r3, #16
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800459c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	031b      	lsls	r3, r3, #12
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f043 0307 	orr.w	r3, r3, #7
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	609a      	str	r2, [r3, #8]
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800461e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	021a      	lsls	r2, r3, #8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	431a      	orrs	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4313      	orrs	r3, r2
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	609a      	str	r2, [r3, #8]
}
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr

08004642 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004642:	b480      	push	{r7}
 8004644:	b087      	sub	sp, #28
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2201      	movs	r2, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a1a      	ldr	r2, [r3, #32]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	43db      	mvns	r3, r3
 8004664:	401a      	ands	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	fa01 f303 	lsl.w	r3, r1, r3
 800467a:	431a      	orrs	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	621a      	str	r2, [r3, #32]
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
	...

0800468c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e046      	b.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d00e      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a13      	ldr	r2, [pc, #76]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a12      	ldr	r2, [pc, #72]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a10      	ldr	r2, [pc, #64]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10c      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40010800 	.word	0x40010800

08004748 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800474e:	f3ef 8305 	mrs	r3, IPSR
 8004752:	60bb      	str	r3, [r7, #8]
  return(result);
 8004754:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475a:	f3ef 8310 	mrs	r3, PRIMASK
 800475e:	607b      	str	r3, [r7, #4]
  return(result);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <osKernelInitialize+0x32>
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <osKernelInitialize+0x60>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d109      	bne.n	8004782 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800476e:	f3ef 8311 	mrs	r3, BASEPRI
 8004772:	603b      	str	r3, [r7, #0]
  return(result);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800477a:	f06f 0305 	mvn.w	r3, #5
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	e00c      	b.n	800479c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <osKernelInitialize+0x60>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800478a:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <osKernelInitialize+0x60>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e002      	b.n	800479c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004796:	f04f 33ff 	mov.w	r3, #4294967295
 800479a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800479c:	68fb      	ldr	r3, [r7, #12]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	200001ac 	.word	0x200001ac

080047ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b2:	f3ef 8305 	mrs	r3, IPSR
 80047b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80047b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10f      	bne.n	80047de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047be:	f3ef 8310 	mrs	r3, PRIMASK
 80047c2:	607b      	str	r3, [r7, #4]
  return(result);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <osKernelStart+0x32>
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <osKernelStart+0x64>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d109      	bne.n	80047e6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047d2:	f3ef 8311 	mrs	r3, BASEPRI
 80047d6:	603b      	str	r3, [r7, #0]
  return(result);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80047de:	f06f 0305 	mvn.w	r3, #5
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e00e      	b.n	8004804 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80047e6:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <osKernelStart+0x64>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d107      	bne.n	80047fe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <osKernelStart+0x64>)
 80047f0:	2202      	movs	r2, #2
 80047f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80047f4:	f001 fa24 	bl	8005c40 <vTaskStartScheduler>
      stat = osOK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	e002      	b.n	8004804 <osKernelStart+0x58>
    } else {
      stat = osError;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004804:	68fb      	ldr	r3, [r7, #12]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	200001ac 	.word	0x200001ac

08004814 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b092      	sub	sp, #72	; 0x48
 8004818:	af04      	add	r7, sp, #16
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004824:	f3ef 8305 	mrs	r3, IPSR
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 8094 	bne.w	800495a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	623b      	str	r3, [r7, #32]
  return(result);
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f040 808d 	bne.w	800495a <osThreadNew+0x146>
 8004840:	4b48      	ldr	r3, [pc, #288]	; (8004964 <osThreadNew+0x150>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d106      	bne.n	8004856 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004848:	f3ef 8311 	mrs	r3, BASEPRI
 800484c:	61fb      	str	r3, [r7, #28]
  return(result);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 8082 	bne.w	800495a <osThreadNew+0x146>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d07e      	beq.n	800495a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004860:	2318      	movs	r3, #24
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004864:	2300      	movs	r3, #0
 8004866:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004868:	f107 031b 	add.w	r3, r7, #27
 800486c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800486e:	f04f 33ff 	mov.w	r3, #4294967295
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d045      	beq.n	8004906 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <osThreadNew+0x74>
        name = attr->name;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <osThreadNew+0x9a>
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	2b38      	cmp	r3, #56	; 0x38
 80048a0:	d805      	bhi.n	80048ae <osThreadNew+0x9a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <osThreadNew+0x9e>
        return (NULL);
 80048ae:	2300      	movs	r3, #0
 80048b0:	e054      	b.n	800495c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00e      	beq.n	80048e8 <osThreadNew+0xd4>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2ba7      	cmp	r3, #167	; 0xa7
 80048d0:	d90a      	bls.n	80048e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d006      	beq.n	80048e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <osThreadNew+0xd4>
        mem = 1;
 80048e2:	2301      	movs	r3, #1
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e6:	e010      	b.n	800490a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10c      	bne.n	800490a <osThreadNew+0xf6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d108      	bne.n	800490a <osThreadNew+0xf6>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <osThreadNew+0xf6>
          mem = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28
 8004904:	e001      	b.n	800490a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	2b01      	cmp	r3, #1
 800490e:	d110      	bne.n	8004932 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004918:	9202      	str	r2, [sp, #8]
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004924:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 ffa6 	bl	8005878 <xTaskCreateStatic>
 800492c:	4603      	mov	r3, r0
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e013      	b.n	800495a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	2b00      	cmp	r3, #0
 8004936:	d110      	bne.n	800495a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	b29a      	uxth	r2, r3
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fff0 	bl	8005930 <xTaskCreate>
 8004950:	4603      	mov	r3, r0
 8004952:	2b01      	cmp	r3, #1
 8004954:	d001      	beq.n	800495a <osThreadNew+0x146>
          hTask = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800495a:	697b      	ldr	r3, [r7, #20]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3738      	adds	r7, #56	; 0x38
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	200001ac 	.word	0x200001ac

08004968 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004970:	f3ef 8305 	mrs	r3, IPSR
 8004974:	613b      	str	r3, [r7, #16]
  return(result);
 8004976:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10f      	bne.n	800499c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497c:	f3ef 8310 	mrs	r3, PRIMASK
 8004980:	60fb      	str	r3, [r7, #12]
  return(result);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d109      	bne.n	800499c <osDelay+0x34>
 8004988:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <osDelay+0x58>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d109      	bne.n	80049a4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004990:	f3ef 8311 	mrs	r3, BASEPRI
 8004994:	60bb      	str	r3, [r7, #8]
  return(result);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <osDelay+0x3c>
    stat = osErrorISR;
 800499c:	f06f 0305 	mvn.w	r3, #5
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e007      	b.n	80049b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 f912 	bl	8005bd8 <vTaskDelay>
    }
  }

  return (stat);
 80049b4:	697b      	ldr	r3, [r7, #20]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200001ac 	.word	0x200001ac

080049c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a06      	ldr	r2, [pc, #24]	; (80049ec <vApplicationGetIdleTaskMemory+0x28>)
 80049d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4a05      	ldr	r2, [pc, #20]	; (80049f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80049da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	601a      	str	r2, [r3, #0]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	200001b0 	.word	0x200001b0
 80049f0:	20000258 	.word	0x20000258

080049f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a07      	ldr	r2, [pc, #28]	; (8004a20 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4a06      	ldr	r2, [pc, #24]	; (8004a24 <vApplicationGetTimerTaskMemory+0x30>)
 8004a0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a12:	601a      	str	r2, [r3, #0]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000458 	.word	0x20000458
 8004a24:	20000500 	.word	0x20000500

08004a28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f103 0208 	add.w	r2, r3, #8
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f103 0208 	add.w	r2, r3, #8
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f103 0208 	add.w	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d103      	bne.n	8004ae4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	e00c      	b.n	8004afe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e002      	b.n	8004af2 <vListInsert+0x2e>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d2f6      	bcs.n	8004aec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6892      	ldr	r2, [r2, #8]
 8004b4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6852      	ldr	r2, [r2, #4]
 8004b54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d103      	bne.n	8004b68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	1e5a      	subs	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr
	...

08004b88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bb2:	f002 fa93 	bl	80070dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	68f9      	ldr	r1, [r7, #12]
 8004bc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	441a      	add	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	3b01      	subs	r3, #1
 8004be4:	68f9      	ldr	r1, [r7, #12]
 8004be6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	441a      	add	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	22ff      	movs	r2, #255	; 0xff
 8004bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d114      	bne.n	8004c32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01a      	beq.n	8004c46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3310      	adds	r3, #16
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 faaf 	bl	8006178 <xTaskRemoveFromEventList>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <xQueueGenericReset+0xcc>)
 8004c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	e009      	b.n	8004c46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3310      	adds	r3, #16
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fef6 	bl	8004a28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3324      	adds	r3, #36	; 0x24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fef1 	bl	8004a28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c46:	f002 fa79 	bl	800713c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c4a:	2301      	movs	r3, #1
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08e      	sub	sp, #56	; 0x38
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c7e:	bf00      	nop
 8004c80:	e7fe      	b.n	8004c80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <xQueueGenericCreateStatic+0x52>
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <xQueueGenericCreateStatic+0x56>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <xQueueGenericCreateStatic+0x58>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	623b      	str	r3, [r7, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	e7fe      	b.n	8004cc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <xQueueGenericCreateStatic+0x7e>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <xQueueGenericCreateStatic+0x82>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <xQueueGenericCreateStatic+0x84>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	61fb      	str	r3, [r7, #28]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cf6:	2350      	movs	r3, #80	; 0x50
 8004cf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b50      	cmp	r3, #80	; 0x50
 8004cfe:	d00a      	beq.n	8004d16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	61bb      	str	r3, [r7, #24]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00d      	beq.n	8004d3c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d28:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f843 	bl	8004dc2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3730      	adds	r7, #48	; 0x30
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b08a      	sub	sp, #40	; 0x28
 8004d4a:	af02      	add	r7, sp, #8
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	4613      	mov	r3, r2
 8004d52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	613b      	str	r3, [r7, #16]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	e004      	b.n	8004d86 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	fb02 f303 	mul.w	r3, r2, r3
 8004d84:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3350      	adds	r3, #80	; 0x50
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f002 faa6 	bl	80072dc <pvPortMalloc>
 8004d90:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00f      	beq.n	8004db8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	3350      	adds	r3, #80	; 0x50
 8004d9c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004da6:	79fa      	ldrb	r2, [r7, #7]
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f805 	bl	8004dc2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004db8:	69bb      	ldr	r3, [r7, #24]
	}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e002      	b.n	8004de4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004df0:	2101      	movs	r1, #1
 8004df2:	69b8      	ldr	r0, [r7, #24]
 8004df4:	f7ff fec8 	bl	8004b88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00e      	beq.n	8004e34 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f81c 	bl	8004e6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e46:	2301      	movs	r3, #1
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	461a      	mov	r2, r3
 8004e52:	6939      	ldr	r1, [r7, #16]
 8004e54:	6978      	ldr	r0, [r7, #20]
 8004e56:	f7ff ff76 	bl	8004d46 <xQueueGenericCreate>
 8004e5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff ffd3 	bl	8004e08 <prvInitialiseMutex>

		return pxNewQueue;
 8004e62:	68fb      	ldr	r3, [r7, #12]
	}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08e      	sub	sp, #56	; 0x38
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <xQueueGenericSend+0x32>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <xQueueGenericSend+0x40>
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <xQueueGenericSend+0x44>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <xQueueGenericSend+0x46>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <xQueueGenericSend+0x60>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d103      	bne.n	8004eda <xQueueGenericSend+0x6e>
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <xQueueGenericSend+0x72>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <xQueueGenericSend+0x74>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <xQueueGenericSend+0x8e>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	623b      	str	r3, [r7, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004efa:	f001 fb03 	bl	8006504 <xTaskGetSchedulerState>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d102      	bne.n	8004f0a <xQueueGenericSend+0x9e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <xQueueGenericSend+0xa2>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <xQueueGenericSend+0xa4>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <xQueueGenericSend+0xbe>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	61fb      	str	r3, [r7, #28]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f2a:	f002 f8d7 	bl	80070dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <xQueueGenericSend+0xd4>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d129      	bne.n	8004f94 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f46:	f000 fb2a 	bl	800559e <prvCopyDataToQueue>
 8004f4a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d010      	beq.n	8004f76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	3324      	adds	r3, #36	; 0x24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 f90d 	bl	8006178 <xTaskRemoveFromEventList>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d013      	beq.n	8004f8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f64:	4b3f      	ldr	r3, [pc, #252]	; (8005064 <xQueueGenericSend+0x1f8>)
 8004f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	e00a      	b.n	8004f8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f7c:	4b39      	ldr	r3, [pc, #228]	; (8005064 <xQueueGenericSend+0x1f8>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f8c:	f002 f8d6 	bl	800713c <vPortExitCritical>
				return pdPASS;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e063      	b.n	800505c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d103      	bne.n	8004fa2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f9a:	f002 f8cf 	bl	800713c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e05c      	b.n	800505c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 f947 	bl	8006240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fb6:	f002 f8c1 	bl	800713c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fba:	f000 feb1 	bl	8005d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fbe:	f002 f88d 	bl	80070dc <vPortEnterCritical>
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc8:	b25b      	sxtb	r3, r3
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d103      	bne.n	8004fd8 <xQueueGenericSend+0x16c>
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fde:	b25b      	sxtb	r3, r3
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d103      	bne.n	8004fee <xQueueGenericSend+0x182>
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fee:	f002 f8a5 	bl	800713c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ff2:	1d3a      	adds	r2, r7, #4
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 f936 	bl	800626c <xTaskCheckForTimeOut>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d124      	bne.n	8005050 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005008:	f000 fbc1 	bl	800578e <prvIsQueueFull>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d018      	beq.n	8005044 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	3310      	adds	r3, #16
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f001 f85c 	bl	80060d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005022:	f000 fb4c 	bl	80056be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005026:	f000 fe89 	bl	8005d3c <xTaskResumeAll>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	f47f af7c 	bne.w	8004f2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005032:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <xQueueGenericSend+0x1f8>)
 8005034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	e772      	b.n	8004f2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005046:	f000 fb3a 	bl	80056be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800504a:	f000 fe77 	bl	8005d3c <xTaskResumeAll>
 800504e:	e76c      	b.n	8004f2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005052:	f000 fb34 	bl	80056be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005056:	f000 fe71 	bl	8005d3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800505a:	2300      	movs	r3, #0
		}
	}
}
 800505c:	4618      	mov	r0, r3
 800505e:	3738      	adds	r7, #56	; 0x38
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08e      	sub	sp, #56	; 0x38
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d103      	bne.n	80050a4 <xQueueGenericSendFromISR+0x3c>
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <xQueueGenericSendFromISR+0x40>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <xQueueGenericSendFromISR+0x42>
 80050a8:	2300      	movs	r3, #0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	623b      	str	r3, [r7, #32]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d103      	bne.n	80050d2 <xQueueGenericSendFromISR+0x6a>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <xQueueGenericSendFromISR+0x6e>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <xQueueGenericSendFromISR+0x70>
 80050d6:	2300      	movs	r3, #0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	61fb      	str	r3, [r7, #28]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050f2:	f002 f8b5 	bl	8007260 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050f6:	f3ef 8211 	mrs	r2, BASEPRI
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	61ba      	str	r2, [r7, #24]
 800510c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800510e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <xQueueGenericSendFromISR+0xbc>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d12c      	bne.n	800517e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005134:	f000 fa33 	bl	800559e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005138:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d112      	bne.n	8005168 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	3324      	adds	r3, #36	; 0x24
 800514e:	4618      	mov	r0, r3
 8005150:	f001 f812 	bl	8006178 <xTaskRemoveFromEventList>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00e      	beq.n	8005178 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	e007      	b.n	8005178 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800516c:	3301      	adds	r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	b25a      	sxtb	r2, r3
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005178:	2301      	movs	r3, #1
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800517c:	e001      	b.n	8005182 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800517e:	2300      	movs	r3, #0
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800518c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005190:	4618      	mov	r0, r3
 8005192:	3738      	adds	r7, #56	; 0x38
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08c      	sub	sp, #48	; 0x30
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <xQueueReceive+0x30>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	623b      	str	r3, [r7, #32]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <xQueueReceive+0x3e>
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <xQueueReceive+0x42>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <xQueueReceive+0x44>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueReceive+0x5e>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	61fb      	str	r3, [r7, #28]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051f6:	f001 f985 	bl	8006504 <xTaskGetSchedulerState>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <xQueueReceive+0x6e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <xQueueReceive+0x72>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <xQueueReceive+0x74>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xQueueReceive+0x8e>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	61bb      	str	r3, [r7, #24]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005226:	f001 ff59 	bl	80070dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01f      	beq.n	8005276 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800523a:	f000 fa1a 	bl	8005672 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	1e5a      	subs	r2, r3, #1
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00f      	beq.n	800526e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	3310      	adds	r3, #16
 8005252:	4618      	mov	r0, r3
 8005254:	f000 ff90 	bl	8006178 <xTaskRemoveFromEventList>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <xQueueReceive+0x1bc>)
 8005260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800526e:	f001 ff65 	bl	800713c <vPortExitCritical>
				return pdPASS;
 8005272:	2301      	movs	r3, #1
 8005274:	e069      	b.n	800534a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d103      	bne.n	8005284 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800527c:	f001 ff5e 	bl	800713c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005280:	2300      	movs	r3, #0
 8005282:	e062      	b.n	800534a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	4618      	mov	r0, r3
 8005290:	f000 ffd6 	bl	8006240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005294:	2301      	movs	r3, #1
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005298:	f001 ff50 	bl	800713c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800529c:	f000 fd40 	bl	8005d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052a0:	f001 ff1c 	bl	80070dc <vPortEnterCritical>
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d103      	bne.n	80052ba <xQueueReceive+0x122>
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c0:	b25b      	sxtb	r3, r3
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d103      	bne.n	80052d0 <xQueueReceive+0x138>
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d0:	f001 ff34 	bl	800713c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052d4:	1d3a      	adds	r2, r7, #4
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 ffc5 	bl	800626c <xTaskCheckForTimeOut>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d123      	bne.n	8005330 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ea:	f000 fa3a 	bl	8005762 <prvIsQueueEmpty>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	3324      	adds	r3, #36	; 0x24
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 feeb 	bl	80060d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005304:	f000 f9db 	bl	80056be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005308:	f000 fd18 	bl	8005d3c <xTaskResumeAll>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d189      	bne.n	8005226 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <xQueueReceive+0x1bc>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	e780      	b.n	8005226 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005326:	f000 f9ca 	bl	80056be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800532a:	f000 fd07 	bl	8005d3c <xTaskResumeAll>
 800532e:	e77a      	b.n	8005226 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005332:	f000 f9c4 	bl	80056be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005336:	f000 fd01 	bl	8005d3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800533a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800533c:	f000 fa11 	bl	8005762 <prvIsQueueEmpty>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	f43f af6f 	beq.w	8005226 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800534a:	4618      	mov	r0, r3
 800534c:	3730      	adds	r7, #48	; 0x30
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08e      	sub	sp, #56	; 0x38
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	623b      	str	r3, [r7, #32]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	61fb      	str	r3, [r7, #28]
}
 80053a4:	bf00      	nop
 80053a6:	e7fe      	b.n	80053a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053a8:	f001 f8ac 	bl	8006504 <xTaskGetSchedulerState>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <xQueueSemaphoreTake+0x60>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <xQueueSemaphoreTake+0x64>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <xQueueSemaphoreTake+0x66>
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	61bb      	str	r3, [r7, #24]
}
 80053d4:	bf00      	nop
 80053d6:	e7fe      	b.n	80053d6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80053d8:	f001 fe80 	bl	80070dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d024      	beq.n	8005432 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	1e5a      	subs	r2, r3, #1
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80053f8:	f001 fa04 	bl	8006804 <pvTaskIncrementMutexHeldCount>
 80053fc:	4602      	mov	r2, r0
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00f      	beq.n	800542a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	3310      	adds	r3, #16
 800540e:	4618      	mov	r0, r3
 8005410:	f000 feb2 	bl	8006178 <xTaskRemoveFromEventList>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800541a:	4b54      	ldr	r3, [pc, #336]	; (800556c <xQueueSemaphoreTake+0x214>)
 800541c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800542a:	f001 fe87 	bl	800713c <vPortExitCritical>
				return pdPASS;
 800542e:	2301      	movs	r3, #1
 8005430:	e097      	b.n	8005562 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d111      	bne.n	800545c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	617b      	str	r3, [r7, #20]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005454:	f001 fe72 	bl	800713c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005458:	2300      	movs	r3, #0
 800545a:	e082      	b.n	8005562 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800545c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	4618      	mov	r0, r3
 8005468:	f000 feea 	bl	8006240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800546c:	2301      	movs	r3, #1
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005470:	f001 fe64 	bl	800713c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005474:	f000 fc54 	bl	8005d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005478:	f001 fe30 	bl	80070dc <vPortEnterCritical>
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005482:	b25b      	sxtb	r3, r3
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d103      	bne.n	8005492 <xQueueSemaphoreTake+0x13a>
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005498:	b25b      	sxtb	r3, r3
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d103      	bne.n	80054a8 <xQueueSemaphoreTake+0x150>
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a8:	f001 fe48 	bl	800713c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ac:	463a      	mov	r2, r7
 80054ae:	f107 030c 	add.w	r3, r7, #12
 80054b2:	4611      	mov	r1, r2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fed9 	bl	800626c <xTaskCheckForTimeOut>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d132      	bne.n	8005526 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054c2:	f000 f94e 	bl	8005762 <prvIsQueueEmpty>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d026      	beq.n	800551a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80054d4:	f001 fe02 	bl	80070dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 f82f 	bl	8006540 <xTaskPriorityInherit>
 80054e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80054e4:	f001 fe2a 	bl	800713c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	3324      	adds	r3, #36	; 0x24
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fdf1 	bl	80060d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054f8:	f000 f8e1 	bl	80056be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054fc:	f000 fc1e 	bl	8005d3c <xTaskResumeAll>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	f47f af68 	bne.w	80053d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005508:	4b18      	ldr	r3, [pc, #96]	; (800556c <xQueueSemaphoreTake+0x214>)
 800550a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	e75e      	b.n	80053d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800551a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800551c:	f000 f8cf 	bl	80056be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005520:	f000 fc0c 	bl	8005d3c <xTaskResumeAll>
 8005524:	e758      	b.n	80053d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005528:	f000 f8c9 	bl	80056be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800552c:	f000 fc06 	bl	8005d3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005532:	f000 f916 	bl	8005762 <prvIsQueueEmpty>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	f43f af4d 	beq.w	80053d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00d      	beq.n	8005560 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005544:	f001 fdca 	bl	80070dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800554a:	f000 f811 	bl	8005570 <prvGetDisinheritPriorityAfterTimeout>
 800554e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005556:	4618      	mov	r0, r3
 8005558:	f001 f8ce 	bl	80066f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800555c:	f001 fdee 	bl	800713c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005560:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005562:	4618      	mov	r0, r3
 8005564:	3738      	adds	r7, #56	; 0x38
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e001      	b.n	8005592 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005592:	68fb      	ldr	r3, [r7, #12]
	}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b086      	sub	sp, #24
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10d      	bne.n	80055d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d14d      	bne.n	8005660 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f001 f827 	bl	800661c <xTaskPriorityDisinherit>
 80055ce:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	e043      	b.n	8005660 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d119      	bne.n	8005612 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6898      	ldr	r0, [r3, #8]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	461a      	mov	r2, r3
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	f002 fb30 	bl	8007c4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	441a      	add	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d32b      	bcc.n	8005660 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	e026      	b.n	8005660 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	68d8      	ldr	r0, [r3, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	461a      	mov	r2, r3
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	f002 fb16 	bl	8007c4e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	425b      	negs	r3, r3
 800562c:	441a      	add	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d207      	bcs.n	800564e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	425b      	negs	r3, r3
 8005648:	441a      	add	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d105      	bne.n	8005660 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	3b01      	subs	r3, #1
 800565e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005668:	697b      	ldr	r3, [r7, #20]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	2b00      	cmp	r3, #0
 8005682:	d018      	beq.n	80056b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	441a      	add	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d303      	bcc.n	80056a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68d9      	ldr	r1, [r3, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	461a      	mov	r2, r3
 80056b0:	6838      	ldr	r0, [r7, #0]
 80056b2:	f002 facc 	bl	8007c4e <memcpy>
	}
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056c6:	f001 fd09 	bl	80070dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056d2:	e011      	b.n	80056f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d012      	beq.n	8005702 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fd49 	bl	8006178 <xTaskRemoveFromEventList>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056ec:	f000 fe20 	bl	8006330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	dce9      	bgt.n	80056d4 <prvUnlockQueue+0x16>
 8005700:	e000      	b.n	8005704 <prvUnlockQueue+0x46>
					break;
 8005702:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	22ff      	movs	r2, #255	; 0xff
 8005708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800570c:	f001 fd16 	bl	800713c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005710:	f001 fce4 	bl	80070dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800571a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800571c:	e011      	b.n	8005742 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d012      	beq.n	800574c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3310      	adds	r3, #16
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fd24 	bl	8006178 <xTaskRemoveFromEventList>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005736:	f000 fdfb 	bl	8006330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800573a:	7bbb      	ldrb	r3, [r7, #14]
 800573c:	3b01      	subs	r3, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005746:	2b00      	cmp	r3, #0
 8005748:	dce9      	bgt.n	800571e <prvUnlockQueue+0x60>
 800574a:	e000      	b.n	800574e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800574c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	22ff      	movs	r2, #255	; 0xff
 8005752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005756:	f001 fcf1 	bl	800713c <vPortExitCritical>
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800576a:	f001 fcb7 	bl	80070dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005776:	2301      	movs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	e001      	b.n	8005780 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005780:	f001 fcdc 	bl	800713c <vPortExitCritical>

	return xReturn;
 8005784:	68fb      	ldr	r3, [r7, #12]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005796:	f001 fca1 	bl	80070dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d102      	bne.n	80057ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e001      	b.n	80057b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057b0:	f001 fcc4 	bl	800713c <vPortExitCritical>

	return xReturn;
 80057b4:	68fb      	ldr	r3, [r7, #12]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	e014      	b.n	80057fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057d0:	4a0e      	ldr	r2, [pc, #56]	; (800580c <vQueueAddToRegistry+0x4c>)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057dc:	490b      	ldr	r1, [pc, #44]	; (800580c <vQueueAddToRegistry+0x4c>)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <vQueueAddToRegistry+0x4c>)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057f2:	e006      	b.n	8005802 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b07      	cmp	r3, #7
 80057fe:	d9e7      	bls.n	80057d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr
 800580c:	20000900 	.word	0x20000900

08005810 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005820:	f001 fc5c 	bl	80070dc <vPortEnterCritical>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800582a:	b25b      	sxtb	r3, r3
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005830:	d103      	bne.n	800583a <vQueueWaitForMessageRestricted+0x2a>
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005840:	b25b      	sxtb	r3, r3
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d103      	bne.n	8005850 <vQueueWaitForMessageRestricted+0x40>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005850:	f001 fc74 	bl	800713c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	3324      	adds	r3, #36	; 0x24
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fc5b 	bl	8006120 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800586a:	6978      	ldr	r0, [r7, #20]
 800586c:	f7ff ff27 	bl	80056be <prvUnlockQueue>
	}
 8005870:	bf00      	nop
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08e      	sub	sp, #56	; 0x38
 800587c:	af04      	add	r7, sp, #16
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	623b      	str	r3, [r7, #32]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <xTaskCreateStatic+0x46>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	61fb      	str	r3, [r7, #28]
}
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058be:	23a8      	movs	r3, #168	; 0xa8
 80058c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2ba8      	cmp	r3, #168	; 0xa8
 80058c6:	d00a      	beq.n	80058de <xTaskCreateStatic+0x66>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	61bb      	str	r3, [r7, #24]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01e      	beq.n	8005922 <xTaskCreateStatic+0xaa>
 80058e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01b      	beq.n	8005922 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058fc:	2300      	movs	r3, #0
 80058fe:	9303      	str	r3, [sp, #12]
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	9302      	str	r3, [sp, #8]
 8005904:	f107 0314 	add.w	r3, r7, #20
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f851 	bl	80059bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800591a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800591c:	f000 f8ec 	bl	8005af8 <prvAddNewTaskToReadyList>
 8005920:	e001      	b.n	8005926 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005926:	697b      	ldr	r3, [r7, #20]
	}
 8005928:	4618      	mov	r0, r3
 800592a:	3728      	adds	r7, #40	; 0x28
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	; 0x30
 8005934:	af04      	add	r7, sp, #16
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	4613      	mov	r3, r2
 800593e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4618      	mov	r0, r3
 8005946:	f001 fcc9 	bl	80072dc <pvPortMalloc>
 800594a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00e      	beq.n	8005970 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005952:	20a8      	movs	r0, #168	; 0xa8
 8005954:	f001 fcc2 	bl	80072dc <pvPortMalloc>
 8005958:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	631a      	str	r2, [r3, #48]	; 0x30
 8005966:	e005      	b.n	8005974 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005968:	6978      	ldr	r0, [r7, #20]
 800596a:	f001 fd7b 	bl	8007464 <vPortFree>
 800596e:	e001      	b.n	8005974 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d017      	beq.n	80059aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	2300      	movs	r3, #0
 8005986:	9303      	str	r3, [sp, #12]
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	9302      	str	r3, [sp, #8]
 800598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f80f 	bl	80059bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800599e:	69f8      	ldr	r0, [r7, #28]
 80059a0:	f000 f8aa 	bl	8005af8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059a4:	2301      	movs	r3, #1
 80059a6:	61bb      	str	r3, [r7, #24]
 80059a8:	e002      	b.n	80059b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059aa:	f04f 33ff 	mov.w	r3, #4294967295
 80059ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059b0:	69bb      	ldr	r3, [r7, #24]
	}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3720      	adds	r7, #32
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	461a      	mov	r2, r3
 80059d4:	21a5      	movs	r1, #165	; 0xa5
 80059d6:	f002 f858 	bl	8007a8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059e4:	3b01      	subs	r3, #1
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f023 0307 	bic.w	r3, r3, #7
 80059f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <prvInitialiseNewTask+0x58>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	617b      	str	r3, [r7, #20]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a14:	2300      	movs	r3, #0
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	e012      	b.n	8005a40 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	7819      	ldrb	r1, [r3, #0]
 8005a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	3334      	adds	r3, #52	; 0x34
 8005a2a:	460a      	mov	r2, r1
 8005a2c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	4413      	add	r3, r2
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d006      	beq.n	8005a48 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b0f      	cmp	r3, #15
 8005a44:	d9e9      	bls.n	8005a1a <prvInitialiseNewTask+0x5e>
 8005a46:	e000      	b.n	8005a4a <prvInitialiseNewTask+0x8e>
		{
			break;
 8005a48:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	2b37      	cmp	r3, #55	; 0x37
 8005a56:	d901      	bls.n	8005a5c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a58:	2337      	movs	r3, #55	; 0x37
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	3304      	adds	r3, #4
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe fff7 	bl	8004a66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	3318      	adds	r3, #24
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fff2 	bl	8004a66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	3354      	adds	r3, #84	; 0x54
 8005aac:	224c      	movs	r2, #76	; 0x4c
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 ffea 	bl	8007a8a <memset>
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	4a0c      	ldr	r2, [pc, #48]	; (8005aec <prvInitialiseNewTask+0x130>)
 8005aba:	659a      	str	r2, [r3, #88]	; 0x58
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	4a0c      	ldr	r2, [pc, #48]	; (8005af0 <prvInitialiseNewTask+0x134>)
 8005ac0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	4a0b      	ldr	r2, [pc, #44]	; (8005af4 <prvInitialiseNewTask+0x138>)
 8005ac6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	69b8      	ldr	r0, [r7, #24]
 8005ace:	f001 fa13 	bl	8006ef8 <pxPortInitialiseStack>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ae4:	bf00      	nop
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	20001b94 	.word	0x20001b94
 8005af0:	20001bfc 	.word	0x20001bfc
 8005af4:	20001c64 	.word	0x20001c64

08005af8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b00:	f001 faec 	bl	80070dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b04:	4b2d      	ldr	r3, [pc, #180]	; (8005bbc <prvAddNewTaskToReadyList+0xc4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	4a2c      	ldr	r2, [pc, #176]	; (8005bbc <prvAddNewTaskToReadyList+0xc4>)
 8005b0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b0e:	4b2c      	ldr	r3, [pc, #176]	; (8005bc0 <prvAddNewTaskToReadyList+0xc8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b16:	4a2a      	ldr	r2, [pc, #168]	; (8005bc0 <prvAddNewTaskToReadyList+0xc8>)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b1c:	4b27      	ldr	r3, [pc, #156]	; (8005bbc <prvAddNewTaskToReadyList+0xc4>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d110      	bne.n	8005b46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b24:	f000 fc28 	bl	8006378 <prvInitialiseTaskLists>
 8005b28:	e00d      	b.n	8005b46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b2a:	4b26      	ldr	r3, [pc, #152]	; (8005bc4 <prvAddNewTaskToReadyList+0xcc>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b32:	4b23      	ldr	r3, [pc, #140]	; (8005bc0 <prvAddNewTaskToReadyList+0xc8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d802      	bhi.n	8005b46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b40:	4a1f      	ldr	r2, [pc, #124]	; (8005bc0 <prvAddNewTaskToReadyList+0xc8>)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b46:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <prvAddNewTaskToReadyList+0xd0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	4a1e      	ldr	r2, [pc, #120]	; (8005bc8 <prvAddNewTaskToReadyList+0xd0>)
 8005b4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b50:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <prvAddNewTaskToReadyList+0xd0>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5c:	4b1b      	ldr	r3, [pc, #108]	; (8005bcc <prvAddNewTaskToReadyList+0xd4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d903      	bls.n	8005b6c <prvAddNewTaskToReadyList+0x74>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <prvAddNewTaskToReadyList+0xd4>)
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <prvAddNewTaskToReadyList+0xd8>)
 8005b7a:	441a      	add	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f7fe ff7b 	bl	8004a7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b88:	f001 fad8 	bl	800713c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b8c:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <prvAddNewTaskToReadyList+0xcc>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00e      	beq.n	8005bb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <prvAddNewTaskToReadyList+0xc8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d207      	bcs.n	8005bb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <prvAddNewTaskToReadyList+0xdc>)
 8005ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000e14 	.word	0x20000e14
 8005bc0:	20000940 	.word	0x20000940
 8005bc4:	20000e20 	.word	0x20000e20
 8005bc8:	20000e30 	.word	0x20000e30
 8005bcc:	20000e1c 	.word	0x20000e1c
 8005bd0:	20000944 	.word	0x20000944
 8005bd4:	e000ed04 	.word	0xe000ed04

08005bd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d017      	beq.n	8005c1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bea:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <vTaskDelay+0x60>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <vTaskDelay+0x30>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60bb      	str	r3, [r7, #8]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c08:	f000 f88a 	bl	8005d20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fe0c 	bl	800682c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c14:	f000 f892 	bl	8005d3c <xTaskResumeAll>
 8005c18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d107      	bne.n	8005c30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <vTaskDelay+0x64>)
 8005c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	20000e3c 	.word	0x20000e3c
 8005c3c:	e000ed04 	.word	0xe000ed04

08005c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	; 0x28
 8005c44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c4e:	463a      	mov	r2, r7
 8005c50:	1d39      	adds	r1, r7, #4
 8005c52:	f107 0308 	add.w	r3, r7, #8
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe feb4 	bl	80049c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	9202      	str	r2, [sp, #8]
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	2300      	movs	r3, #0
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	460a      	mov	r2, r1
 8005c6e:	4924      	ldr	r1, [pc, #144]	; (8005d00 <vTaskStartScheduler+0xc0>)
 8005c70:	4824      	ldr	r0, [pc, #144]	; (8005d04 <vTaskStartScheduler+0xc4>)
 8005c72:	f7ff fe01 	bl	8005878 <xTaskCreateStatic>
 8005c76:	4603      	mov	r3, r0
 8005c78:	4a23      	ldr	r2, [pc, #140]	; (8005d08 <vTaskStartScheduler+0xc8>)
 8005c7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c7c:	4b22      	ldr	r3, [pc, #136]	; (8005d08 <vTaskStartScheduler+0xc8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c84:	2301      	movs	r3, #1
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e001      	b.n	8005c8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d102      	bne.n	8005c9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c94:	f000 fe1e 	bl	80068d4 <xTimerCreateTimerTask>
 8005c98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d11b      	bne.n	8005cd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	613b      	str	r3, [r7, #16]
}
 8005cb2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cb4:	4b15      	ldr	r3, [pc, #84]	; (8005d0c <vTaskStartScheduler+0xcc>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3354      	adds	r3, #84	; 0x54
 8005cba:	4a15      	ldr	r2, [pc, #84]	; (8005d10 <vTaskStartScheduler+0xd0>)
 8005cbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cbe:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <vTaskStartScheduler+0xd4>)
 8005cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cc6:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <vTaskStartScheduler+0xd8>)
 8005cc8:	2201      	movs	r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ccc:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <vTaskStartScheduler+0xdc>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cd2:	f001 f991 	bl	8006ff8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cd6:	e00e      	b.n	8005cf6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cde:	d10a      	bne.n	8005cf6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	60fb      	str	r3, [r7, #12]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <vTaskStartScheduler+0xb4>
}
 8005cf6:	bf00      	nop
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	0800879c 	.word	0x0800879c
 8005d04:	08006349 	.word	0x08006349
 8005d08:	20000e38 	.word	0x20000e38
 8005d0c:	20000940 	.word	0x20000940
 8005d10:	2000006c 	.word	0x2000006c
 8005d14:	20000e34 	.word	0x20000e34
 8005d18:	20000e20 	.word	0x20000e20
 8005d1c:	20000e18 	.word	0x20000e18

08005d20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d24:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <vTaskSuspendAll+0x18>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	4a03      	ldr	r2, [pc, #12]	; (8005d38 <vTaskSuspendAll+0x18>)
 8005d2c:	6013      	str	r3, [r2, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000e3c 	.word	0x20000e3c

08005d3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d4a:	4b42      	ldr	r3, [pc, #264]	; (8005e54 <xTaskResumeAll+0x118>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	603b      	str	r3, [r7, #0]
}
 8005d64:	bf00      	nop
 8005d66:	e7fe      	b.n	8005d66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d68:	f001 f9b8 	bl	80070dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d6c:	4b39      	ldr	r3, [pc, #228]	; (8005e54 <xTaskResumeAll+0x118>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	4a38      	ldr	r2, [pc, #224]	; (8005e54 <xTaskResumeAll+0x118>)
 8005d74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d76:	4b37      	ldr	r3, [pc, #220]	; (8005e54 <xTaskResumeAll+0x118>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d162      	bne.n	8005e44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d7e:	4b36      	ldr	r3, [pc, #216]	; (8005e58 <xTaskResumeAll+0x11c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d05e      	beq.n	8005e44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d86:	e02f      	b.n	8005de8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005d88:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <xTaskResumeAll+0x120>)
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3318      	adds	r3, #24
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe fecd 	bl	8004b34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fec8 	bl	8004b34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da8:	4b2d      	ldr	r3, [pc, #180]	; (8005e60 <xTaskResumeAll+0x124>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d903      	bls.n	8005db8 <xTaskResumeAll+0x7c>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	4a2a      	ldr	r2, [pc, #168]	; (8005e60 <xTaskResumeAll+0x124>)
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4a27      	ldr	r2, [pc, #156]	; (8005e64 <xTaskResumeAll+0x128>)
 8005dc6:	441a      	add	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f7fe fe55 	bl	8004a7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	4b23      	ldr	r3, [pc, #140]	; (8005e68 <xTaskResumeAll+0x12c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d302      	bcc.n	8005de8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005de2:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <xTaskResumeAll+0x130>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005de8:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <xTaskResumeAll+0x120>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1cb      	bne.n	8005d88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005df6:	f000 fb61 	bl	80064bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005dfa:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <xTaskResumeAll+0x134>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d010      	beq.n	8005e28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e06:	f000 f845 	bl	8005e94 <xTaskIncrementTick>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e10:	4b16      	ldr	r3, [pc, #88]	; (8005e6c <xTaskResumeAll+0x130>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f1      	bne.n	8005e06 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <xTaskResumeAll+0x134>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e28:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <xTaskResumeAll+0x130>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e34:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <xTaskResumeAll+0x138>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e44:	f001 f97a 	bl	800713c <vPortExitCritical>

	return xAlreadyYielded;
 8005e48:	68bb      	ldr	r3, [r7, #8]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000e3c 	.word	0x20000e3c
 8005e58:	20000e14 	.word	0x20000e14
 8005e5c:	20000dd4 	.word	0x20000dd4
 8005e60:	20000e1c 	.word	0x20000e1c
 8005e64:	20000944 	.word	0x20000944
 8005e68:	20000940 	.word	0x20000940
 8005e6c:	20000e28 	.word	0x20000e28
 8005e70:	20000e24 	.word	0x20000e24
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e7e:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <xTaskGetTickCount+0x18>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e84:	687b      	ldr	r3, [r7, #4]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr
 8005e90:	20000e18 	.word	0x20000e18

08005e94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e9e:	4b51      	ldr	r3, [pc, #324]	; (8005fe4 <xTaskIncrementTick+0x150>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f040 808e 	bne.w	8005fc4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ea8:	4b4f      	ldr	r3, [pc, #316]	; (8005fe8 <xTaskIncrementTick+0x154>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005eb0:	4a4d      	ldr	r2, [pc, #308]	; (8005fe8 <xTaskIncrementTick+0x154>)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d120      	bne.n	8005efe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ebc:	4b4b      	ldr	r3, [pc, #300]	; (8005fec <xTaskIncrementTick+0x158>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <xTaskIncrementTick+0x48>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	603b      	str	r3, [r7, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	e7fe      	b.n	8005eda <xTaskIncrementTick+0x46>
 8005edc:	4b43      	ldr	r3, [pc, #268]	; (8005fec <xTaskIncrementTick+0x158>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	4b43      	ldr	r3, [pc, #268]	; (8005ff0 <xTaskIncrementTick+0x15c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a41      	ldr	r2, [pc, #260]	; (8005fec <xTaskIncrementTick+0x158>)
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	4a41      	ldr	r2, [pc, #260]	; (8005ff0 <xTaskIncrementTick+0x15c>)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	4b40      	ldr	r3, [pc, #256]	; (8005ff4 <xTaskIncrementTick+0x160>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	4a3f      	ldr	r2, [pc, #252]	; (8005ff4 <xTaskIncrementTick+0x160>)
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	f000 fadf 	bl	80064bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005efe:	4b3e      	ldr	r3, [pc, #248]	; (8005ff8 <xTaskIncrementTick+0x164>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d34e      	bcc.n	8005fa6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f08:	4b38      	ldr	r3, [pc, #224]	; (8005fec <xTaskIncrementTick+0x158>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <xTaskIncrementTick+0x82>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <xTaskIncrementTick+0x84>
 8005f16:	2300      	movs	r3, #0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f1c:	4b36      	ldr	r3, [pc, #216]	; (8005ff8 <xTaskIncrementTick+0x164>)
 8005f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f22:	601a      	str	r2, [r3, #0]
					break;
 8005f24:	e03f      	b.n	8005fa6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f26:	4b31      	ldr	r3, [pc, #196]	; (8005fec <xTaskIncrementTick+0x158>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d203      	bcs.n	8005f46 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f3e:	4a2e      	ldr	r2, [pc, #184]	; (8005ff8 <xTaskIncrementTick+0x164>)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6013      	str	r3, [r2, #0]
						break;
 8005f44:	e02f      	b.n	8005fa6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fdf2 	bl	8004b34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	3318      	adds	r3, #24
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe fde9 	bl	8004b34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f66:	4b25      	ldr	r3, [pc, #148]	; (8005ffc <xTaskIncrementTick+0x168>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d903      	bls.n	8005f76 <xTaskIncrementTick+0xe2>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f72:	4a22      	ldr	r2, [pc, #136]	; (8005ffc <xTaskIncrementTick+0x168>)
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4a1f      	ldr	r2, [pc, #124]	; (8006000 <xTaskIncrementTick+0x16c>)
 8005f84:	441a      	add	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fe fd76 	bl	8004a7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	4b1b      	ldr	r3, [pc, #108]	; (8006004 <xTaskIncrementTick+0x170>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d3b3      	bcc.n	8005f08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa4:	e7b0      	b.n	8005f08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fa6:	4b17      	ldr	r3, [pc, #92]	; (8006004 <xTaskIncrementTick+0x170>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fac:	4914      	ldr	r1, [pc, #80]	; (8006000 <xTaskIncrementTick+0x16c>)
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d907      	bls.n	8005fce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e004      	b.n	8005fce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005fc4:	4b10      	ldr	r3, [pc, #64]	; (8006008 <xTaskIncrementTick+0x174>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	4a0f      	ldr	r2, [pc, #60]	; (8006008 <xTaskIncrementTick+0x174>)
 8005fcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fce:	4b0f      	ldr	r3, [pc, #60]	; (800600c <xTaskIncrementTick+0x178>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005fda:	697b      	ldr	r3, [r7, #20]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20000e3c 	.word	0x20000e3c
 8005fe8:	20000e18 	.word	0x20000e18
 8005fec:	20000dcc 	.word	0x20000dcc
 8005ff0:	20000dd0 	.word	0x20000dd0
 8005ff4:	20000e2c 	.word	0x20000e2c
 8005ff8:	20000e34 	.word	0x20000e34
 8005ffc:	20000e1c 	.word	0x20000e1c
 8006000:	20000944 	.word	0x20000944
 8006004:	20000940 	.word	0x20000940
 8006008:	20000e24 	.word	0x20000e24
 800600c:	20000e28 	.word	0x20000e28

08006010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006016:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <vTaskSwitchContext+0xb0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800601e:	4b29      	ldr	r3, [pc, #164]	; (80060c4 <vTaskSwitchContext+0xb4>)
 8006020:	2201      	movs	r2, #1
 8006022:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006024:	e046      	b.n	80060b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006026:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <vTaskSwitchContext+0xb4>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <vTaskSwitchContext+0xb8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	e010      	b.n	8006056 <vTaskSwitchContext+0x46>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <vTaskSwitchContext+0x40>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	607b      	str	r3, [r7, #4]
}
 800604c:	bf00      	nop
 800604e:	e7fe      	b.n	800604e <vTaskSwitchContext+0x3e>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3b01      	subs	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	491d      	ldr	r1, [pc, #116]	; (80060cc <vTaskSwitchContext+0xbc>)
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0e4      	beq.n	8006034 <vTaskSwitchContext+0x24>
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4a15      	ldr	r2, [pc, #84]	; (80060cc <vTaskSwitchContext+0xbc>)
 8006076:	4413      	add	r3, r2
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	605a      	str	r2, [r3, #4]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	3308      	adds	r3, #8
 800608c:	429a      	cmp	r2, r3
 800608e:	d104      	bne.n	800609a <vTaskSwitchContext+0x8a>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4a0b      	ldr	r2, [pc, #44]	; (80060d0 <vTaskSwitchContext+0xc0>)
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <vTaskSwitchContext+0xb8>)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060aa:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <vTaskSwitchContext+0xc0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3354      	adds	r3, #84	; 0x54
 80060b0:	4a08      	ldr	r2, [pc, #32]	; (80060d4 <vTaskSwitchContext+0xc4>)
 80060b2:	6013      	str	r3, [r2, #0]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bc80      	pop	{r7}
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	20000e3c 	.word	0x20000e3c
 80060c4:	20000e28 	.word	0x20000e28
 80060c8:	20000e1c 	.word	0x20000e1c
 80060cc:	20000944 	.word	0x20000944
 80060d0:	20000940 	.word	0x20000940
 80060d4:	2000006c 	.word	0x2000006c

080060d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	60fb      	str	r3, [r7, #12]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <vTaskPlaceOnEventList+0x44>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3318      	adds	r3, #24
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fe fcdc 	bl	8004ac4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800610c:	2101      	movs	r1, #1
 800610e:	6838      	ldr	r0, [r7, #0]
 8006110:	f000 fb8c 	bl	800682c <prvAddCurrentTaskToDelayedList>
}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000940 	.word	0x20000940

08006120 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	617b      	str	r3, [r7, #20]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <vTaskPlaceOnEventListRestricted+0x54>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3318      	adds	r3, #24
 800614e:	4619      	mov	r1, r3
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7fe fc94 	bl	8004a7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800615c:	f04f 33ff 	mov.w	r3, #4294967295
 8006160:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	68b8      	ldr	r0, [r7, #8]
 8006166:	f000 fb61 	bl	800682c <prvAddCurrentTaskToDelayedList>
	}
 800616a:	bf00      	nop
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000940 	.word	0x20000940

08006178 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60fb      	str	r3, [r7, #12]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	3318      	adds	r3, #24
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe fcc3 	bl	8004b34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ae:	4b1e      	ldr	r3, [pc, #120]	; (8006228 <xTaskRemoveFromEventList+0xb0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d11d      	bne.n	80061f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	3304      	adds	r3, #4
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe fcba 	bl	8004b34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	4b19      	ldr	r3, [pc, #100]	; (800622c <xTaskRemoveFromEventList+0xb4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d903      	bls.n	80061d4 <xTaskRemoveFromEventList+0x5c>
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	4a16      	ldr	r2, [pc, #88]	; (800622c <xTaskRemoveFromEventList+0xb4>)
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4a13      	ldr	r2, [pc, #76]	; (8006230 <xTaskRemoveFromEventList+0xb8>)
 80061e2:	441a      	add	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f7fe fc47 	bl	8004a7e <vListInsertEnd>
 80061f0:	e005      	b.n	80061fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	3318      	adds	r3, #24
 80061f6:	4619      	mov	r1, r3
 80061f8:	480e      	ldr	r0, [pc, #56]	; (8006234 <xTaskRemoveFromEventList+0xbc>)
 80061fa:	f7fe fc40 	bl	8004a7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <xTaskRemoveFromEventList+0xc0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	429a      	cmp	r2, r3
 800620a:	d905      	bls.n	8006218 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006210:	4b0a      	ldr	r3, [pc, #40]	; (800623c <xTaskRemoveFromEventList+0xc4>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	e001      	b.n	800621c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800621c:	697b      	ldr	r3, [r7, #20]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000e3c 	.word	0x20000e3c
 800622c:	20000e1c 	.word	0x20000e1c
 8006230:	20000944 	.word	0x20000944
 8006234:	20000dd4 	.word	0x20000dd4
 8006238:	20000940 	.word	0x20000940
 800623c:	20000e28 	.word	0x20000e28

08006240 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <vTaskInternalSetTimeOutState+0x24>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <vTaskInternalSetTimeOutState+0x28>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	605a      	str	r2, [r3, #4]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000e2c 	.word	0x20000e2c
 8006268:	20000e18 	.word	0x20000e18

0800626c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	613b      	str	r3, [r7, #16]
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	60fb      	str	r3, [r7, #12]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80062ae:	f000 ff15 	bl	80070dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062b2:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <xTaskCheckForTimeOut+0xbc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d102      	bne.n	80062d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	e023      	b.n	800631a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <xTaskCheckForTimeOut+0xc0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d007      	beq.n	80062ee <xTaskCheckForTimeOut+0x82>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	e015      	b.n	800631a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d20b      	bcs.n	8006310 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1ad2      	subs	r2, r2, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ff9b 	bl	8006240 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800630a:	2300      	movs	r3, #0
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	e004      	b.n	800631a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006316:	2301      	movs	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800631a:	f000 ff0f 	bl	800713c <vPortExitCritical>

	return xReturn;
 800631e:	69fb      	ldr	r3, [r7, #28]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000e18 	.word	0x20000e18
 800632c:	20000e2c 	.word	0x20000e2c

08006330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006334:	4b03      	ldr	r3, [pc, #12]	; (8006344 <vTaskMissedYield+0x14>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
}
 800633a:	bf00      	nop
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000e28 	.word	0x20000e28

08006348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006350:	f000 f852 	bl	80063f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006354:	4b06      	ldr	r3, [pc, #24]	; (8006370 <prvIdleTask+0x28>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d9f9      	bls.n	8006350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <prvIdleTask+0x2c>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800636c:	e7f0      	b.n	8006350 <prvIdleTask+0x8>
 800636e:	bf00      	nop
 8006370:	20000944 	.word	0x20000944
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800637e:	2300      	movs	r3, #0
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	e00c      	b.n	800639e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4a12      	ldr	r2, [pc, #72]	; (80063d8 <prvInitialiseTaskLists+0x60>)
 8006390:	4413      	add	r3, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fb48 	bl	8004a28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3301      	adds	r3, #1
 800639c:	607b      	str	r3, [r7, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b37      	cmp	r3, #55	; 0x37
 80063a2:	d9ef      	bls.n	8006384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063a4:	480d      	ldr	r0, [pc, #52]	; (80063dc <prvInitialiseTaskLists+0x64>)
 80063a6:	f7fe fb3f 	bl	8004a28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063aa:	480d      	ldr	r0, [pc, #52]	; (80063e0 <prvInitialiseTaskLists+0x68>)
 80063ac:	f7fe fb3c 	bl	8004a28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063b0:	480c      	ldr	r0, [pc, #48]	; (80063e4 <prvInitialiseTaskLists+0x6c>)
 80063b2:	f7fe fb39 	bl	8004a28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063b6:	480c      	ldr	r0, [pc, #48]	; (80063e8 <prvInitialiseTaskLists+0x70>)
 80063b8:	f7fe fb36 	bl	8004a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063bc:	480b      	ldr	r0, [pc, #44]	; (80063ec <prvInitialiseTaskLists+0x74>)
 80063be:	f7fe fb33 	bl	8004a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <prvInitialiseTaskLists+0x78>)
 80063c4:	4a05      	ldr	r2, [pc, #20]	; (80063dc <prvInitialiseTaskLists+0x64>)
 80063c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <prvInitialiseTaskLists+0x7c>)
 80063ca:	4a05      	ldr	r2, [pc, #20]	; (80063e0 <prvInitialiseTaskLists+0x68>)
 80063cc:	601a      	str	r2, [r3, #0]
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000944 	.word	0x20000944
 80063dc:	20000da4 	.word	0x20000da4
 80063e0:	20000db8 	.word	0x20000db8
 80063e4:	20000dd4 	.word	0x20000dd4
 80063e8:	20000de8 	.word	0x20000de8
 80063ec:	20000e00 	.word	0x20000e00
 80063f0:	20000dcc 	.word	0x20000dcc
 80063f4:	20000dd0 	.word	0x20000dd0

080063f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063fe:	e019      	b.n	8006434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006400:	f000 fe6c 	bl	80070dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006404:	4b10      	ldr	r3, [pc, #64]	; (8006448 <prvCheckTasksWaitingTermination+0x50>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fb8f 	bl	8004b34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006416:	4b0d      	ldr	r3, [pc, #52]	; (800644c <prvCheckTasksWaitingTermination+0x54>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3b01      	subs	r3, #1
 800641c:	4a0b      	ldr	r2, [pc, #44]	; (800644c <prvCheckTasksWaitingTermination+0x54>)
 800641e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <prvCheckTasksWaitingTermination+0x58>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3b01      	subs	r3, #1
 8006426:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <prvCheckTasksWaitingTermination+0x58>)
 8006428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800642a:	f000 fe87 	bl	800713c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f810 	bl	8006454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <prvCheckTasksWaitingTermination+0x58>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e1      	bne.n	8006400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000de8 	.word	0x20000de8
 800644c:	20000e14 	.word	0x20000e14
 8006450:	20000dfc 	.word	0x20000dfc

08006454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3354      	adds	r3, #84	; 0x54
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fb2b 	bl	8007abc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800646c:	2b00      	cmp	r3, #0
 800646e:	d108      	bne.n	8006482 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fff5 	bl	8007464 <vPortFree>
				vPortFree( pxTCB );
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fff2 	bl	8007464 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006480:	e018      	b.n	80064b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006488:	2b01      	cmp	r3, #1
 800648a:	d103      	bne.n	8006494 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 ffe9 	bl	8007464 <vPortFree>
	}
 8006492:	e00f      	b.n	80064b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800649a:	2b02      	cmp	r3, #2
 800649c:	d00a      	beq.n	80064b4 <prvDeleteTCB+0x60>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	60fb      	str	r3, [r7, #12]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <prvDeleteTCB+0x5e>
	}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064c2:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <prvResetNextTaskUnblockTime+0x40>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <prvResetNextTaskUnblockTime+0x14>
 80064cc:	2301      	movs	r3, #1
 80064ce:	e000      	b.n	80064d2 <prvResetNextTaskUnblockTime+0x16>
 80064d0:	2300      	movs	r3, #0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064d6:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <prvResetNextTaskUnblockTime+0x44>)
 80064d8:	f04f 32ff 	mov.w	r2, #4294967295
 80064dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064de:	e008      	b.n	80064f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064e0:	4b06      	ldr	r3, [pc, #24]	; (80064fc <prvResetNextTaskUnblockTime+0x40>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	4a04      	ldr	r2, [pc, #16]	; (8006500 <prvResetNextTaskUnblockTime+0x44>)
 80064f0:	6013      	str	r3, [r2, #0]
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bc80      	pop	{r7}
 80064fa:	4770      	bx	lr
 80064fc:	20000dcc 	.word	0x20000dcc
 8006500:	20000e34 	.word	0x20000e34

08006504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800650a:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <xTaskGetSchedulerState+0x34>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d102      	bne.n	8006518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006512:	2301      	movs	r3, #1
 8006514:	607b      	str	r3, [r7, #4]
 8006516:	e008      	b.n	800652a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006518:	4b08      	ldr	r3, [pc, #32]	; (800653c <xTaskGetSchedulerState+0x38>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006520:	2302      	movs	r3, #2
 8006522:	607b      	str	r3, [r7, #4]
 8006524:	e001      	b.n	800652a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006526:	2300      	movs	r3, #0
 8006528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800652a:	687b      	ldr	r3, [r7, #4]
	}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	20000e20 	.word	0x20000e20
 800653c:	20000e3c 	.word	0x20000e3c

08006540 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d056      	beq.n	8006604 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	4b2d      	ldr	r3, [pc, #180]	; (8006610 <xTaskPriorityInherit+0xd0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	429a      	cmp	r2, r3
 8006562:	d246      	bcs.n	80065f2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	db06      	blt.n	800657a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800656c:	4b28      	ldr	r3, [pc, #160]	; (8006610 <xTaskPriorityInherit+0xd0>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	6959      	ldr	r1, [r3, #20]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4a22      	ldr	r2, [pc, #136]	; (8006614 <xTaskPriorityInherit+0xd4>)
 800658c:	4413      	add	r3, r2
 800658e:	4299      	cmp	r1, r3
 8006590:	d101      	bne.n	8006596 <xTaskPriorityInherit+0x56>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <xTaskPriorityInherit+0x58>
 8006596:	2300      	movs	r3, #0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d022      	beq.n	80065e2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	3304      	adds	r3, #4
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe fac7 	bl	8004b34 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <xTaskPriorityInherit+0xd0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b4:	4b18      	ldr	r3, [pc, #96]	; (8006618 <xTaskPriorityInherit+0xd8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d903      	bls.n	80065c4 <xTaskPriorityInherit+0x84>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	4a15      	ldr	r2, [pc, #84]	; (8006618 <xTaskPriorityInherit+0xd8>)
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4a10      	ldr	r2, [pc, #64]	; (8006614 <xTaskPriorityInherit+0xd4>)
 80065d2:	441a      	add	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f7fe fa4f 	bl	8004a7e <vListInsertEnd>
 80065e0:	e004      	b.n	80065ec <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <xTaskPriorityInherit+0xd0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80065ec:	2301      	movs	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	e008      	b.n	8006604 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f6:	4b06      	ldr	r3, [pc, #24]	; (8006610 <xTaskPriorityInherit+0xd0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d201      	bcs.n	8006604 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006604:	68fb      	ldr	r3, [r7, #12]
	}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000940 	.word	0x20000940
 8006614:	20000944 	.word	0x20000944
 8006618:	20000e1c 	.word	0x20000e1c

0800661c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006628:	2300      	movs	r3, #0
 800662a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d056      	beq.n	80066e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006632:	4b2e      	ldr	r3, [pc, #184]	; (80066ec <xTaskPriorityDisinherit+0xd0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	429a      	cmp	r2, r3
 800663a:	d00a      	beq.n	8006652 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60fb      	str	r3, [r7, #12]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	60bb      	str	r3, [r7, #8]
}
 800666c:	bf00      	nop
 800666e:	e7fe      	b.n	800666e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	1e5a      	subs	r2, r3, #1
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	429a      	cmp	r2, r3
 8006684:	d02c      	beq.n	80066e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668a:	2b00      	cmp	r3, #0
 800668c:	d128      	bne.n	80066e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3304      	adds	r3, #4
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe fa4e 	bl	8004b34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <xTaskPriorityDisinherit+0xd4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d903      	bls.n	80066c0 <xTaskPriorityDisinherit+0xa4>
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	4a0c      	ldr	r2, [pc, #48]	; (80066f0 <xTaskPriorityDisinherit+0xd4>)
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4a09      	ldr	r2, [pc, #36]	; (80066f4 <xTaskPriorityDisinherit+0xd8>)
 80066ce:	441a      	add	r2, r3
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7fe f9d1 	bl	8004a7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066dc:	2301      	movs	r3, #1
 80066de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066e0:	697b      	ldr	r3, [r7, #20]
	}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000940 	.word	0x20000940
 80066f0:	20000e1c 	.word	0x20000e1c
 80066f4:	20000944 	.word	0x20000944

080066f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006706:	2301      	movs	r3, #1
 8006708:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d06f      	beq.n	80067f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	60fb      	str	r3, [r7, #12]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d902      	bls.n	800673e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	e002      	b.n	8006744 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006742:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	429a      	cmp	r2, r3
 800674c:	d050      	beq.n	80067f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	429a      	cmp	r2, r3
 8006756:	d14b      	bne.n	80067f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006758:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	429a      	cmp	r2, r3
 8006760:	d10a      	bne.n	8006778 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	60bb      	str	r3, [r7, #8]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	2b00      	cmp	r3, #0
 800678a:	db04      	blt.n	8006796 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	6959      	ldr	r1, [r3, #20]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4a15      	ldr	r2, [pc, #84]	; (80067fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80067a6:	4413      	add	r3, r2
 80067a8:	4299      	cmp	r1, r3
 80067aa:	d101      	bne.n	80067b0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80067b0:	2300      	movs	r3, #0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01c      	beq.n	80067f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe f9ba 	bl	8004b34 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d903      	bls.n	80067d4 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	4a0b      	ldr	r2, [pc, #44]	; (8006800 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4a06      	ldr	r2, [pc, #24]	; (80067fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80067e2:	441a      	add	r2, r3
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4619      	mov	r1, r3
 80067ea:	4610      	mov	r0, r2
 80067ec:	f7fe f947 	bl	8004a7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067f0:	bf00      	nop
 80067f2:	3720      	adds	r7, #32
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000940 	.word	0x20000940
 80067fc:	20000944 	.word	0x20000944
 8006800:	20000e1c 	.word	0x20000e1c

08006804 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006808:	4b07      	ldr	r3, [pc, #28]	; (8006828 <pvTaskIncrementMutexHeldCount+0x24>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <pvTaskIncrementMutexHeldCount+0x24>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006816:	3201      	adds	r2, #1
 8006818:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800681a:	4b03      	ldr	r3, [pc, #12]	; (8006828 <pvTaskIncrementMutexHeldCount+0x24>)
 800681c:	681b      	ldr	r3, [r3, #0]
	}
 800681e:	4618      	mov	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000940 	.word	0x20000940

0800682c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006836:	4b21      	ldr	r3, [pc, #132]	; (80068bc <prvAddCurrentTaskToDelayedList+0x90>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800683c:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3304      	adds	r3, #4
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe f976 	bl	8004b34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	d10a      	bne.n	8006866 <prvAddCurrentTaskToDelayedList+0x3a>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006856:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3304      	adds	r3, #4
 800685c:	4619      	mov	r1, r3
 800685e:	4819      	ldr	r0, [pc, #100]	; (80068c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006860:	f7fe f90d 	bl	8004a7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006864:	e026      	b.n	80068b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4413      	add	r3, r2
 800686c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	429a      	cmp	r2, r3
 800687c:	d209      	bcs.n	8006892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b0f      	ldr	r3, [pc, #60]	; (80068c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4610      	mov	r0, r2
 800688c:	f7fe f91a 	bl	8004ac4 <vListInsert>
}
 8006890:	e010      	b.n	80068b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006892:	4b0e      	ldr	r3, [pc, #56]	; (80068cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3304      	adds	r3, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f7fe f910 	bl	8004ac4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068a4:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d202      	bcs.n	80068b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068ae:	4a08      	ldr	r2, [pc, #32]	; (80068d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6013      	str	r3, [r2, #0]
}
 80068b4:	bf00      	nop
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000e18 	.word	0x20000e18
 80068c0:	20000940 	.word	0x20000940
 80068c4:	20000e00 	.word	0x20000e00
 80068c8:	20000dd0 	.word	0x20000dd0
 80068cc:	20000dcc 	.word	0x20000dcc
 80068d0:	20000e34 	.word	0x20000e34

080068d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	; 0x28
 80068d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068de:	f000 facb 	bl	8006e78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068e2:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <xTimerCreateTimerTask+0x80>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d021      	beq.n	800692e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068f2:	1d3a      	adds	r2, r7, #4
 80068f4:	f107 0108 	add.w	r1, r7, #8
 80068f8:	f107 030c 	add.w	r3, r7, #12
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe f879 	bl	80049f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	9202      	str	r2, [sp, #8]
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	2302      	movs	r3, #2
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	2300      	movs	r3, #0
 8006912:	460a      	mov	r2, r1
 8006914:	4910      	ldr	r1, [pc, #64]	; (8006958 <xTimerCreateTimerTask+0x84>)
 8006916:	4811      	ldr	r0, [pc, #68]	; (800695c <xTimerCreateTimerTask+0x88>)
 8006918:	f7fe ffae 	bl	8005878 <xTaskCreateStatic>
 800691c:	4603      	mov	r3, r0
 800691e:	4a10      	ldr	r2, [pc, #64]	; (8006960 <xTimerCreateTimerTask+0x8c>)
 8006920:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006922:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <xTimerCreateTimerTask+0x8c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800692a:	2301      	movs	r3, #1
 800692c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	613b      	str	r3, [r7, #16]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800694a:	697b      	ldr	r3, [r7, #20]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000e70 	.word	0x20000e70
 8006958:	080087a4 	.word	0x080087a4
 800695c:	08006a81 	.word	0x08006a81
 8006960:	20000e74 	.word	0x20000e74

08006964 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006972:	2300      	movs	r3, #0
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <xTimerGenericCommand+0x2e>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	623b      	str	r3, [r7, #32]
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006992:	4b1a      	ldr	r3, [pc, #104]	; (80069fc <xTimerGenericCommand+0x98>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d02a      	beq.n	80069f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b05      	cmp	r3, #5
 80069aa:	dc18      	bgt.n	80069de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069ac:	f7ff fdaa 	bl	8006504 <xTaskGetSchedulerState>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d109      	bne.n	80069ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069b6:	4b11      	ldr	r3, [pc, #68]	; (80069fc <xTimerGenericCommand+0x98>)
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	f107 0110 	add.w	r1, r7, #16
 80069be:	2300      	movs	r3, #0
 80069c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c2:	f7fe fa53 	bl	8004e6c <xQueueGenericSend>
 80069c6:	6278      	str	r0, [r7, #36]	; 0x24
 80069c8:	e012      	b.n	80069f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069ca:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <xTimerGenericCommand+0x98>)
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	f107 0110 	add.w	r1, r7, #16
 80069d2:	2300      	movs	r3, #0
 80069d4:	2200      	movs	r2, #0
 80069d6:	f7fe fa49 	bl	8004e6c <xQueueGenericSend>
 80069da:	6278      	str	r0, [r7, #36]	; 0x24
 80069dc:	e008      	b.n	80069f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <xTimerGenericCommand+0x98>)
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	f107 0110 	add.w	r1, r7, #16
 80069e6:	2300      	movs	r3, #0
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	f7fe fb3d 	bl	8005068 <xQueueGenericSendFromISR>
 80069ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3728      	adds	r7, #40	; 0x28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000e70 	.word	0x20000e70

08006a00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a0a:	4b1c      	ldr	r3, [pc, #112]	; (8006a7c <prvProcessExpiredTimer+0x7c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	3304      	adds	r3, #4
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fe f88b 	bl	8004b34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d122      	bne.n	8006a6c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	18d1      	adds	r1, r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	6978      	ldr	r0, [r7, #20]
 8006a34:	f000 f8c8 	bl	8006bc8 <prvInsertTimerInActiveList>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d016      	beq.n	8006a6c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2300      	movs	r3, #0
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	2100      	movs	r1, #0
 8006a48:	6978      	ldr	r0, [r7, #20]
 8006a4a:	f7ff ff8b 	bl	8006964 <xTimerGenericCommand>
 8006a4e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	60fb      	str	r3, [r7, #12]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	6978      	ldr	r0, [r7, #20]
 8006a72:	4798      	blx	r3
}
 8006a74:	bf00      	nop
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20000e68 	.word	0x20000e68

08006a80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a88:	f107 0308 	add.w	r3, r7, #8
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 f857 	bl	8006b40 <prvGetNextExpireTime>
 8006a92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4619      	mov	r1, r3
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f803 	bl	8006aa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a9e:	f000 f8d5 	bl	8006c4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006aa2:	e7f1      	b.n	8006a88 <prvTimerTask+0x8>

08006aa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006aae:	f7ff f937 	bl	8005d20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ab2:	f107 0308 	add.w	r3, r7, #8
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 f866 	bl	8006b88 <prvSampleTimeNow>
 8006abc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d130      	bne.n	8006b26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <prvProcessTimerOrBlockTask+0x3c>
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d806      	bhi.n	8006ae0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ad2:	f7ff f933 	bl	8005d3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff ff91 	bl	8006a00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ade:	e024      	b.n	8006b2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ae6:	4b13      	ldr	r3, [pc, #76]	; (8006b34 <prvProcessTimerOrBlockTask+0x90>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bf0c      	ite	eq
 8006af0:	2301      	moveq	r3, #1
 8006af2:	2300      	movne	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006af8:	4b0f      	ldr	r3, [pc, #60]	; (8006b38 <prvProcessTimerOrBlockTask+0x94>)
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	4619      	mov	r1, r3
 8006b06:	f7fe fe83 	bl	8005810 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b0a:	f7ff f917 	bl	8005d3c <xTaskResumeAll>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b14:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <prvProcessTimerOrBlockTask+0x98>)
 8006b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	f3bf 8f6f 	isb	sy
}
 8006b24:	e001      	b.n	8006b2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b26:	f7ff f909 	bl	8005d3c <xTaskResumeAll>
}
 8006b2a:	bf00      	nop
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000e6c 	.word	0x20000e6c
 8006b38:	20000e70 	.word	0x20000e70
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b48:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <prvGetNextExpireTime+0x44>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bf0c      	ite	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	2300      	movne	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d105      	bne.n	8006b72 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b66:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <prvGetNextExpireTime+0x44>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e001      	b.n	8006b76 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b76:	68fb      	ldr	r3, [r7, #12]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000e68 	.word	0x20000e68

08006b88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b90:	f7ff f972 	bl	8005e78 <xTaskGetTickCount>
 8006b94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <prvSampleTimeNow+0x3c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d205      	bcs.n	8006bac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ba0:	f000 f908 	bl	8006db4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e002      	b.n	8006bb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bb2:	4a04      	ldr	r2, [pc, #16]	; (8006bc4 <prvSampleTimeNow+0x3c>)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000e78 	.word	0x20000e78

08006bc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d812      	bhi.n	8006c14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	1ad2      	subs	r2, r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d302      	bcc.n	8006c02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	e01b      	b.n	8006c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c02:	4b10      	ldr	r3, [pc, #64]	; (8006c44 <prvInsertTimerInActiveList+0x7c>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f7fd ff59 	bl	8004ac4 <vListInsert>
 8006c12:	e012      	b.n	8006c3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d206      	bcs.n	8006c2a <prvInsertTimerInActiveList+0x62>
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d302      	bcc.n	8006c2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	e007      	b.n	8006c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <prvInsertTimerInActiveList+0x80>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3304      	adds	r3, #4
 8006c32:	4619      	mov	r1, r3
 8006c34:	4610      	mov	r0, r2
 8006c36:	f7fd ff45 	bl	8004ac4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c3a:	697b      	ldr	r3, [r7, #20]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000e6c 	.word	0x20000e6c
 8006c48:	20000e68 	.word	0x20000e68

08006c4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08e      	sub	sp, #56	; 0x38
 8006c50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c52:	e09d      	b.n	8006d90 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	da18      	bge.n	8006c8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c5a:	1d3b      	adds	r3, r7, #4
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	61fb      	str	r3, [r7, #28]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c82:	6850      	ldr	r0, [r2, #4]
 8006c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c86:	6892      	ldr	r2, [r2, #8]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	db7e      	blt.n	8006d90 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fd ff46 	bl	8004b34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ca8:	463b      	mov	r3, r7
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff ff6c 	bl	8006b88 <prvSampleTimeNow>
 8006cb0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b09      	cmp	r3, #9
 8006cb6:	d86a      	bhi.n	8006d8e <prvProcessReceivedCommands+0x142>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <prvProcessReceivedCommands+0x74>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006ce9 	.word	0x08006ce9
 8006ccc:	08006d91 	.word	0x08006d91
 8006cd0:	08006d45 	.word	0x08006d45
 8006cd4:	08006d7d 	.word	0x08006d7d
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006ce9 	.word	0x08006ce9
 8006ce0:	08006d91 	.word	0x08006d91
 8006ce4:	08006d45 	.word	0x08006d45
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	18d1      	adds	r1, r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf6:	f7ff ff67 	bl	8006bc8 <prvInsertTimerInActiveList>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d047      	beq.n	8006d90 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d06:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d13f      	bne.n	8006d90 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	441a      	add	r2, r3
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d22:	f7ff fe1f 	bl	8006964 <xTimerGenericCommand>
 8006d26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d130      	bne.n	8006d90 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	61bb      	str	r3, [r7, #24]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	617b      	str	r3, [r7, #20]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	18d1      	adds	r1, r2, r3
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d76:	f7ff ff27 	bl	8006bc8 <prvInsertTimerInActiveList>
					break;
 8006d7a:	e009      	b.n	8006d90 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d104      	bne.n	8006d90 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d88:	f000 fb6c 	bl	8007464 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d8c:	e000      	b.n	8006d90 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006d8e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <prvProcessReceivedCommands+0x164>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	1d39      	adds	r1, r7, #4
 8006d96:	2200      	movs	r2, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe f9fd 	bl	8005198 <xQueueReceive>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f47f af57 	bne.w	8006c54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006da6:	bf00      	nop
 8006da8:	bf00      	nop
 8006daa:	3730      	adds	r7, #48	; 0x30
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000e70 	.word	0x20000e70

08006db4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dba:	e045      	b.n	8006e48 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dbc:	4b2c      	ldr	r3, [pc, #176]	; (8006e70 <prvSwitchTimerLists+0xbc>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dc6:	4b2a      	ldr	r3, [pc, #168]	; (8006e70 <prvSwitchTimerLists+0xbc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fd fead 	bl	8004b34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d12e      	bne.n	8006e48 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4413      	add	r3, r2
 8006df2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d90e      	bls.n	8006e1a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e08:	4b19      	ldr	r3, [pc, #100]	; (8006e70 <prvSwitchTimerLists+0xbc>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f7fd fe56 	bl	8004ac4 <vListInsert>
 8006e18:	e016      	b.n	8006e48 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	2100      	movs	r1, #0
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff fd9d 	bl	8006964 <xTimerGenericCommand>
 8006e2a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	603b      	str	r3, [r7, #0]
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e48:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <prvSwitchTimerLists+0xbc>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1b4      	bne.n	8006dbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e52:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <prvSwitchTimerLists+0xbc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e58:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <prvSwitchTimerLists+0xc0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a04      	ldr	r2, [pc, #16]	; (8006e70 <prvSwitchTimerLists+0xbc>)
 8006e5e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e60:	4a04      	ldr	r2, [pc, #16]	; (8006e74 <prvSwitchTimerLists+0xc0>)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	6013      	str	r3, [r2, #0]
}
 8006e66:	bf00      	nop
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000e68 	.word	0x20000e68
 8006e74:	20000e6c 	.word	0x20000e6c

08006e78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e7e:	f000 f92d 	bl	80070dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e82:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <prvCheckForValidListAndQueue+0x60>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d120      	bne.n	8006ecc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e8a:	4814      	ldr	r0, [pc, #80]	; (8006edc <prvCheckForValidListAndQueue+0x64>)
 8006e8c:	f7fd fdcc 	bl	8004a28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e90:	4813      	ldr	r0, [pc, #76]	; (8006ee0 <prvCheckForValidListAndQueue+0x68>)
 8006e92:	f7fd fdc9 	bl	8004a28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e96:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <prvCheckForValidListAndQueue+0x6c>)
 8006e98:	4a10      	ldr	r2, [pc, #64]	; (8006edc <prvCheckForValidListAndQueue+0x64>)
 8006e9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e9c:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <prvCheckForValidListAndQueue+0x70>)
 8006e9e:	4a10      	ldr	r2, [pc, #64]	; (8006ee0 <prvCheckForValidListAndQueue+0x68>)
 8006ea0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <prvCheckForValidListAndQueue+0x74>)
 8006ea8:	4a11      	ldr	r2, [pc, #68]	; (8006ef0 <prvCheckForValidListAndQueue+0x78>)
 8006eaa:	2110      	movs	r1, #16
 8006eac:	200a      	movs	r0, #10
 8006eae:	f7fd fed3 	bl	8004c58 <xQueueGenericCreateStatic>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4a08      	ldr	r2, [pc, #32]	; (8006ed8 <prvCheckForValidListAndQueue+0x60>)
 8006eb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006eb8:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <prvCheckForValidListAndQueue+0x60>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ec0:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <prvCheckForValidListAndQueue+0x60>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	490b      	ldr	r1, [pc, #44]	; (8006ef4 <prvCheckForValidListAndQueue+0x7c>)
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fc7a 	bl	80057c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ecc:	f000 f936 	bl	800713c <vPortExitCritical>
}
 8006ed0:	bf00      	nop
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000e70 	.word	0x20000e70
 8006edc:	20000e40 	.word	0x20000e40
 8006ee0:	20000e54 	.word	0x20000e54
 8006ee4:	20000e68 	.word	0x20000e68
 8006ee8:	20000e6c 	.word	0x20000e6c
 8006eec:	20000f1c 	.word	0x20000f1c
 8006ef0:	20000e7c 	.word	0x20000e7c
 8006ef4:	080087ac 	.word	0x080087ac

08006ef8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3b04      	subs	r3, #4
 8006f08:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3b04      	subs	r3, #4
 8006f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f023 0201 	bic.w	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3b04      	subs	r3, #4
 8006f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f28:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <pxPortInitialiseStack+0x54>)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3b14      	subs	r3, #20
 8006f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3b20      	subs	r3, #32
 8006f3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f40:	68fb      	ldr	r3, [r7, #12]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr
 8006f4c:	08006f51 	.word	0x08006f51

08006f50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f5a:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <prvTaskExitError+0x54>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f62:	d00a      	beq.n	8006f7a <prvTaskExitError+0x2a>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	60fb      	str	r3, [r7, #12]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <prvTaskExitError+0x28>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	60bb      	str	r3, [r7, #8]
}
 8006f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f8e:	bf00      	nop
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0fc      	beq.n	8006f90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f96:	bf00      	nop
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20000010 	.word	0x20000010
	...

08006fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <pxCurrentTCBConst2>)
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	6808      	ldr	r0, [r1, #0]
 8006fb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fba:	f380 8809 	msr	PSP, r0
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8811 	msr	BASEPRI, r0
 8006fca:	f04e 0e0d 	orr.w	lr, lr, #13
 8006fce:	4770      	bx	lr

08006fd0 <pxCurrentTCBConst2>:
 8006fd0:	20000940 	.word	0x20000940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop

08006fd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006fd8:	4806      	ldr	r0, [pc, #24]	; (8006ff4 <prvPortStartFirstTask+0x1c>)
 8006fda:	6800      	ldr	r0, [r0, #0]
 8006fdc:	6800      	ldr	r0, [r0, #0]
 8006fde:	f380 8808 	msr	MSP, r0
 8006fe2:	b662      	cpsie	i
 8006fe4:	b661      	cpsie	f
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	df00      	svc	0
 8006ff0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006ff2:	bf00      	nop
 8006ff4:	e000ed08 	.word	0xe000ed08

08006ff8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ffe:	4b32      	ldr	r3, [pc, #200]	; (80070c8 <xPortStartScheduler+0xd0>)
 8007000:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	22ff      	movs	r2, #255	; 0xff
 800700e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007020:	b2da      	uxtb	r2, r3
 8007022:	4b2a      	ldr	r3, [pc, #168]	; (80070cc <xPortStartScheduler+0xd4>)
 8007024:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007026:	4b2a      	ldr	r3, [pc, #168]	; (80070d0 <xPortStartScheduler+0xd8>)
 8007028:	2207      	movs	r2, #7
 800702a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800702c:	e009      	b.n	8007042 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800702e:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <xPortStartScheduler+0xd8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3b01      	subs	r3, #1
 8007034:	4a26      	ldr	r2, [pc, #152]	; (80070d0 <xPortStartScheduler+0xd8>)
 8007036:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	b2db      	uxtb	r3, r3
 8007040:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d0ef      	beq.n	800702e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800704e:	4b20      	ldr	r3, [pc, #128]	; (80070d0 <xPortStartScheduler+0xd8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f1c3 0307 	rsb	r3, r3, #7
 8007056:	2b04      	cmp	r3, #4
 8007058:	d00a      	beq.n	8007070 <xPortStartScheduler+0x78>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	60bb      	str	r3, [r7, #8]
}
 800706c:	bf00      	nop
 800706e:	e7fe      	b.n	800706e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007070:	4b17      	ldr	r3, [pc, #92]	; (80070d0 <xPortStartScheduler+0xd8>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <xPortStartScheduler+0xd8>)
 8007078:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800707a:	4b15      	ldr	r3, [pc, #84]	; (80070d0 <xPortStartScheduler+0xd8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007082:	4a13      	ldr	r2, [pc, #76]	; (80070d0 <xPortStartScheduler+0xd8>)
 8007084:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	b2da      	uxtb	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800708e:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <xPortStartScheduler+0xdc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a10      	ldr	r2, [pc, #64]	; (80070d4 <xPortStartScheduler+0xdc>)
 8007094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007098:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800709a:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <xPortStartScheduler+0xdc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a0d      	ldr	r2, [pc, #52]	; (80070d4 <xPortStartScheduler+0xdc>)
 80070a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070a6:	f000 f8b9 	bl	800721c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070aa:	4b0b      	ldr	r3, [pc, #44]	; (80070d8 <xPortStartScheduler+0xe0>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070b0:	f7ff ff92 	bl	8006fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070b4:	f7fe ffac 	bl	8006010 <vTaskSwitchContext>
	prvTaskExitError();
 80070b8:	f7ff ff4a 	bl	8006f50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	e000e400 	.word	0xe000e400
 80070cc:	20000f6c 	.word	0x20000f6c
 80070d0:	20000f70 	.word	0x20000f70
 80070d4:	e000ed20 	.word	0xe000ed20
 80070d8:	20000010 	.word	0x20000010

080070dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	607b      	str	r3, [r7, #4]
}
 80070f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070f6:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <vPortEnterCritical+0x58>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3301      	adds	r3, #1
 80070fc:	4a0d      	ldr	r2, [pc, #52]	; (8007134 <vPortEnterCritical+0x58>)
 80070fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007100:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <vPortEnterCritical+0x58>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d10f      	bne.n	8007128 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007108:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <vPortEnterCritical+0x5c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <vPortEnterCritical+0x4c>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	603b      	str	r3, [r7, #0]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <vPortEnterCritical+0x4a>
	}
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	20000010 	.word	0x20000010
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007142:	4b11      	ldr	r3, [pc, #68]	; (8007188 <vPortExitCritical+0x4c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <vPortExitCritical+0x24>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	607b      	str	r3, [r7, #4]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007160:	4b09      	ldr	r3, [pc, #36]	; (8007188 <vPortExitCritical+0x4c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3b01      	subs	r3, #1
 8007166:	4a08      	ldr	r2, [pc, #32]	; (8007188 <vPortExitCritical+0x4c>)
 8007168:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800716a:	4b07      	ldr	r3, [pc, #28]	; (8007188 <vPortExitCritical+0x4c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d105      	bne.n	800717e <vPortExitCritical+0x42>
 8007172:	2300      	movs	r3, #0
 8007174:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	f383 8811 	msr	BASEPRI, r3
}
 800717c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	bc80      	pop	{r7}
 8007186:	4770      	bx	lr
 8007188:	20000010 	.word	0x20000010
 800718c:	00000000 	.word	0x00000000

08007190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007190:	f3ef 8009 	mrs	r0, PSP
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	4b0d      	ldr	r3, [pc, #52]	; (80071d0 <pxCurrentTCBConst>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80071a0:	6010      	str	r0, [r2, #0]
 80071a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80071a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071aa:	f380 8811 	msr	BASEPRI, r0
 80071ae:	f7fe ff2f 	bl	8006010 <vTaskSwitchContext>
 80071b2:	f04f 0000 	mov.w	r0, #0
 80071b6:	f380 8811 	msr	BASEPRI, r0
 80071ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80071be:	6819      	ldr	r1, [r3, #0]
 80071c0:	6808      	ldr	r0, [r1, #0]
 80071c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80071c6:	f380 8809 	msr	PSP, r0
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	4770      	bx	lr

080071d0 <pxCurrentTCBConst>:
 80071d0:	20000940 	.word	0x20000940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop

080071d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	607b      	str	r3, [r7, #4]
}
 80071f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071f2:	f7fe fe4f 	bl	8005e94 <xTaskIncrementTick>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <xPortSysTickHandler+0x40>)
 80071fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	2300      	movs	r3, #0
 8007206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	f383 8811 	msr	BASEPRI, r3
}
 800720e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007220:	4b0a      	ldr	r3, [pc, #40]	; (800724c <vPortSetupTimerInterrupt+0x30>)
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007226:	4b0a      	ldr	r3, [pc, #40]	; (8007250 <vPortSetupTimerInterrupt+0x34>)
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800722c:	4b09      	ldr	r3, [pc, #36]	; (8007254 <vPortSetupTimerInterrupt+0x38>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a09      	ldr	r2, [pc, #36]	; (8007258 <vPortSetupTimerInterrupt+0x3c>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	099b      	lsrs	r3, r3, #6
 8007238:	4a08      	ldr	r2, [pc, #32]	; (800725c <vPortSetupTimerInterrupt+0x40>)
 800723a:	3b01      	subs	r3, #1
 800723c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800723e:	4b03      	ldr	r3, [pc, #12]	; (800724c <vPortSetupTimerInterrupt+0x30>)
 8007240:	2207      	movs	r2, #7
 8007242:	601a      	str	r2, [r3, #0]
}
 8007244:	bf00      	nop
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr
 800724c:	e000e010 	.word	0xe000e010
 8007250:	e000e018 	.word	0xe000e018
 8007254:	20000004 	.word	0x20000004
 8007258:	10624dd3 	.word	0x10624dd3
 800725c:	e000e014 	.word	0xe000e014

08007260 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007266:	f3ef 8305 	mrs	r3, IPSR
 800726a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b0f      	cmp	r3, #15
 8007270:	d914      	bls.n	800729c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007272:	4a16      	ldr	r2, [pc, #88]	; (80072cc <vPortValidateInterruptPriority+0x6c>)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800727c:	4b14      	ldr	r3, [pc, #80]	; (80072d0 <vPortValidateInterruptPriority+0x70>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	7afa      	ldrb	r2, [r7, #11]
 8007282:	429a      	cmp	r2, r3
 8007284:	d20a      	bcs.n	800729c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	607b      	str	r3, [r7, #4]
}
 8007298:	bf00      	nop
 800729a:	e7fe      	b.n	800729a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800729c:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <vPortValidateInterruptPriority+0x74>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072a4:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <vPortValidateInterruptPriority+0x78>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d90a      	bls.n	80072c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	603b      	str	r3, [r7, #0]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <vPortValidateInterruptPriority+0x60>
	}
 80072c2:	bf00      	nop
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr
 80072cc:	e000e3f0 	.word	0xe000e3f0
 80072d0:	20000f6c 	.word	0x20000f6c
 80072d4:	e000ed0c 	.word	0xe000ed0c
 80072d8:	20000f70 	.word	0x20000f70

080072dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	; 0x28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072e8:	f7fe fd1a 	bl	8005d20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072ec:	4b58      	ldr	r3, [pc, #352]	; (8007450 <pvPortMalloc+0x174>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072f4:	f000 f910 	bl	8007518 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072f8:	4b56      	ldr	r3, [pc, #344]	; (8007454 <pvPortMalloc+0x178>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4013      	ands	r3, r2
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 808e 	bne.w	8007422 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01d      	beq.n	8007348 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800730c:	2208      	movs	r2, #8
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4413      	add	r3, r2
 8007312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	2b00      	cmp	r3, #0
 800731c:	d014      	beq.n	8007348 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f023 0307 	bic.w	r3, r3, #7
 8007324:	3308      	adds	r3, #8
 8007326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <pvPortMalloc+0x6c>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	617b      	str	r3, [r7, #20]
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d069      	beq.n	8007422 <pvPortMalloc+0x146>
 800734e:	4b42      	ldr	r3, [pc, #264]	; (8007458 <pvPortMalloc+0x17c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	429a      	cmp	r2, r3
 8007356:	d864      	bhi.n	8007422 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007358:	4b40      	ldr	r3, [pc, #256]	; (800745c <pvPortMalloc+0x180>)
 800735a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800735c:	4b3f      	ldr	r3, [pc, #252]	; (800745c <pvPortMalloc+0x180>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007362:	e004      	b.n	800736e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d903      	bls.n	8007380 <pvPortMalloc+0xa4>
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f1      	bne.n	8007364 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007380:	4b33      	ldr	r3, [pc, #204]	; (8007450 <pvPortMalloc+0x174>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007386:	429a      	cmp	r2, r3
 8007388:	d04b      	beq.n	8007422 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2208      	movs	r2, #8
 8007390:	4413      	add	r3, r2
 8007392:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	6a3b      	ldr	r3, [r7, #32]
 800739a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	1ad2      	subs	r2, r2, r3
 80073a4:	2308      	movs	r3, #8
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d91f      	bls.n	80073ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <pvPortMalloc+0xf8>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	613b      	str	r3, [r7, #16]
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	1ad2      	subs	r2, r2, r3
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073e6:	69b8      	ldr	r0, [r7, #24]
 80073e8:	f000 f8f8 	bl	80075dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073ec:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <pvPortMalloc+0x17c>)
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	4a18      	ldr	r2, [pc, #96]	; (8007458 <pvPortMalloc+0x17c>)
 80073f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073fa:	4b17      	ldr	r3, [pc, #92]	; (8007458 <pvPortMalloc+0x17c>)
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4b18      	ldr	r3, [pc, #96]	; (8007460 <pvPortMalloc+0x184>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	429a      	cmp	r2, r3
 8007404:	d203      	bcs.n	800740e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007406:	4b14      	ldr	r3, [pc, #80]	; (8007458 <pvPortMalloc+0x17c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a15      	ldr	r2, [pc, #84]	; (8007460 <pvPortMalloc+0x184>)
 800740c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	4b10      	ldr	r3, [pc, #64]	; (8007454 <pvPortMalloc+0x178>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	431a      	orrs	r2, r3
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007422:	f7fe fc8b 	bl	8005d3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <pvPortMalloc+0x16a>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <pvPortMalloc+0x168>
	return pvReturn;
 8007446:	69fb      	ldr	r3, [r7, #28]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3728      	adds	r7, #40	; 0x28
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20001b7c 	.word	0x20001b7c
 8007454:	20001b88 	.word	0x20001b88
 8007458:	20001b80 	.word	0x20001b80
 800745c:	20001b74 	.word	0x20001b74
 8007460:	20001b84 	.word	0x20001b84

08007464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d048      	beq.n	8007508 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007476:	2308      	movs	r3, #8
 8007478:	425b      	negs	r3, r3
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4413      	add	r3, r2
 800747e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	4b21      	ldr	r3, [pc, #132]	; (8007510 <vPortFree+0xac>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4013      	ands	r3, r2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <vPortFree+0x44>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	60fb      	str	r3, [r7, #12]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <vPortFree+0x62>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60bb      	str	r3, [r7, #8]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	4b11      	ldr	r3, [pc, #68]	; (8007510 <vPortFree+0xac>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d019      	beq.n	8007508 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d115      	bne.n	8007508 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <vPortFree+0xac>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	43db      	mvns	r3, r3
 80074e6:	401a      	ands	r2, r3
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074ec:	f7fe fc18 	bl	8005d20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	4b07      	ldr	r3, [pc, #28]	; (8007514 <vPortFree+0xb0>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4413      	add	r3, r2
 80074fa:	4a06      	ldr	r2, [pc, #24]	; (8007514 <vPortFree+0xb0>)
 80074fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074fe:	6938      	ldr	r0, [r7, #16]
 8007500:	f000 f86c 	bl	80075dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007504:	f7fe fc1a 	bl	8005d3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007508:	bf00      	nop
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20001b88 	.word	0x20001b88
 8007514:	20001b80 	.word	0x20001b80

08007518 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800751e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007522:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007524:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <prvHeapInit+0xac>)
 8007526:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00c      	beq.n	800754c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3307      	adds	r3, #7
 8007536:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0307 	bic.w	r3, r3, #7
 800753e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <prvHeapInit+0xac>)
 8007548:	4413      	add	r3, r2
 800754a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007550:	4a1d      	ldr	r2, [pc, #116]	; (80075c8 <prvHeapInit+0xb0>)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007556:	4b1c      	ldr	r3, [pc, #112]	; (80075c8 <prvHeapInit+0xb0>)
 8007558:	2200      	movs	r2, #0
 800755a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	4413      	add	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007564:	2208      	movs	r2, #8
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	1a9b      	subs	r3, r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0307 	bic.w	r3, r3, #7
 8007572:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a15      	ldr	r2, [pc, #84]	; (80075cc <prvHeapInit+0xb4>)
 8007578:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800757a:	4b14      	ldr	r3, [pc, #80]	; (80075cc <prvHeapInit+0xb4>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2200      	movs	r2, #0
 8007580:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007582:	4b12      	ldr	r3, [pc, #72]	; (80075cc <prvHeapInit+0xb4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	1ad2      	subs	r2, r2, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007598:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <prvHeapInit+0xb4>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	4a0a      	ldr	r2, [pc, #40]	; (80075d0 <prvHeapInit+0xb8>)
 80075a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	4a09      	ldr	r2, [pc, #36]	; (80075d4 <prvHeapInit+0xbc>)
 80075ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075b0:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <prvHeapInit+0xc0>)
 80075b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075b6:	601a      	str	r2, [r3, #0]
}
 80075b8:	bf00      	nop
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000f74 	.word	0x20000f74
 80075c8:	20001b74 	.word	0x20001b74
 80075cc:	20001b7c 	.word	0x20001b7c
 80075d0:	20001b84 	.word	0x20001b84
 80075d4:	20001b80 	.word	0x20001b80
 80075d8:	20001b88 	.word	0x20001b88

080075dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075e4:	4b27      	ldr	r3, [pc, #156]	; (8007684 <prvInsertBlockIntoFreeList+0xa8>)
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	e002      	b.n	80075f0 <prvInsertBlockIntoFreeList+0x14>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d8f7      	bhi.n	80075ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	4413      	add	r3, r2
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	429a      	cmp	r2, r3
 800760a:	d108      	bne.n	800761e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	441a      	add	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d118      	bne.n	8007664 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	4b14      	ldr	r3, [pc, #80]	; (8007688 <prvInsertBlockIntoFreeList+0xac>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d00d      	beq.n	800765a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	441a      	add	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	e008      	b.n	800766c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800765a:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <prvInsertBlockIntoFreeList+0xac>)
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	e003      	b.n	800766c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	429a      	cmp	r2, r3
 8007672:	d002      	beq.n	800767a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800767a:	bf00      	nop
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	bc80      	pop	{r7}
 8007682:	4770      	bx	lr
 8007684:	20001b74 	.word	0x20001b74
 8007688:	20001b7c 	.word	0x20001b7c

0800768c <malloc>:
 800768c:	4b02      	ldr	r3, [pc, #8]	; (8007698 <malloc+0xc>)
 800768e:	4601      	mov	r1, r0
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	f000 b82b 	b.w	80076ec <_malloc_r>
 8007696:	bf00      	nop
 8007698:	2000006c 	.word	0x2000006c

0800769c <free>:
 800769c:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <free+0xc>)
 800769e:	4601      	mov	r1, r0
 80076a0:	6818      	ldr	r0, [r3, #0]
 80076a2:	f000 bb01 	b.w	8007ca8 <_free_r>
 80076a6:	bf00      	nop
 80076a8:	2000006c 	.word	0x2000006c

080076ac <sbrk_aligned>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4e0e      	ldr	r6, [pc, #56]	; (80076e8 <sbrk_aligned+0x3c>)
 80076b0:	460c      	mov	r4, r1
 80076b2:	6831      	ldr	r1, [r6, #0]
 80076b4:	4605      	mov	r5, r0
 80076b6:	b911      	cbnz	r1, 80076be <sbrk_aligned+0x12>
 80076b8:	f000 fa7a 	bl	8007bb0 <_sbrk_r>
 80076bc:	6030      	str	r0, [r6, #0]
 80076be:	4621      	mov	r1, r4
 80076c0:	4628      	mov	r0, r5
 80076c2:	f000 fa75 	bl	8007bb0 <_sbrk_r>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d00a      	beq.n	80076e0 <sbrk_aligned+0x34>
 80076ca:	1cc4      	adds	r4, r0, #3
 80076cc:	f024 0403 	bic.w	r4, r4, #3
 80076d0:	42a0      	cmp	r0, r4
 80076d2:	d007      	beq.n	80076e4 <sbrk_aligned+0x38>
 80076d4:	1a21      	subs	r1, r4, r0
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 fa6a 	bl	8007bb0 <_sbrk_r>
 80076dc:	3001      	adds	r0, #1
 80076de:	d101      	bne.n	80076e4 <sbrk_aligned+0x38>
 80076e0:	f04f 34ff 	mov.w	r4, #4294967295
 80076e4:	4620      	mov	r0, r4
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	20001b90 	.word	0x20001b90

080076ec <_malloc_r>:
 80076ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f0:	1ccd      	adds	r5, r1, #3
 80076f2:	f025 0503 	bic.w	r5, r5, #3
 80076f6:	3508      	adds	r5, #8
 80076f8:	2d0c      	cmp	r5, #12
 80076fa:	bf38      	it	cc
 80076fc:	250c      	movcc	r5, #12
 80076fe:	2d00      	cmp	r5, #0
 8007700:	4607      	mov	r7, r0
 8007702:	db01      	blt.n	8007708 <_malloc_r+0x1c>
 8007704:	42a9      	cmp	r1, r5
 8007706:	d905      	bls.n	8007714 <_malloc_r+0x28>
 8007708:	230c      	movs	r3, #12
 800770a:	2600      	movs	r6, #0
 800770c:	603b      	str	r3, [r7, #0]
 800770e:	4630      	mov	r0, r6
 8007710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007714:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077e8 <_malloc_r+0xfc>
 8007718:	f000 f868 	bl	80077ec <__malloc_lock>
 800771c:	f8d8 3000 	ldr.w	r3, [r8]
 8007720:	461c      	mov	r4, r3
 8007722:	bb5c      	cbnz	r4, 800777c <_malloc_r+0x90>
 8007724:	4629      	mov	r1, r5
 8007726:	4638      	mov	r0, r7
 8007728:	f7ff ffc0 	bl	80076ac <sbrk_aligned>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	4604      	mov	r4, r0
 8007730:	d155      	bne.n	80077de <_malloc_r+0xf2>
 8007732:	f8d8 4000 	ldr.w	r4, [r8]
 8007736:	4626      	mov	r6, r4
 8007738:	2e00      	cmp	r6, #0
 800773a:	d145      	bne.n	80077c8 <_malloc_r+0xdc>
 800773c:	2c00      	cmp	r4, #0
 800773e:	d048      	beq.n	80077d2 <_malloc_r+0xe6>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	4631      	mov	r1, r6
 8007744:	4638      	mov	r0, r7
 8007746:	eb04 0903 	add.w	r9, r4, r3
 800774a:	f000 fa31 	bl	8007bb0 <_sbrk_r>
 800774e:	4581      	cmp	r9, r0
 8007750:	d13f      	bne.n	80077d2 <_malloc_r+0xe6>
 8007752:	6821      	ldr	r1, [r4, #0]
 8007754:	4638      	mov	r0, r7
 8007756:	1a6d      	subs	r5, r5, r1
 8007758:	4629      	mov	r1, r5
 800775a:	f7ff ffa7 	bl	80076ac <sbrk_aligned>
 800775e:	3001      	adds	r0, #1
 8007760:	d037      	beq.n	80077d2 <_malloc_r+0xe6>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	442b      	add	r3, r5
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	f8d8 3000 	ldr.w	r3, [r8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d038      	beq.n	80077e2 <_malloc_r+0xf6>
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	42a2      	cmp	r2, r4
 8007774:	d12b      	bne.n	80077ce <_malloc_r+0xe2>
 8007776:	2200      	movs	r2, #0
 8007778:	605a      	str	r2, [r3, #4]
 800777a:	e00f      	b.n	800779c <_malloc_r+0xb0>
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	1b52      	subs	r2, r2, r5
 8007780:	d41f      	bmi.n	80077c2 <_malloc_r+0xd6>
 8007782:	2a0b      	cmp	r2, #11
 8007784:	d917      	bls.n	80077b6 <_malloc_r+0xca>
 8007786:	1961      	adds	r1, r4, r5
 8007788:	42a3      	cmp	r3, r4
 800778a:	6025      	str	r5, [r4, #0]
 800778c:	bf18      	it	ne
 800778e:	6059      	strne	r1, [r3, #4]
 8007790:	6863      	ldr	r3, [r4, #4]
 8007792:	bf08      	it	eq
 8007794:	f8c8 1000 	streq.w	r1, [r8]
 8007798:	5162      	str	r2, [r4, r5]
 800779a:	604b      	str	r3, [r1, #4]
 800779c:	4638      	mov	r0, r7
 800779e:	f104 060b 	add.w	r6, r4, #11
 80077a2:	f000 f829 	bl	80077f8 <__malloc_unlock>
 80077a6:	f026 0607 	bic.w	r6, r6, #7
 80077aa:	1d23      	adds	r3, r4, #4
 80077ac:	1af2      	subs	r2, r6, r3
 80077ae:	d0ae      	beq.n	800770e <_malloc_r+0x22>
 80077b0:	1b9b      	subs	r3, r3, r6
 80077b2:	50a3      	str	r3, [r4, r2]
 80077b4:	e7ab      	b.n	800770e <_malloc_r+0x22>
 80077b6:	42a3      	cmp	r3, r4
 80077b8:	6862      	ldr	r2, [r4, #4]
 80077ba:	d1dd      	bne.n	8007778 <_malloc_r+0x8c>
 80077bc:	f8c8 2000 	str.w	r2, [r8]
 80077c0:	e7ec      	b.n	800779c <_malloc_r+0xb0>
 80077c2:	4623      	mov	r3, r4
 80077c4:	6864      	ldr	r4, [r4, #4]
 80077c6:	e7ac      	b.n	8007722 <_malloc_r+0x36>
 80077c8:	4634      	mov	r4, r6
 80077ca:	6876      	ldr	r6, [r6, #4]
 80077cc:	e7b4      	b.n	8007738 <_malloc_r+0x4c>
 80077ce:	4613      	mov	r3, r2
 80077d0:	e7cc      	b.n	800776c <_malloc_r+0x80>
 80077d2:	230c      	movs	r3, #12
 80077d4:	4638      	mov	r0, r7
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	f000 f80e 	bl	80077f8 <__malloc_unlock>
 80077dc:	e797      	b.n	800770e <_malloc_r+0x22>
 80077de:	6025      	str	r5, [r4, #0]
 80077e0:	e7dc      	b.n	800779c <_malloc_r+0xb0>
 80077e2:	605b      	str	r3, [r3, #4]
 80077e4:	deff      	udf	#255	; 0xff
 80077e6:	bf00      	nop
 80077e8:	20001b8c 	.word	0x20001b8c

080077ec <__malloc_lock>:
 80077ec:	4801      	ldr	r0, [pc, #4]	; (80077f4 <__malloc_lock+0x8>)
 80077ee:	f000 ba2c 	b.w	8007c4a <__retarget_lock_acquire_recursive>
 80077f2:	bf00      	nop
 80077f4:	20001cd4 	.word	0x20001cd4

080077f8 <__malloc_unlock>:
 80077f8:	4801      	ldr	r0, [pc, #4]	; (8007800 <__malloc_unlock+0x8>)
 80077fa:	f000 ba27 	b.w	8007c4c <__retarget_lock_release_recursive>
 80077fe:	bf00      	nop
 8007800:	20001cd4 	.word	0x20001cd4

08007804 <rand>:
 8007804:	4b16      	ldr	r3, [pc, #88]	; (8007860 <rand+0x5c>)
 8007806:	b510      	push	{r4, lr}
 8007808:	681c      	ldr	r4, [r3, #0]
 800780a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800780c:	b9b3      	cbnz	r3, 800783c <rand+0x38>
 800780e:	2018      	movs	r0, #24
 8007810:	f7ff ff3c 	bl	800768c <malloc>
 8007814:	4602      	mov	r2, r0
 8007816:	6320      	str	r0, [r4, #48]	; 0x30
 8007818:	b920      	cbnz	r0, 8007824 <rand+0x20>
 800781a:	2152      	movs	r1, #82	; 0x52
 800781c:	4b11      	ldr	r3, [pc, #68]	; (8007864 <rand+0x60>)
 800781e:	4812      	ldr	r0, [pc, #72]	; (8007868 <rand+0x64>)
 8007820:	f000 fa24 	bl	8007c6c <__assert_func>
 8007824:	4911      	ldr	r1, [pc, #68]	; (800786c <rand+0x68>)
 8007826:	4b12      	ldr	r3, [pc, #72]	; (8007870 <rand+0x6c>)
 8007828:	e9c0 1300 	strd	r1, r3, [r0]
 800782c:	4b11      	ldr	r3, [pc, #68]	; (8007874 <rand+0x70>)
 800782e:	2100      	movs	r1, #0
 8007830:	6083      	str	r3, [r0, #8]
 8007832:	230b      	movs	r3, #11
 8007834:	8183      	strh	r3, [r0, #12]
 8007836:	2001      	movs	r0, #1
 8007838:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800783c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800783e:	480e      	ldr	r0, [pc, #56]	; (8007878 <rand+0x74>)
 8007840:	690b      	ldr	r3, [r1, #16]
 8007842:	694c      	ldr	r4, [r1, #20]
 8007844:	4358      	muls	r0, r3
 8007846:	4a0d      	ldr	r2, [pc, #52]	; (800787c <rand+0x78>)
 8007848:	fb02 0004 	mla	r0, r2, r4, r0
 800784c:	fba3 3202 	umull	r3, r2, r3, r2
 8007850:	3301      	adds	r3, #1
 8007852:	eb40 0002 	adc.w	r0, r0, r2
 8007856:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800785a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800785e:	bd10      	pop	{r4, pc}
 8007860:	2000006c 	.word	0x2000006c
 8007864:	080087f4 	.word	0x080087f4
 8007868:	0800880b 	.word	0x0800880b
 800786c:	abcd330e 	.word	0xabcd330e
 8007870:	e66d1234 	.word	0xe66d1234
 8007874:	0005deec 	.word	0x0005deec
 8007878:	5851f42d 	.word	0x5851f42d
 800787c:	4c957f2d 	.word	0x4c957f2d

08007880 <std>:
 8007880:	2300      	movs	r3, #0
 8007882:	b510      	push	{r4, lr}
 8007884:	4604      	mov	r4, r0
 8007886:	e9c0 3300 	strd	r3, r3, [r0]
 800788a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800788e:	6083      	str	r3, [r0, #8]
 8007890:	8181      	strh	r1, [r0, #12]
 8007892:	6643      	str	r3, [r0, #100]	; 0x64
 8007894:	81c2      	strh	r2, [r0, #14]
 8007896:	6183      	str	r3, [r0, #24]
 8007898:	4619      	mov	r1, r3
 800789a:	2208      	movs	r2, #8
 800789c:	305c      	adds	r0, #92	; 0x5c
 800789e:	f000 f8f4 	bl	8007a8a <memset>
 80078a2:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <std+0x58>)
 80078a4:	6224      	str	r4, [r4, #32]
 80078a6:	6263      	str	r3, [r4, #36]	; 0x24
 80078a8:	4b0c      	ldr	r3, [pc, #48]	; (80078dc <std+0x5c>)
 80078aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80078ac:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <std+0x60>)
 80078ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078b0:	4b0c      	ldr	r3, [pc, #48]	; (80078e4 <std+0x64>)
 80078b2:	6323      	str	r3, [r4, #48]	; 0x30
 80078b4:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <std+0x68>)
 80078b6:	429c      	cmp	r4, r3
 80078b8:	d006      	beq.n	80078c8 <std+0x48>
 80078ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80078be:	4294      	cmp	r4, r2
 80078c0:	d002      	beq.n	80078c8 <std+0x48>
 80078c2:	33d0      	adds	r3, #208	; 0xd0
 80078c4:	429c      	cmp	r4, r3
 80078c6:	d105      	bne.n	80078d4 <std+0x54>
 80078c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d0:	f000 b9ba 	b.w	8007c48 <__retarget_lock_init_recursive>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	bf00      	nop
 80078d8:	08007a05 	.word	0x08007a05
 80078dc:	08007a27 	.word	0x08007a27
 80078e0:	08007a5f 	.word	0x08007a5f
 80078e4:	08007a83 	.word	0x08007a83
 80078e8:	20001b94 	.word	0x20001b94

080078ec <stdio_exit_handler>:
 80078ec:	4a02      	ldr	r2, [pc, #8]	; (80078f8 <stdio_exit_handler+0xc>)
 80078ee:	4903      	ldr	r1, [pc, #12]	; (80078fc <stdio_exit_handler+0x10>)
 80078f0:	4803      	ldr	r0, [pc, #12]	; (8007900 <stdio_exit_handler+0x14>)
 80078f2:	f000 b869 	b.w	80079c8 <_fwalk_sglue>
 80078f6:	bf00      	nop
 80078f8:	20000014 	.word	0x20000014
 80078fc:	08007e3d 	.word	0x08007e3d
 8007900:	20000020 	.word	0x20000020

08007904 <cleanup_stdio>:
 8007904:	6841      	ldr	r1, [r0, #4]
 8007906:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <cleanup_stdio+0x34>)
 8007908:	b510      	push	{r4, lr}
 800790a:	4299      	cmp	r1, r3
 800790c:	4604      	mov	r4, r0
 800790e:	d001      	beq.n	8007914 <cleanup_stdio+0x10>
 8007910:	f000 fa94 	bl	8007e3c <_fflush_r>
 8007914:	68a1      	ldr	r1, [r4, #8]
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <cleanup_stdio+0x38>)
 8007918:	4299      	cmp	r1, r3
 800791a:	d002      	beq.n	8007922 <cleanup_stdio+0x1e>
 800791c:	4620      	mov	r0, r4
 800791e:	f000 fa8d 	bl	8007e3c <_fflush_r>
 8007922:	68e1      	ldr	r1, [r4, #12]
 8007924:	4b06      	ldr	r3, [pc, #24]	; (8007940 <cleanup_stdio+0x3c>)
 8007926:	4299      	cmp	r1, r3
 8007928:	d004      	beq.n	8007934 <cleanup_stdio+0x30>
 800792a:	4620      	mov	r0, r4
 800792c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007930:	f000 ba84 	b.w	8007e3c <_fflush_r>
 8007934:	bd10      	pop	{r4, pc}
 8007936:	bf00      	nop
 8007938:	20001b94 	.word	0x20001b94
 800793c:	20001bfc 	.word	0x20001bfc
 8007940:	20001c64 	.word	0x20001c64

08007944 <global_stdio_init.part.0>:
 8007944:	b510      	push	{r4, lr}
 8007946:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <global_stdio_init.part.0+0x30>)
 8007948:	4c0b      	ldr	r4, [pc, #44]	; (8007978 <global_stdio_init.part.0+0x34>)
 800794a:	4a0c      	ldr	r2, [pc, #48]	; (800797c <global_stdio_init.part.0+0x38>)
 800794c:	4620      	mov	r0, r4
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	2104      	movs	r1, #4
 8007952:	2200      	movs	r2, #0
 8007954:	f7ff ff94 	bl	8007880 <std>
 8007958:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800795c:	2201      	movs	r2, #1
 800795e:	2109      	movs	r1, #9
 8007960:	f7ff ff8e 	bl	8007880 <std>
 8007964:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007968:	2202      	movs	r2, #2
 800796a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800796e:	2112      	movs	r1, #18
 8007970:	f7ff bf86 	b.w	8007880 <std>
 8007974:	20001ccc 	.word	0x20001ccc
 8007978:	20001b94 	.word	0x20001b94
 800797c:	080078ed 	.word	0x080078ed

08007980 <__sfp_lock_acquire>:
 8007980:	4801      	ldr	r0, [pc, #4]	; (8007988 <__sfp_lock_acquire+0x8>)
 8007982:	f000 b962 	b.w	8007c4a <__retarget_lock_acquire_recursive>
 8007986:	bf00      	nop
 8007988:	20001cd5 	.word	0x20001cd5

0800798c <__sfp_lock_release>:
 800798c:	4801      	ldr	r0, [pc, #4]	; (8007994 <__sfp_lock_release+0x8>)
 800798e:	f000 b95d 	b.w	8007c4c <__retarget_lock_release_recursive>
 8007992:	bf00      	nop
 8007994:	20001cd5 	.word	0x20001cd5

08007998 <__sinit>:
 8007998:	b510      	push	{r4, lr}
 800799a:	4604      	mov	r4, r0
 800799c:	f7ff fff0 	bl	8007980 <__sfp_lock_acquire>
 80079a0:	6a23      	ldr	r3, [r4, #32]
 80079a2:	b11b      	cbz	r3, 80079ac <__sinit+0x14>
 80079a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a8:	f7ff bff0 	b.w	800798c <__sfp_lock_release>
 80079ac:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <__sinit+0x28>)
 80079ae:	6223      	str	r3, [r4, #32]
 80079b0:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <__sinit+0x2c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1f5      	bne.n	80079a4 <__sinit+0xc>
 80079b8:	f7ff ffc4 	bl	8007944 <global_stdio_init.part.0>
 80079bc:	e7f2      	b.n	80079a4 <__sinit+0xc>
 80079be:	bf00      	nop
 80079c0:	08007905 	.word	0x08007905
 80079c4:	20001ccc 	.word	0x20001ccc

080079c8 <_fwalk_sglue>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4607      	mov	r7, r0
 80079ce:	4688      	mov	r8, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	2600      	movs	r6, #0
 80079d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079d8:	f1b9 0901 	subs.w	r9, r9, #1
 80079dc:	d505      	bpl.n	80079ea <_fwalk_sglue+0x22>
 80079de:	6824      	ldr	r4, [r4, #0]
 80079e0:	2c00      	cmp	r4, #0
 80079e2:	d1f7      	bne.n	80079d4 <_fwalk_sglue+0xc>
 80079e4:	4630      	mov	r0, r6
 80079e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ea:	89ab      	ldrh	r3, [r5, #12]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d907      	bls.n	8007a00 <_fwalk_sglue+0x38>
 80079f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079f4:	3301      	adds	r3, #1
 80079f6:	d003      	beq.n	8007a00 <_fwalk_sglue+0x38>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4638      	mov	r0, r7
 80079fc:	47c0      	blx	r8
 80079fe:	4306      	orrs	r6, r0
 8007a00:	3568      	adds	r5, #104	; 0x68
 8007a02:	e7e9      	b.n	80079d8 <_fwalk_sglue+0x10>

08007a04 <__sread>:
 8007a04:	b510      	push	{r4, lr}
 8007a06:	460c      	mov	r4, r1
 8007a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0c:	f000 f8be 	bl	8007b8c <_read_r>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	bfab      	itete	ge
 8007a14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a16:	89a3      	ldrhlt	r3, [r4, #12]
 8007a18:	181b      	addge	r3, r3, r0
 8007a1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a1e:	bfac      	ite	ge
 8007a20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a22:	81a3      	strhlt	r3, [r4, #12]
 8007a24:	bd10      	pop	{r4, pc}

08007a26 <__swrite>:
 8007a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	898b      	ldrh	r3, [r1, #12]
 8007a2e:	4605      	mov	r5, r0
 8007a30:	05db      	lsls	r3, r3, #23
 8007a32:	460c      	mov	r4, r1
 8007a34:	4616      	mov	r6, r2
 8007a36:	d505      	bpl.n	8007a44 <__swrite+0x1e>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a40:	f000 f892 	bl	8007b68 <_lseek_r>
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	4632      	mov	r2, r6
 8007a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a4c:	81a3      	strh	r3, [r4, #12]
 8007a4e:	4628      	mov	r0, r5
 8007a50:	463b      	mov	r3, r7
 8007a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5a:	f000 b8b9 	b.w	8007bd0 <_write_r>

08007a5e <__sseek>:
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	460c      	mov	r4, r1
 8007a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a66:	f000 f87f 	bl	8007b68 <_lseek_r>
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	bf15      	itete	ne
 8007a70:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a7a:	81a3      	strheq	r3, [r4, #12]
 8007a7c:	bf18      	it	ne
 8007a7e:	81a3      	strhne	r3, [r4, #12]
 8007a80:	bd10      	pop	{r4, pc}

08007a82 <__sclose>:
 8007a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a86:	f000 b809 	b.w	8007a9c <_close_r>

08007a8a <memset>:
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4402      	add	r2, r0
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d100      	bne.n	8007a94 <memset+0xa>
 8007a92:	4770      	bx	lr
 8007a94:	f803 1b01 	strb.w	r1, [r3], #1
 8007a98:	e7f9      	b.n	8007a8e <memset+0x4>
	...

08007a9c <_close_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	4d05      	ldr	r5, [pc, #20]	; (8007ab8 <_close_r+0x1c>)
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	602b      	str	r3, [r5, #0]
 8007aa8:	f7fa f844 	bl	8001b34 <_close>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_close_r+0x1a>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_close_r+0x1a>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	20001cd0 	.word	0x20001cd0

08007abc <_reclaim_reent>:
 8007abc:	4b29      	ldr	r3, [pc, #164]	; (8007b64 <_reclaim_reent+0xa8>)
 8007abe:	b570      	push	{r4, r5, r6, lr}
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4283      	cmp	r3, r0
 8007ac6:	d04b      	beq.n	8007b60 <_reclaim_reent+0xa4>
 8007ac8:	69c3      	ldr	r3, [r0, #28]
 8007aca:	b143      	cbz	r3, 8007ade <_reclaim_reent+0x22>
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d144      	bne.n	8007b5c <_reclaim_reent+0xa0>
 8007ad2:	69e3      	ldr	r3, [r4, #28]
 8007ad4:	6819      	ldr	r1, [r3, #0]
 8007ad6:	b111      	cbz	r1, 8007ade <_reclaim_reent+0x22>
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 f8e5 	bl	8007ca8 <_free_r>
 8007ade:	6961      	ldr	r1, [r4, #20]
 8007ae0:	b111      	cbz	r1, 8007ae8 <_reclaim_reent+0x2c>
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 f8e0 	bl	8007ca8 <_free_r>
 8007ae8:	69e1      	ldr	r1, [r4, #28]
 8007aea:	b111      	cbz	r1, 8007af2 <_reclaim_reent+0x36>
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 f8db 	bl	8007ca8 <_free_r>
 8007af2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007af4:	b111      	cbz	r1, 8007afc <_reclaim_reent+0x40>
 8007af6:	4620      	mov	r0, r4
 8007af8:	f000 f8d6 	bl	8007ca8 <_free_r>
 8007afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007afe:	b111      	cbz	r1, 8007b06 <_reclaim_reent+0x4a>
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 f8d1 	bl	8007ca8 <_free_r>
 8007b06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b08:	b111      	cbz	r1, 8007b10 <_reclaim_reent+0x54>
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 f8cc 	bl	8007ca8 <_free_r>
 8007b10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007b12:	b111      	cbz	r1, 8007b1a <_reclaim_reent+0x5e>
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 f8c7 	bl	8007ca8 <_free_r>
 8007b1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007b1c:	b111      	cbz	r1, 8007b24 <_reclaim_reent+0x68>
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 f8c2 	bl	8007ca8 <_free_r>
 8007b24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007b26:	b111      	cbz	r1, 8007b2e <_reclaim_reent+0x72>
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 f8bd 	bl	8007ca8 <_free_r>
 8007b2e:	6a23      	ldr	r3, [r4, #32]
 8007b30:	b1b3      	cbz	r3, 8007b60 <_reclaim_reent+0xa4>
 8007b32:	4620      	mov	r0, r4
 8007b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b38:	4718      	bx	r3
 8007b3a:	5949      	ldr	r1, [r1, r5]
 8007b3c:	b941      	cbnz	r1, 8007b50 <_reclaim_reent+0x94>
 8007b3e:	3504      	adds	r5, #4
 8007b40:	69e3      	ldr	r3, [r4, #28]
 8007b42:	2d80      	cmp	r5, #128	; 0x80
 8007b44:	68d9      	ldr	r1, [r3, #12]
 8007b46:	d1f8      	bne.n	8007b3a <_reclaim_reent+0x7e>
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 f8ad 	bl	8007ca8 <_free_r>
 8007b4e:	e7c0      	b.n	8007ad2 <_reclaim_reent+0x16>
 8007b50:	680e      	ldr	r6, [r1, #0]
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f8a8 	bl	8007ca8 <_free_r>
 8007b58:	4631      	mov	r1, r6
 8007b5a:	e7ef      	b.n	8007b3c <_reclaim_reent+0x80>
 8007b5c:	2500      	movs	r5, #0
 8007b5e:	e7ef      	b.n	8007b40 <_reclaim_reent+0x84>
 8007b60:	bd70      	pop	{r4, r5, r6, pc}
 8007b62:	bf00      	nop
 8007b64:	2000006c 	.word	0x2000006c

08007b68 <_lseek_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	4611      	mov	r1, r2
 8007b70:	2200      	movs	r2, #0
 8007b72:	4d05      	ldr	r5, [pc, #20]	; (8007b88 <_lseek_r+0x20>)
 8007b74:	602a      	str	r2, [r5, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f7fa f800 	bl	8001b7c <_lseek>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_lseek_r+0x1e>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_lseek_r+0x1e>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	20001cd0 	.word	0x20001cd0

08007b8c <_read_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4604      	mov	r4, r0
 8007b90:	4608      	mov	r0, r1
 8007b92:	4611      	mov	r1, r2
 8007b94:	2200      	movs	r2, #0
 8007b96:	4d05      	ldr	r5, [pc, #20]	; (8007bac <_read_r+0x20>)
 8007b98:	602a      	str	r2, [r5, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f7f9 ff91 	bl	8001ac2 <_read>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_read_r+0x1e>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_read_r+0x1e>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	20001cd0 	.word	0x20001cd0

08007bb0 <_sbrk_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4d05      	ldr	r5, [pc, #20]	; (8007bcc <_sbrk_r+0x1c>)
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	f7f9 ffea 	bl	8001b94 <_sbrk>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_sbrk_r+0x1a>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_sbrk_r+0x1a>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	20001cd0 	.word	0x20001cd0

08007bd0 <_write_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4d05      	ldr	r5, [pc, #20]	; (8007bf0 <_write_r+0x20>)
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7f9 ff8c 	bl	8001afc <_write>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_write_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_write_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	20001cd0 	.word	0x20001cd0

08007bf4 <__errno>:
 8007bf4:	4b01      	ldr	r3, [pc, #4]	; (8007bfc <__errno+0x8>)
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	2000006c 	.word	0x2000006c

08007c00 <__libc_init_array>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	2600      	movs	r6, #0
 8007c04:	4d0c      	ldr	r5, [pc, #48]	; (8007c38 <__libc_init_array+0x38>)
 8007c06:	4c0d      	ldr	r4, [pc, #52]	; (8007c3c <__libc_init_array+0x3c>)
 8007c08:	1b64      	subs	r4, r4, r5
 8007c0a:	10a4      	asrs	r4, r4, #2
 8007c0c:	42a6      	cmp	r6, r4
 8007c0e:	d109      	bne.n	8007c24 <__libc_init_array+0x24>
 8007c10:	f000 fd96 	bl	8008740 <_init>
 8007c14:	2600      	movs	r6, #0
 8007c16:	4d0a      	ldr	r5, [pc, #40]	; (8007c40 <__libc_init_array+0x40>)
 8007c18:	4c0a      	ldr	r4, [pc, #40]	; (8007c44 <__libc_init_array+0x44>)
 8007c1a:	1b64      	subs	r4, r4, r5
 8007c1c:	10a4      	asrs	r4, r4, #2
 8007c1e:	42a6      	cmp	r6, r4
 8007c20:	d105      	bne.n	8007c2e <__libc_init_array+0x2e>
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c28:	4798      	blx	r3
 8007c2a:	3601      	adds	r6, #1
 8007c2c:	e7ee      	b.n	8007c0c <__libc_init_array+0xc>
 8007c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c32:	4798      	blx	r3
 8007c34:	3601      	adds	r6, #1
 8007c36:	e7f2      	b.n	8007c1e <__libc_init_array+0x1e>
 8007c38:	080088dc 	.word	0x080088dc
 8007c3c:	080088dc 	.word	0x080088dc
 8007c40:	080088dc 	.word	0x080088dc
 8007c44:	080088e0 	.word	0x080088e0

08007c48 <__retarget_lock_init_recursive>:
 8007c48:	4770      	bx	lr

08007c4a <__retarget_lock_acquire_recursive>:
 8007c4a:	4770      	bx	lr

08007c4c <__retarget_lock_release_recursive>:
 8007c4c:	4770      	bx	lr

08007c4e <memcpy>:
 8007c4e:	440a      	add	r2, r1
 8007c50:	4291      	cmp	r1, r2
 8007c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c56:	d100      	bne.n	8007c5a <memcpy+0xc>
 8007c58:	4770      	bx	lr
 8007c5a:	b510      	push	{r4, lr}
 8007c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c60:	4291      	cmp	r1, r2
 8007c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c66:	d1f9      	bne.n	8007c5c <memcpy+0xe>
 8007c68:	bd10      	pop	{r4, pc}
	...

08007c6c <__assert_func>:
 8007c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c6e:	4614      	mov	r4, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <__assert_func+0x2c>)
 8007c74:	4605      	mov	r5, r0
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68d8      	ldr	r0, [r3, #12]
 8007c7a:	b14c      	cbz	r4, 8007c90 <__assert_func+0x24>
 8007c7c:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <__assert_func+0x30>)
 8007c7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c82:	9100      	str	r1, [sp, #0]
 8007c84:	462b      	mov	r3, r5
 8007c86:	4906      	ldr	r1, [pc, #24]	; (8007ca0 <__assert_func+0x34>)
 8007c88:	f000 f900 	bl	8007e8c <fiprintf>
 8007c8c:	f000 f910 	bl	8007eb0 <abort>
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <__assert_func+0x38>)
 8007c92:	461c      	mov	r4, r3
 8007c94:	e7f3      	b.n	8007c7e <__assert_func+0x12>
 8007c96:	bf00      	nop
 8007c98:	2000006c 	.word	0x2000006c
 8007c9c:	08008863 	.word	0x08008863
 8007ca0:	08008870 	.word	0x08008870
 8007ca4:	0800889e 	.word	0x0800889e

08007ca8 <_free_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4605      	mov	r5, r0
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d040      	beq.n	8007d32 <_free_r+0x8a>
 8007cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb4:	1f0c      	subs	r4, r1, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfb8      	it	lt
 8007cba:	18e4      	addlt	r4, r4, r3
 8007cbc:	f7ff fd96 	bl	80077ec <__malloc_lock>
 8007cc0:	4a1c      	ldr	r2, [pc, #112]	; (8007d34 <_free_r+0x8c>)
 8007cc2:	6813      	ldr	r3, [r2, #0]
 8007cc4:	b933      	cbnz	r3, 8007cd4 <_free_r+0x2c>
 8007cc6:	6063      	str	r3, [r4, #4]
 8007cc8:	6014      	str	r4, [r2, #0]
 8007cca:	4628      	mov	r0, r5
 8007ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd0:	f7ff bd92 	b.w	80077f8 <__malloc_unlock>
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	d908      	bls.n	8007cea <_free_r+0x42>
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	1821      	adds	r1, r4, r0
 8007cdc:	428b      	cmp	r3, r1
 8007cde:	bf01      	itttt	eq
 8007ce0:	6819      	ldreq	r1, [r3, #0]
 8007ce2:	685b      	ldreq	r3, [r3, #4]
 8007ce4:	1809      	addeq	r1, r1, r0
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	e7ed      	b.n	8007cc6 <_free_r+0x1e>
 8007cea:	461a      	mov	r2, r3
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	b10b      	cbz	r3, 8007cf4 <_free_r+0x4c>
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	d9fa      	bls.n	8007cea <_free_r+0x42>
 8007cf4:	6811      	ldr	r1, [r2, #0]
 8007cf6:	1850      	adds	r0, r2, r1
 8007cf8:	42a0      	cmp	r0, r4
 8007cfa:	d10b      	bne.n	8007d14 <_free_r+0x6c>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	4401      	add	r1, r0
 8007d00:	1850      	adds	r0, r2, r1
 8007d02:	4283      	cmp	r3, r0
 8007d04:	6011      	str	r1, [r2, #0]
 8007d06:	d1e0      	bne.n	8007cca <_free_r+0x22>
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	4408      	add	r0, r1
 8007d0e:	6010      	str	r0, [r2, #0]
 8007d10:	6053      	str	r3, [r2, #4]
 8007d12:	e7da      	b.n	8007cca <_free_r+0x22>
 8007d14:	d902      	bls.n	8007d1c <_free_r+0x74>
 8007d16:	230c      	movs	r3, #12
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	e7d6      	b.n	8007cca <_free_r+0x22>
 8007d1c:	6820      	ldr	r0, [r4, #0]
 8007d1e:	1821      	adds	r1, r4, r0
 8007d20:	428b      	cmp	r3, r1
 8007d22:	bf01      	itttt	eq
 8007d24:	6819      	ldreq	r1, [r3, #0]
 8007d26:	685b      	ldreq	r3, [r3, #4]
 8007d28:	1809      	addeq	r1, r1, r0
 8007d2a:	6021      	streq	r1, [r4, #0]
 8007d2c:	6063      	str	r3, [r4, #4]
 8007d2e:	6054      	str	r4, [r2, #4]
 8007d30:	e7cb      	b.n	8007cca <_free_r+0x22>
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	20001b8c 	.word	0x20001b8c

08007d38 <__sflush_r>:
 8007d38:	898a      	ldrh	r2, [r1, #12]
 8007d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	0710      	lsls	r0, r2, #28
 8007d40:	460c      	mov	r4, r1
 8007d42:	d457      	bmi.n	8007df4 <__sflush_r+0xbc>
 8007d44:	684b      	ldr	r3, [r1, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	dc04      	bgt.n	8007d54 <__sflush_r+0x1c>
 8007d4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dc01      	bgt.n	8007d54 <__sflush_r+0x1c>
 8007d50:	2000      	movs	r0, #0
 8007d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d56:	2e00      	cmp	r6, #0
 8007d58:	d0fa      	beq.n	8007d50 <__sflush_r+0x18>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d60:	682f      	ldr	r7, [r5, #0]
 8007d62:	6a21      	ldr	r1, [r4, #32]
 8007d64:	602b      	str	r3, [r5, #0]
 8007d66:	d032      	beq.n	8007dce <__sflush_r+0x96>
 8007d68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	075a      	lsls	r2, r3, #29
 8007d6e:	d505      	bpl.n	8007d7c <__sflush_r+0x44>
 8007d70:	6863      	ldr	r3, [r4, #4]
 8007d72:	1ac0      	subs	r0, r0, r3
 8007d74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d76:	b10b      	cbz	r3, 8007d7c <__sflush_r+0x44>
 8007d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d7a:	1ac0      	subs	r0, r0, r3
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4602      	mov	r2, r0
 8007d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d82:	4628      	mov	r0, r5
 8007d84:	6a21      	ldr	r1, [r4, #32]
 8007d86:	47b0      	blx	r6
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	d106      	bne.n	8007d9c <__sflush_r+0x64>
 8007d8e:	6829      	ldr	r1, [r5, #0]
 8007d90:	291d      	cmp	r1, #29
 8007d92:	d82b      	bhi.n	8007dec <__sflush_r+0xb4>
 8007d94:	4a28      	ldr	r2, [pc, #160]	; (8007e38 <__sflush_r+0x100>)
 8007d96:	410a      	asrs	r2, r1
 8007d98:	07d6      	lsls	r6, r2, #31
 8007d9a:	d427      	bmi.n	8007dec <__sflush_r+0xb4>
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	6062      	str	r2, [r4, #4]
 8007da0:	6922      	ldr	r2, [r4, #16]
 8007da2:	04d9      	lsls	r1, r3, #19
 8007da4:	6022      	str	r2, [r4, #0]
 8007da6:	d504      	bpl.n	8007db2 <__sflush_r+0x7a>
 8007da8:	1c42      	adds	r2, r0, #1
 8007daa:	d101      	bne.n	8007db0 <__sflush_r+0x78>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	b903      	cbnz	r3, 8007db2 <__sflush_r+0x7a>
 8007db0:	6560      	str	r0, [r4, #84]	; 0x54
 8007db2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007db4:	602f      	str	r7, [r5, #0]
 8007db6:	2900      	cmp	r1, #0
 8007db8:	d0ca      	beq.n	8007d50 <__sflush_r+0x18>
 8007dba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dbe:	4299      	cmp	r1, r3
 8007dc0:	d002      	beq.n	8007dc8 <__sflush_r+0x90>
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f7ff ff70 	bl	8007ca8 <_free_r>
 8007dc8:	2000      	movs	r0, #0
 8007dca:	6360      	str	r0, [r4, #52]	; 0x34
 8007dcc:	e7c1      	b.n	8007d52 <__sflush_r+0x1a>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	47b0      	blx	r6
 8007dd4:	1c41      	adds	r1, r0, #1
 8007dd6:	d1c8      	bne.n	8007d6a <__sflush_r+0x32>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0c5      	beq.n	8007d6a <__sflush_r+0x32>
 8007dde:	2b1d      	cmp	r3, #29
 8007de0:	d001      	beq.n	8007de6 <__sflush_r+0xae>
 8007de2:	2b16      	cmp	r3, #22
 8007de4:	d101      	bne.n	8007dea <__sflush_r+0xb2>
 8007de6:	602f      	str	r7, [r5, #0]
 8007de8:	e7b2      	b.n	8007d50 <__sflush_r+0x18>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	e7ae      	b.n	8007d52 <__sflush_r+0x1a>
 8007df4:	690f      	ldr	r7, [r1, #16]
 8007df6:	2f00      	cmp	r7, #0
 8007df8:	d0aa      	beq.n	8007d50 <__sflush_r+0x18>
 8007dfa:	0793      	lsls	r3, r2, #30
 8007dfc:	bf18      	it	ne
 8007dfe:	2300      	movne	r3, #0
 8007e00:	680e      	ldr	r6, [r1, #0]
 8007e02:	bf08      	it	eq
 8007e04:	694b      	ldreq	r3, [r1, #20]
 8007e06:	1bf6      	subs	r6, r6, r7
 8007e08:	600f      	str	r7, [r1, #0]
 8007e0a:	608b      	str	r3, [r1, #8]
 8007e0c:	2e00      	cmp	r6, #0
 8007e0e:	dd9f      	ble.n	8007d50 <__sflush_r+0x18>
 8007e10:	4633      	mov	r3, r6
 8007e12:	463a      	mov	r2, r7
 8007e14:	4628      	mov	r0, r5
 8007e16:	6a21      	ldr	r1, [r4, #32]
 8007e18:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007e1c:	47e0      	blx	ip
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	dc06      	bgt.n	8007e30 <__sflush_r+0xf8>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295
 8007e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	e790      	b.n	8007d52 <__sflush_r+0x1a>
 8007e30:	4407      	add	r7, r0
 8007e32:	1a36      	subs	r6, r6, r0
 8007e34:	e7ea      	b.n	8007e0c <__sflush_r+0xd4>
 8007e36:	bf00      	nop
 8007e38:	dfbffffe 	.word	0xdfbffffe

08007e3c <_fflush_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	690b      	ldr	r3, [r1, #16]
 8007e40:	4605      	mov	r5, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	b913      	cbnz	r3, 8007e4c <_fflush_r+0x10>
 8007e46:	2500      	movs	r5, #0
 8007e48:	4628      	mov	r0, r5
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	b118      	cbz	r0, 8007e56 <_fflush_r+0x1a>
 8007e4e:	6a03      	ldr	r3, [r0, #32]
 8007e50:	b90b      	cbnz	r3, 8007e56 <_fflush_r+0x1a>
 8007e52:	f7ff fda1 	bl	8007998 <__sinit>
 8007e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0f3      	beq.n	8007e46 <_fflush_r+0xa>
 8007e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e60:	07d0      	lsls	r0, r2, #31
 8007e62:	d404      	bmi.n	8007e6e <_fflush_r+0x32>
 8007e64:	0599      	lsls	r1, r3, #22
 8007e66:	d402      	bmi.n	8007e6e <_fflush_r+0x32>
 8007e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e6a:	f7ff feee 	bl	8007c4a <__retarget_lock_acquire_recursive>
 8007e6e:	4628      	mov	r0, r5
 8007e70:	4621      	mov	r1, r4
 8007e72:	f7ff ff61 	bl	8007d38 <__sflush_r>
 8007e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e78:	4605      	mov	r5, r0
 8007e7a:	07da      	lsls	r2, r3, #31
 8007e7c:	d4e4      	bmi.n	8007e48 <_fflush_r+0xc>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	059b      	lsls	r3, r3, #22
 8007e82:	d4e1      	bmi.n	8007e48 <_fflush_r+0xc>
 8007e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e86:	f7ff fee1 	bl	8007c4c <__retarget_lock_release_recursive>
 8007e8a:	e7dd      	b.n	8007e48 <_fflush_r+0xc>

08007e8c <fiprintf>:
 8007e8c:	b40e      	push	{r1, r2, r3}
 8007e8e:	b503      	push	{r0, r1, lr}
 8007e90:	4601      	mov	r1, r0
 8007e92:	ab03      	add	r3, sp, #12
 8007e94:	4805      	ldr	r0, [pc, #20]	; (8007eac <fiprintf+0x20>)
 8007e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e9a:	6800      	ldr	r0, [r0, #0]
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	f000 f835 	bl	8007f0c <_vfiprintf_r>
 8007ea2:	b002      	add	sp, #8
 8007ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea8:	b003      	add	sp, #12
 8007eaa:	4770      	bx	lr
 8007eac:	2000006c 	.word	0x2000006c

08007eb0 <abort>:
 8007eb0:	2006      	movs	r0, #6
 8007eb2:	b508      	push	{r3, lr}
 8007eb4:	f000 fb96 	bl	80085e4 <raise>
 8007eb8:	2001      	movs	r0, #1
 8007eba:	f7f9 fdf8 	bl	8001aae <_exit>

08007ebe <__sfputc_r>:
 8007ebe:	6893      	ldr	r3, [r2, #8]
 8007ec0:	b410      	push	{r4}
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	6093      	str	r3, [r2, #8]
 8007ec8:	da07      	bge.n	8007eda <__sfputc_r+0x1c>
 8007eca:	6994      	ldr	r4, [r2, #24]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	db01      	blt.n	8007ed4 <__sfputc_r+0x16>
 8007ed0:	290a      	cmp	r1, #10
 8007ed2:	d102      	bne.n	8007eda <__sfputc_r+0x1c>
 8007ed4:	bc10      	pop	{r4}
 8007ed6:	f000 bac7 	b.w	8008468 <__swbuf_r>
 8007eda:	6813      	ldr	r3, [r2, #0]
 8007edc:	1c58      	adds	r0, r3, #1
 8007ede:	6010      	str	r0, [r2, #0]
 8007ee0:	7019      	strb	r1, [r3, #0]
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	bc10      	pop	{r4}
 8007ee6:	4770      	bx	lr

08007ee8 <__sfputs_r>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	4606      	mov	r6, r0
 8007eec:	460f      	mov	r7, r1
 8007eee:	4614      	mov	r4, r2
 8007ef0:	18d5      	adds	r5, r2, r3
 8007ef2:	42ac      	cmp	r4, r5
 8007ef4:	d101      	bne.n	8007efa <__sfputs_r+0x12>
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	e007      	b.n	8007f0a <__sfputs_r+0x22>
 8007efa:	463a      	mov	r2, r7
 8007efc:	4630      	mov	r0, r6
 8007efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f02:	f7ff ffdc 	bl	8007ebe <__sfputc_r>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	d1f3      	bne.n	8007ef2 <__sfputs_r+0xa>
 8007f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f0c <_vfiprintf_r>:
 8007f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	460d      	mov	r5, r1
 8007f12:	4614      	mov	r4, r2
 8007f14:	4698      	mov	r8, r3
 8007f16:	4606      	mov	r6, r0
 8007f18:	b09d      	sub	sp, #116	; 0x74
 8007f1a:	b118      	cbz	r0, 8007f24 <_vfiprintf_r+0x18>
 8007f1c:	6a03      	ldr	r3, [r0, #32]
 8007f1e:	b90b      	cbnz	r3, 8007f24 <_vfiprintf_r+0x18>
 8007f20:	f7ff fd3a 	bl	8007998 <__sinit>
 8007f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f26:	07d9      	lsls	r1, r3, #31
 8007f28:	d405      	bmi.n	8007f36 <_vfiprintf_r+0x2a>
 8007f2a:	89ab      	ldrh	r3, [r5, #12]
 8007f2c:	059a      	lsls	r2, r3, #22
 8007f2e:	d402      	bmi.n	8007f36 <_vfiprintf_r+0x2a>
 8007f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f32:	f7ff fe8a 	bl	8007c4a <__retarget_lock_acquire_recursive>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	071b      	lsls	r3, r3, #28
 8007f3a:	d501      	bpl.n	8007f40 <_vfiprintf_r+0x34>
 8007f3c:	692b      	ldr	r3, [r5, #16]
 8007f3e:	b99b      	cbnz	r3, 8007f68 <_vfiprintf_r+0x5c>
 8007f40:	4629      	mov	r1, r5
 8007f42:	4630      	mov	r0, r6
 8007f44:	f000 face 	bl	80084e4 <__swsetup_r>
 8007f48:	b170      	cbz	r0, 8007f68 <_vfiprintf_r+0x5c>
 8007f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f4c:	07dc      	lsls	r4, r3, #31
 8007f4e:	d504      	bpl.n	8007f5a <_vfiprintf_r+0x4e>
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295
 8007f54:	b01d      	add	sp, #116	; 0x74
 8007f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	0598      	lsls	r0, r3, #22
 8007f5e:	d4f7      	bmi.n	8007f50 <_vfiprintf_r+0x44>
 8007f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f62:	f7ff fe73 	bl	8007c4c <__retarget_lock_release_recursive>
 8007f66:	e7f3      	b.n	8007f50 <_vfiprintf_r+0x44>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f72:	2330      	movs	r3, #48	; 0x30
 8007f74:	f04f 0901 	mov.w	r9, #1
 8007f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800812c <_vfiprintf_r+0x220>
 8007f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f84:	4623      	mov	r3, r4
 8007f86:	469a      	mov	sl, r3
 8007f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f8c:	b10a      	cbz	r2, 8007f92 <_vfiprintf_r+0x86>
 8007f8e:	2a25      	cmp	r2, #37	; 0x25
 8007f90:	d1f9      	bne.n	8007f86 <_vfiprintf_r+0x7a>
 8007f92:	ebba 0b04 	subs.w	fp, sl, r4
 8007f96:	d00b      	beq.n	8007fb0 <_vfiprintf_r+0xa4>
 8007f98:	465b      	mov	r3, fp
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff ffa2 	bl	8007ee8 <__sfputs_r>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f000 80a9 	beq.w	80080fc <_vfiprintf_r+0x1f0>
 8007faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fac:	445a      	add	r2, fp
 8007fae:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80a1 	beq.w	80080fc <_vfiprintf_r+0x1f0>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fc4:	f10a 0a01 	add.w	sl, sl, #1
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	9307      	str	r3, [sp, #28]
 8007fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8007fd2:	4654      	mov	r4, sl
 8007fd4:	2205      	movs	r2, #5
 8007fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fda:	4854      	ldr	r0, [pc, #336]	; (800812c <_vfiprintf_r+0x220>)
 8007fdc:	f000 fb1e 	bl	800861c <memchr>
 8007fe0:	9a04      	ldr	r2, [sp, #16]
 8007fe2:	b9d8      	cbnz	r0, 800801c <_vfiprintf_r+0x110>
 8007fe4:	06d1      	lsls	r1, r2, #27
 8007fe6:	bf44      	itt	mi
 8007fe8:	2320      	movmi	r3, #32
 8007fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fee:	0713      	lsls	r3, r2, #28
 8007ff0:	bf44      	itt	mi
 8007ff2:	232b      	movmi	r3, #43	; 0x2b
 8007ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffe:	d015      	beq.n	800802c <_vfiprintf_r+0x120>
 8008000:	4654      	mov	r4, sl
 8008002:	2000      	movs	r0, #0
 8008004:	f04f 0c0a 	mov.w	ip, #10
 8008008:	9a07      	ldr	r2, [sp, #28]
 800800a:	4621      	mov	r1, r4
 800800c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008010:	3b30      	subs	r3, #48	; 0x30
 8008012:	2b09      	cmp	r3, #9
 8008014:	d94d      	bls.n	80080b2 <_vfiprintf_r+0x1a6>
 8008016:	b1b0      	cbz	r0, 8008046 <_vfiprintf_r+0x13a>
 8008018:	9207      	str	r2, [sp, #28]
 800801a:	e014      	b.n	8008046 <_vfiprintf_r+0x13a>
 800801c:	eba0 0308 	sub.w	r3, r0, r8
 8008020:	fa09 f303 	lsl.w	r3, r9, r3
 8008024:	4313      	orrs	r3, r2
 8008026:	46a2      	mov	sl, r4
 8008028:	9304      	str	r3, [sp, #16]
 800802a:	e7d2      	b.n	8007fd2 <_vfiprintf_r+0xc6>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	1d19      	adds	r1, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	9103      	str	r1, [sp, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfbb      	ittet	lt
 8008038:	425b      	neglt	r3, r3
 800803a:	f042 0202 	orrlt.w	r2, r2, #2
 800803e:	9307      	strge	r3, [sp, #28]
 8008040:	9307      	strlt	r3, [sp, #28]
 8008042:	bfb8      	it	lt
 8008044:	9204      	strlt	r2, [sp, #16]
 8008046:	7823      	ldrb	r3, [r4, #0]
 8008048:	2b2e      	cmp	r3, #46	; 0x2e
 800804a:	d10c      	bne.n	8008066 <_vfiprintf_r+0x15a>
 800804c:	7863      	ldrb	r3, [r4, #1]
 800804e:	2b2a      	cmp	r3, #42	; 0x2a
 8008050:	d134      	bne.n	80080bc <_vfiprintf_r+0x1b0>
 8008052:	9b03      	ldr	r3, [sp, #12]
 8008054:	3402      	adds	r4, #2
 8008056:	1d1a      	adds	r2, r3, #4
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	9203      	str	r2, [sp, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	bfb8      	it	lt
 8008060:	f04f 33ff 	movlt.w	r3, #4294967295
 8008064:	9305      	str	r3, [sp, #20]
 8008066:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008130 <_vfiprintf_r+0x224>
 800806a:	2203      	movs	r2, #3
 800806c:	4650      	mov	r0, sl
 800806e:	7821      	ldrb	r1, [r4, #0]
 8008070:	f000 fad4 	bl	800861c <memchr>
 8008074:	b138      	cbz	r0, 8008086 <_vfiprintf_r+0x17a>
 8008076:	2240      	movs	r2, #64	; 0x40
 8008078:	9b04      	ldr	r3, [sp, #16]
 800807a:	eba0 000a 	sub.w	r0, r0, sl
 800807e:	4082      	lsls	r2, r0
 8008080:	4313      	orrs	r3, r2
 8008082:	3401      	adds	r4, #1
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808a:	2206      	movs	r2, #6
 800808c:	4829      	ldr	r0, [pc, #164]	; (8008134 <_vfiprintf_r+0x228>)
 800808e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008092:	f000 fac3 	bl	800861c <memchr>
 8008096:	2800      	cmp	r0, #0
 8008098:	d03f      	beq.n	800811a <_vfiprintf_r+0x20e>
 800809a:	4b27      	ldr	r3, [pc, #156]	; (8008138 <_vfiprintf_r+0x22c>)
 800809c:	bb1b      	cbnz	r3, 80080e6 <_vfiprintf_r+0x1da>
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	3307      	adds	r3, #7
 80080a2:	f023 0307 	bic.w	r3, r3, #7
 80080a6:	3308      	adds	r3, #8
 80080a8:	9303      	str	r3, [sp, #12]
 80080aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ac:	443b      	add	r3, r7
 80080ae:	9309      	str	r3, [sp, #36]	; 0x24
 80080b0:	e768      	b.n	8007f84 <_vfiprintf_r+0x78>
 80080b2:	460c      	mov	r4, r1
 80080b4:	2001      	movs	r0, #1
 80080b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ba:	e7a6      	b.n	800800a <_vfiprintf_r+0xfe>
 80080bc:	2300      	movs	r3, #0
 80080be:	f04f 0c0a 	mov.w	ip, #10
 80080c2:	4619      	mov	r1, r3
 80080c4:	3401      	adds	r4, #1
 80080c6:	9305      	str	r3, [sp, #20]
 80080c8:	4620      	mov	r0, r4
 80080ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080ce:	3a30      	subs	r2, #48	; 0x30
 80080d0:	2a09      	cmp	r2, #9
 80080d2:	d903      	bls.n	80080dc <_vfiprintf_r+0x1d0>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d0c6      	beq.n	8008066 <_vfiprintf_r+0x15a>
 80080d8:	9105      	str	r1, [sp, #20]
 80080da:	e7c4      	b.n	8008066 <_vfiprintf_r+0x15a>
 80080dc:	4604      	mov	r4, r0
 80080de:	2301      	movs	r3, #1
 80080e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80080e4:	e7f0      	b.n	80080c8 <_vfiprintf_r+0x1bc>
 80080e6:	ab03      	add	r3, sp, #12
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	462a      	mov	r2, r5
 80080ec:	4630      	mov	r0, r6
 80080ee:	4b13      	ldr	r3, [pc, #76]	; (800813c <_vfiprintf_r+0x230>)
 80080f0:	a904      	add	r1, sp, #16
 80080f2:	f3af 8000 	nop.w
 80080f6:	4607      	mov	r7, r0
 80080f8:	1c78      	adds	r0, r7, #1
 80080fa:	d1d6      	bne.n	80080aa <_vfiprintf_r+0x19e>
 80080fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080fe:	07d9      	lsls	r1, r3, #31
 8008100:	d405      	bmi.n	800810e <_vfiprintf_r+0x202>
 8008102:	89ab      	ldrh	r3, [r5, #12]
 8008104:	059a      	lsls	r2, r3, #22
 8008106:	d402      	bmi.n	800810e <_vfiprintf_r+0x202>
 8008108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800810a:	f7ff fd9f 	bl	8007c4c <__retarget_lock_release_recursive>
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	065b      	lsls	r3, r3, #25
 8008112:	f53f af1d 	bmi.w	8007f50 <_vfiprintf_r+0x44>
 8008116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008118:	e71c      	b.n	8007f54 <_vfiprintf_r+0x48>
 800811a:	ab03      	add	r3, sp, #12
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	462a      	mov	r2, r5
 8008120:	4630      	mov	r0, r6
 8008122:	4b06      	ldr	r3, [pc, #24]	; (800813c <_vfiprintf_r+0x230>)
 8008124:	a904      	add	r1, sp, #16
 8008126:	f000 f87d 	bl	8008224 <_printf_i>
 800812a:	e7e4      	b.n	80080f6 <_vfiprintf_r+0x1ea>
 800812c:	0800889f 	.word	0x0800889f
 8008130:	080088a5 	.word	0x080088a5
 8008134:	080088a9 	.word	0x080088a9
 8008138:	00000000 	.word	0x00000000
 800813c:	08007ee9 	.word	0x08007ee9

08008140 <_printf_common>:
 8008140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	4616      	mov	r6, r2
 8008146:	4699      	mov	r9, r3
 8008148:	688a      	ldr	r2, [r1, #8]
 800814a:	690b      	ldr	r3, [r1, #16]
 800814c:	4607      	mov	r7, r0
 800814e:	4293      	cmp	r3, r2
 8008150:	bfb8      	it	lt
 8008152:	4613      	movlt	r3, r2
 8008154:	6033      	str	r3, [r6, #0]
 8008156:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800815a:	460c      	mov	r4, r1
 800815c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008160:	b10a      	cbz	r2, 8008166 <_printf_common+0x26>
 8008162:	3301      	adds	r3, #1
 8008164:	6033      	str	r3, [r6, #0]
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	0699      	lsls	r1, r3, #26
 800816a:	bf42      	ittt	mi
 800816c:	6833      	ldrmi	r3, [r6, #0]
 800816e:	3302      	addmi	r3, #2
 8008170:	6033      	strmi	r3, [r6, #0]
 8008172:	6825      	ldr	r5, [r4, #0]
 8008174:	f015 0506 	ands.w	r5, r5, #6
 8008178:	d106      	bne.n	8008188 <_printf_common+0x48>
 800817a:	f104 0a19 	add.w	sl, r4, #25
 800817e:	68e3      	ldr	r3, [r4, #12]
 8008180:	6832      	ldr	r2, [r6, #0]
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	42ab      	cmp	r3, r5
 8008186:	dc2b      	bgt.n	80081e0 <_printf_common+0xa0>
 8008188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800818c:	1e13      	subs	r3, r2, #0
 800818e:	6822      	ldr	r2, [r4, #0]
 8008190:	bf18      	it	ne
 8008192:	2301      	movne	r3, #1
 8008194:	0692      	lsls	r2, r2, #26
 8008196:	d430      	bmi.n	80081fa <_printf_common+0xba>
 8008198:	4649      	mov	r1, r9
 800819a:	4638      	mov	r0, r7
 800819c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081a0:	47c0      	blx	r8
 80081a2:	3001      	adds	r0, #1
 80081a4:	d023      	beq.n	80081ee <_printf_common+0xae>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	6922      	ldr	r2, [r4, #16]
 80081aa:	f003 0306 	and.w	r3, r3, #6
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	bf14      	ite	ne
 80081b2:	2500      	movne	r5, #0
 80081b4:	6833      	ldreq	r3, [r6, #0]
 80081b6:	f04f 0600 	mov.w	r6, #0
 80081ba:	bf08      	it	eq
 80081bc:	68e5      	ldreq	r5, [r4, #12]
 80081be:	f104 041a 	add.w	r4, r4, #26
 80081c2:	bf08      	it	eq
 80081c4:	1aed      	subeq	r5, r5, r3
 80081c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80081ca:	bf08      	it	eq
 80081cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081d0:	4293      	cmp	r3, r2
 80081d2:	bfc4      	itt	gt
 80081d4:	1a9b      	subgt	r3, r3, r2
 80081d6:	18ed      	addgt	r5, r5, r3
 80081d8:	42b5      	cmp	r5, r6
 80081da:	d11a      	bne.n	8008212 <_printf_common+0xd2>
 80081dc:	2000      	movs	r0, #0
 80081de:	e008      	b.n	80081f2 <_printf_common+0xb2>
 80081e0:	2301      	movs	r3, #1
 80081e2:	4652      	mov	r2, sl
 80081e4:	4649      	mov	r1, r9
 80081e6:	4638      	mov	r0, r7
 80081e8:	47c0      	blx	r8
 80081ea:	3001      	adds	r0, #1
 80081ec:	d103      	bne.n	80081f6 <_printf_common+0xb6>
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f6:	3501      	adds	r5, #1
 80081f8:	e7c1      	b.n	800817e <_printf_common+0x3e>
 80081fa:	2030      	movs	r0, #48	; 0x30
 80081fc:	18e1      	adds	r1, r4, r3
 80081fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008208:	4422      	add	r2, r4
 800820a:	3302      	adds	r3, #2
 800820c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008210:	e7c2      	b.n	8008198 <_printf_common+0x58>
 8008212:	2301      	movs	r3, #1
 8008214:	4622      	mov	r2, r4
 8008216:	4649      	mov	r1, r9
 8008218:	4638      	mov	r0, r7
 800821a:	47c0      	blx	r8
 800821c:	3001      	adds	r0, #1
 800821e:	d0e6      	beq.n	80081ee <_printf_common+0xae>
 8008220:	3601      	adds	r6, #1
 8008222:	e7d9      	b.n	80081d8 <_printf_common+0x98>

08008224 <_printf_i>:
 8008224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008228:	7e0f      	ldrb	r7, [r1, #24]
 800822a:	4691      	mov	r9, r2
 800822c:	2f78      	cmp	r7, #120	; 0x78
 800822e:	4680      	mov	r8, r0
 8008230:	460c      	mov	r4, r1
 8008232:	469a      	mov	sl, r3
 8008234:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800823a:	d807      	bhi.n	800824c <_printf_i+0x28>
 800823c:	2f62      	cmp	r7, #98	; 0x62
 800823e:	d80a      	bhi.n	8008256 <_printf_i+0x32>
 8008240:	2f00      	cmp	r7, #0
 8008242:	f000 80d5 	beq.w	80083f0 <_printf_i+0x1cc>
 8008246:	2f58      	cmp	r7, #88	; 0x58
 8008248:	f000 80c1 	beq.w	80083ce <_printf_i+0x1aa>
 800824c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008254:	e03a      	b.n	80082cc <_printf_i+0xa8>
 8008256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800825a:	2b15      	cmp	r3, #21
 800825c:	d8f6      	bhi.n	800824c <_printf_i+0x28>
 800825e:	a101      	add	r1, pc, #4	; (adr r1, 8008264 <_printf_i+0x40>)
 8008260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008264:	080082bd 	.word	0x080082bd
 8008268:	080082d1 	.word	0x080082d1
 800826c:	0800824d 	.word	0x0800824d
 8008270:	0800824d 	.word	0x0800824d
 8008274:	0800824d 	.word	0x0800824d
 8008278:	0800824d 	.word	0x0800824d
 800827c:	080082d1 	.word	0x080082d1
 8008280:	0800824d 	.word	0x0800824d
 8008284:	0800824d 	.word	0x0800824d
 8008288:	0800824d 	.word	0x0800824d
 800828c:	0800824d 	.word	0x0800824d
 8008290:	080083d7 	.word	0x080083d7
 8008294:	080082fd 	.word	0x080082fd
 8008298:	08008391 	.word	0x08008391
 800829c:	0800824d 	.word	0x0800824d
 80082a0:	0800824d 	.word	0x0800824d
 80082a4:	080083f9 	.word	0x080083f9
 80082a8:	0800824d 	.word	0x0800824d
 80082ac:	080082fd 	.word	0x080082fd
 80082b0:	0800824d 	.word	0x0800824d
 80082b4:	0800824d 	.word	0x0800824d
 80082b8:	08008399 	.word	0x08008399
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	1d1a      	adds	r2, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	602a      	str	r2, [r5, #0]
 80082c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082cc:	2301      	movs	r3, #1
 80082ce:	e0a0      	b.n	8008412 <_printf_i+0x1ee>
 80082d0:	6820      	ldr	r0, [r4, #0]
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	0607      	lsls	r7, r0, #24
 80082d6:	f103 0104 	add.w	r1, r3, #4
 80082da:	6029      	str	r1, [r5, #0]
 80082dc:	d501      	bpl.n	80082e2 <_printf_i+0xbe>
 80082de:	681e      	ldr	r6, [r3, #0]
 80082e0:	e003      	b.n	80082ea <_printf_i+0xc6>
 80082e2:	0646      	lsls	r6, r0, #25
 80082e4:	d5fb      	bpl.n	80082de <_printf_i+0xba>
 80082e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	da03      	bge.n	80082f6 <_printf_i+0xd2>
 80082ee:	232d      	movs	r3, #45	; 0x2d
 80082f0:	4276      	negs	r6, r6
 80082f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f6:	230a      	movs	r3, #10
 80082f8:	4859      	ldr	r0, [pc, #356]	; (8008460 <_printf_i+0x23c>)
 80082fa:	e012      	b.n	8008322 <_printf_i+0xfe>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	6820      	ldr	r0, [r4, #0]
 8008300:	1d19      	adds	r1, r3, #4
 8008302:	6029      	str	r1, [r5, #0]
 8008304:	0605      	lsls	r5, r0, #24
 8008306:	d501      	bpl.n	800830c <_printf_i+0xe8>
 8008308:	681e      	ldr	r6, [r3, #0]
 800830a:	e002      	b.n	8008312 <_printf_i+0xee>
 800830c:	0641      	lsls	r1, r0, #25
 800830e:	d5fb      	bpl.n	8008308 <_printf_i+0xe4>
 8008310:	881e      	ldrh	r6, [r3, #0]
 8008312:	2f6f      	cmp	r7, #111	; 0x6f
 8008314:	bf0c      	ite	eq
 8008316:	2308      	moveq	r3, #8
 8008318:	230a      	movne	r3, #10
 800831a:	4851      	ldr	r0, [pc, #324]	; (8008460 <_printf_i+0x23c>)
 800831c:	2100      	movs	r1, #0
 800831e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008322:	6865      	ldr	r5, [r4, #4]
 8008324:	2d00      	cmp	r5, #0
 8008326:	bfa8      	it	ge
 8008328:	6821      	ldrge	r1, [r4, #0]
 800832a:	60a5      	str	r5, [r4, #8]
 800832c:	bfa4      	itt	ge
 800832e:	f021 0104 	bicge.w	r1, r1, #4
 8008332:	6021      	strge	r1, [r4, #0]
 8008334:	b90e      	cbnz	r6, 800833a <_printf_i+0x116>
 8008336:	2d00      	cmp	r5, #0
 8008338:	d04b      	beq.n	80083d2 <_printf_i+0x1ae>
 800833a:	4615      	mov	r5, r2
 800833c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008340:	fb03 6711 	mls	r7, r3, r1, r6
 8008344:	5dc7      	ldrb	r7, [r0, r7]
 8008346:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800834a:	4637      	mov	r7, r6
 800834c:	42bb      	cmp	r3, r7
 800834e:	460e      	mov	r6, r1
 8008350:	d9f4      	bls.n	800833c <_printf_i+0x118>
 8008352:	2b08      	cmp	r3, #8
 8008354:	d10b      	bne.n	800836e <_printf_i+0x14a>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	07de      	lsls	r6, r3, #31
 800835a:	d508      	bpl.n	800836e <_printf_i+0x14a>
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	6861      	ldr	r1, [r4, #4]
 8008360:	4299      	cmp	r1, r3
 8008362:	bfde      	ittt	le
 8008364:	2330      	movle	r3, #48	; 0x30
 8008366:	f805 3c01 	strble.w	r3, [r5, #-1]
 800836a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800836e:	1b52      	subs	r2, r2, r5
 8008370:	6122      	str	r2, [r4, #16]
 8008372:	464b      	mov	r3, r9
 8008374:	4621      	mov	r1, r4
 8008376:	4640      	mov	r0, r8
 8008378:	f8cd a000 	str.w	sl, [sp]
 800837c:	aa03      	add	r2, sp, #12
 800837e:	f7ff fedf 	bl	8008140 <_printf_common>
 8008382:	3001      	adds	r0, #1
 8008384:	d14a      	bne.n	800841c <_printf_i+0x1f8>
 8008386:	f04f 30ff 	mov.w	r0, #4294967295
 800838a:	b004      	add	sp, #16
 800838c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	f043 0320 	orr.w	r3, r3, #32
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	2778      	movs	r7, #120	; 0x78
 800839a:	4832      	ldr	r0, [pc, #200]	; (8008464 <_printf_i+0x240>)
 800839c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	6829      	ldr	r1, [r5, #0]
 80083a4:	061f      	lsls	r7, r3, #24
 80083a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80083aa:	d402      	bmi.n	80083b2 <_printf_i+0x18e>
 80083ac:	065f      	lsls	r7, r3, #25
 80083ae:	bf48      	it	mi
 80083b0:	b2b6      	uxthmi	r6, r6
 80083b2:	07df      	lsls	r7, r3, #31
 80083b4:	bf48      	it	mi
 80083b6:	f043 0320 	orrmi.w	r3, r3, #32
 80083ba:	6029      	str	r1, [r5, #0]
 80083bc:	bf48      	it	mi
 80083be:	6023      	strmi	r3, [r4, #0]
 80083c0:	b91e      	cbnz	r6, 80083ca <_printf_i+0x1a6>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	f023 0320 	bic.w	r3, r3, #32
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	2310      	movs	r3, #16
 80083cc:	e7a6      	b.n	800831c <_printf_i+0xf8>
 80083ce:	4824      	ldr	r0, [pc, #144]	; (8008460 <_printf_i+0x23c>)
 80083d0:	e7e4      	b.n	800839c <_printf_i+0x178>
 80083d2:	4615      	mov	r5, r2
 80083d4:	e7bd      	b.n	8008352 <_printf_i+0x12e>
 80083d6:	682b      	ldr	r3, [r5, #0]
 80083d8:	6826      	ldr	r6, [r4, #0]
 80083da:	1d18      	adds	r0, r3, #4
 80083dc:	6961      	ldr	r1, [r4, #20]
 80083de:	6028      	str	r0, [r5, #0]
 80083e0:	0635      	lsls	r5, r6, #24
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	d501      	bpl.n	80083ea <_printf_i+0x1c6>
 80083e6:	6019      	str	r1, [r3, #0]
 80083e8:	e002      	b.n	80083f0 <_printf_i+0x1cc>
 80083ea:	0670      	lsls	r0, r6, #25
 80083ec:	d5fb      	bpl.n	80083e6 <_printf_i+0x1c2>
 80083ee:	8019      	strh	r1, [r3, #0]
 80083f0:	2300      	movs	r3, #0
 80083f2:	4615      	mov	r5, r2
 80083f4:	6123      	str	r3, [r4, #16]
 80083f6:	e7bc      	b.n	8008372 <_printf_i+0x14e>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	2100      	movs	r1, #0
 80083fc:	1d1a      	adds	r2, r3, #4
 80083fe:	602a      	str	r2, [r5, #0]
 8008400:	681d      	ldr	r5, [r3, #0]
 8008402:	6862      	ldr	r2, [r4, #4]
 8008404:	4628      	mov	r0, r5
 8008406:	f000 f909 	bl	800861c <memchr>
 800840a:	b108      	cbz	r0, 8008410 <_printf_i+0x1ec>
 800840c:	1b40      	subs	r0, r0, r5
 800840e:	6060      	str	r0, [r4, #4]
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	6123      	str	r3, [r4, #16]
 8008414:	2300      	movs	r3, #0
 8008416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800841a:	e7aa      	b.n	8008372 <_printf_i+0x14e>
 800841c:	462a      	mov	r2, r5
 800841e:	4649      	mov	r1, r9
 8008420:	4640      	mov	r0, r8
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	47d0      	blx	sl
 8008426:	3001      	adds	r0, #1
 8008428:	d0ad      	beq.n	8008386 <_printf_i+0x162>
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	079b      	lsls	r3, r3, #30
 800842e:	d413      	bmi.n	8008458 <_printf_i+0x234>
 8008430:	68e0      	ldr	r0, [r4, #12]
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	4298      	cmp	r0, r3
 8008436:	bfb8      	it	lt
 8008438:	4618      	movlt	r0, r3
 800843a:	e7a6      	b.n	800838a <_printf_i+0x166>
 800843c:	2301      	movs	r3, #1
 800843e:	4632      	mov	r2, r6
 8008440:	4649      	mov	r1, r9
 8008442:	4640      	mov	r0, r8
 8008444:	47d0      	blx	sl
 8008446:	3001      	adds	r0, #1
 8008448:	d09d      	beq.n	8008386 <_printf_i+0x162>
 800844a:	3501      	adds	r5, #1
 800844c:	68e3      	ldr	r3, [r4, #12]
 800844e:	9903      	ldr	r1, [sp, #12]
 8008450:	1a5b      	subs	r3, r3, r1
 8008452:	42ab      	cmp	r3, r5
 8008454:	dcf2      	bgt.n	800843c <_printf_i+0x218>
 8008456:	e7eb      	b.n	8008430 <_printf_i+0x20c>
 8008458:	2500      	movs	r5, #0
 800845a:	f104 0619 	add.w	r6, r4, #25
 800845e:	e7f5      	b.n	800844c <_printf_i+0x228>
 8008460:	080088b0 	.word	0x080088b0
 8008464:	080088c1 	.word	0x080088c1

08008468 <__swbuf_r>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	460e      	mov	r6, r1
 800846c:	4614      	mov	r4, r2
 800846e:	4605      	mov	r5, r0
 8008470:	b118      	cbz	r0, 800847a <__swbuf_r+0x12>
 8008472:	6a03      	ldr	r3, [r0, #32]
 8008474:	b90b      	cbnz	r3, 800847a <__swbuf_r+0x12>
 8008476:	f7ff fa8f 	bl	8007998 <__sinit>
 800847a:	69a3      	ldr	r3, [r4, #24]
 800847c:	60a3      	str	r3, [r4, #8]
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	071a      	lsls	r2, r3, #28
 8008482:	d525      	bpl.n	80084d0 <__swbuf_r+0x68>
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	b31b      	cbz	r3, 80084d0 <__swbuf_r+0x68>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	6922      	ldr	r2, [r4, #16]
 800848c:	b2f6      	uxtb	r6, r6
 800848e:	1a98      	subs	r0, r3, r2
 8008490:	6963      	ldr	r3, [r4, #20]
 8008492:	4637      	mov	r7, r6
 8008494:	4283      	cmp	r3, r0
 8008496:	dc04      	bgt.n	80084a2 <__swbuf_r+0x3a>
 8008498:	4621      	mov	r1, r4
 800849a:	4628      	mov	r0, r5
 800849c:	f7ff fcce 	bl	8007e3c <_fflush_r>
 80084a0:	b9e0      	cbnz	r0, 80084dc <__swbuf_r+0x74>
 80084a2:	68a3      	ldr	r3, [r4, #8]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	60a3      	str	r3, [r4, #8]
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	6022      	str	r2, [r4, #0]
 80084ae:	701e      	strb	r6, [r3, #0]
 80084b0:	6962      	ldr	r2, [r4, #20]
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d004      	beq.n	80084c2 <__swbuf_r+0x5a>
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	07db      	lsls	r3, r3, #31
 80084bc:	d506      	bpl.n	80084cc <__swbuf_r+0x64>
 80084be:	2e0a      	cmp	r6, #10
 80084c0:	d104      	bne.n	80084cc <__swbuf_r+0x64>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4628      	mov	r0, r5
 80084c6:	f7ff fcb9 	bl	8007e3c <_fflush_r>
 80084ca:	b938      	cbnz	r0, 80084dc <__swbuf_r+0x74>
 80084cc:	4638      	mov	r0, r7
 80084ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d0:	4621      	mov	r1, r4
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 f806 	bl	80084e4 <__swsetup_r>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d0d5      	beq.n	8008488 <__swbuf_r+0x20>
 80084dc:	f04f 37ff 	mov.w	r7, #4294967295
 80084e0:	e7f4      	b.n	80084cc <__swbuf_r+0x64>
	...

080084e4 <__swsetup_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <__swsetup_r+0xac>)
 80084e8:	4605      	mov	r5, r0
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	460c      	mov	r4, r1
 80084ee:	b118      	cbz	r0, 80084f8 <__swsetup_r+0x14>
 80084f0:	6a03      	ldr	r3, [r0, #32]
 80084f2:	b90b      	cbnz	r3, 80084f8 <__swsetup_r+0x14>
 80084f4:	f7ff fa50 	bl	8007998 <__sinit>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084fe:	0718      	lsls	r0, r3, #28
 8008500:	d422      	bmi.n	8008548 <__swsetup_r+0x64>
 8008502:	06d9      	lsls	r1, r3, #27
 8008504:	d407      	bmi.n	8008516 <__swsetup_r+0x32>
 8008506:	2309      	movs	r3, #9
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	e034      	b.n	8008580 <__swsetup_r+0x9c>
 8008516:	0758      	lsls	r0, r3, #29
 8008518:	d512      	bpl.n	8008540 <__swsetup_r+0x5c>
 800851a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800851c:	b141      	cbz	r1, 8008530 <__swsetup_r+0x4c>
 800851e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008522:	4299      	cmp	r1, r3
 8008524:	d002      	beq.n	800852c <__swsetup_r+0x48>
 8008526:	4628      	mov	r0, r5
 8008528:	f7ff fbbe 	bl	8007ca8 <_free_r>
 800852c:	2300      	movs	r3, #0
 800852e:	6363      	str	r3, [r4, #52]	; 0x34
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	2300      	movs	r3, #0
 800853a:	6063      	str	r3, [r4, #4]
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	f043 0308 	orr.w	r3, r3, #8
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	b94b      	cbnz	r3, 8008560 <__swsetup_r+0x7c>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008556:	d003      	beq.n	8008560 <__swsetup_r+0x7c>
 8008558:	4621      	mov	r1, r4
 800855a:	4628      	mov	r0, r5
 800855c:	f000 f891 	bl	8008682 <__smakebuf_r>
 8008560:	89a0      	ldrh	r0, [r4, #12]
 8008562:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008566:	f010 0301 	ands.w	r3, r0, #1
 800856a:	d00a      	beq.n	8008582 <__swsetup_r+0x9e>
 800856c:	2300      	movs	r3, #0
 800856e:	60a3      	str	r3, [r4, #8]
 8008570:	6963      	ldr	r3, [r4, #20]
 8008572:	425b      	negs	r3, r3
 8008574:	61a3      	str	r3, [r4, #24]
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	b943      	cbnz	r3, 800858c <__swsetup_r+0xa8>
 800857a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800857e:	d1c4      	bne.n	800850a <__swsetup_r+0x26>
 8008580:	bd38      	pop	{r3, r4, r5, pc}
 8008582:	0781      	lsls	r1, r0, #30
 8008584:	bf58      	it	pl
 8008586:	6963      	ldrpl	r3, [r4, #20]
 8008588:	60a3      	str	r3, [r4, #8]
 800858a:	e7f4      	b.n	8008576 <__swsetup_r+0x92>
 800858c:	2000      	movs	r0, #0
 800858e:	e7f7      	b.n	8008580 <__swsetup_r+0x9c>
 8008590:	2000006c 	.word	0x2000006c

08008594 <_raise_r>:
 8008594:	291f      	cmp	r1, #31
 8008596:	b538      	push	{r3, r4, r5, lr}
 8008598:	4604      	mov	r4, r0
 800859a:	460d      	mov	r5, r1
 800859c:	d904      	bls.n	80085a8 <_raise_r+0x14>
 800859e:	2316      	movs	r3, #22
 80085a0:	6003      	str	r3, [r0, #0]
 80085a2:	f04f 30ff 	mov.w	r0, #4294967295
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085aa:	b112      	cbz	r2, 80085b2 <_raise_r+0x1e>
 80085ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085b0:	b94b      	cbnz	r3, 80085c6 <_raise_r+0x32>
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 f830 	bl	8008618 <_getpid_r>
 80085b8:	462a      	mov	r2, r5
 80085ba:	4601      	mov	r1, r0
 80085bc:	4620      	mov	r0, r4
 80085be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085c2:	f000 b817 	b.w	80085f4 <_kill_r>
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d00a      	beq.n	80085e0 <_raise_r+0x4c>
 80085ca:	1c59      	adds	r1, r3, #1
 80085cc:	d103      	bne.n	80085d6 <_raise_r+0x42>
 80085ce:	2316      	movs	r3, #22
 80085d0:	6003      	str	r3, [r0, #0]
 80085d2:	2001      	movs	r0, #1
 80085d4:	e7e7      	b.n	80085a6 <_raise_r+0x12>
 80085d6:	2400      	movs	r4, #0
 80085d8:	4628      	mov	r0, r5
 80085da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085de:	4798      	blx	r3
 80085e0:	2000      	movs	r0, #0
 80085e2:	e7e0      	b.n	80085a6 <_raise_r+0x12>

080085e4 <raise>:
 80085e4:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <raise+0xc>)
 80085e6:	4601      	mov	r1, r0
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	f7ff bfd3 	b.w	8008594 <_raise_r>
 80085ee:	bf00      	nop
 80085f0:	2000006c 	.word	0x2000006c

080085f4 <_kill_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	2300      	movs	r3, #0
 80085f8:	4d06      	ldr	r5, [pc, #24]	; (8008614 <_kill_r+0x20>)
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	f7f9 fa44 	bl	8001a8e <_kill>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	d102      	bne.n	8008610 <_kill_r+0x1c>
 800860a:	682b      	ldr	r3, [r5, #0]
 800860c:	b103      	cbz	r3, 8008610 <_kill_r+0x1c>
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	bd38      	pop	{r3, r4, r5, pc}
 8008612:	bf00      	nop
 8008614:	20001cd0 	.word	0x20001cd0

08008618 <_getpid_r>:
 8008618:	f7f9 ba32 	b.w	8001a80 <_getpid>

0800861c <memchr>:
 800861c:	4603      	mov	r3, r0
 800861e:	b510      	push	{r4, lr}
 8008620:	b2c9      	uxtb	r1, r1
 8008622:	4402      	add	r2, r0
 8008624:	4293      	cmp	r3, r2
 8008626:	4618      	mov	r0, r3
 8008628:	d101      	bne.n	800862e <memchr+0x12>
 800862a:	2000      	movs	r0, #0
 800862c:	e003      	b.n	8008636 <memchr+0x1a>
 800862e:	7804      	ldrb	r4, [r0, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	428c      	cmp	r4, r1
 8008634:	d1f6      	bne.n	8008624 <memchr+0x8>
 8008636:	bd10      	pop	{r4, pc}

08008638 <__swhatbuf_r>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	460c      	mov	r4, r1
 800863c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008640:	4615      	mov	r5, r2
 8008642:	2900      	cmp	r1, #0
 8008644:	461e      	mov	r6, r3
 8008646:	b096      	sub	sp, #88	; 0x58
 8008648:	da0c      	bge.n	8008664 <__swhatbuf_r+0x2c>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	2100      	movs	r1, #0
 800864e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008652:	bf0c      	ite	eq
 8008654:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008658:	2340      	movne	r3, #64	; 0x40
 800865a:	2000      	movs	r0, #0
 800865c:	6031      	str	r1, [r6, #0]
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	b016      	add	sp, #88	; 0x58
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	466a      	mov	r2, sp
 8008666:	f000 f849 	bl	80086fc <_fstat_r>
 800866a:	2800      	cmp	r0, #0
 800866c:	dbed      	blt.n	800864a <__swhatbuf_r+0x12>
 800866e:	9901      	ldr	r1, [sp, #4]
 8008670:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008674:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008678:	4259      	negs	r1, r3
 800867a:	4159      	adcs	r1, r3
 800867c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008680:	e7eb      	b.n	800865a <__swhatbuf_r+0x22>

08008682 <__smakebuf_r>:
 8008682:	898b      	ldrh	r3, [r1, #12]
 8008684:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008686:	079d      	lsls	r5, r3, #30
 8008688:	4606      	mov	r6, r0
 800868a:	460c      	mov	r4, r1
 800868c:	d507      	bpl.n	800869e <__smakebuf_r+0x1c>
 800868e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008692:	6023      	str	r3, [r4, #0]
 8008694:	6123      	str	r3, [r4, #16]
 8008696:	2301      	movs	r3, #1
 8008698:	6163      	str	r3, [r4, #20]
 800869a:	b002      	add	sp, #8
 800869c:	bd70      	pop	{r4, r5, r6, pc}
 800869e:	466a      	mov	r2, sp
 80086a0:	ab01      	add	r3, sp, #4
 80086a2:	f7ff ffc9 	bl	8008638 <__swhatbuf_r>
 80086a6:	9900      	ldr	r1, [sp, #0]
 80086a8:	4605      	mov	r5, r0
 80086aa:	4630      	mov	r0, r6
 80086ac:	f7ff f81e 	bl	80076ec <_malloc_r>
 80086b0:	b948      	cbnz	r0, 80086c6 <__smakebuf_r+0x44>
 80086b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b6:	059a      	lsls	r2, r3, #22
 80086b8:	d4ef      	bmi.n	800869a <__smakebuf_r+0x18>
 80086ba:	f023 0303 	bic.w	r3, r3, #3
 80086be:	f043 0302 	orr.w	r3, r3, #2
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	e7e3      	b.n	800868e <__smakebuf_r+0xc>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	6020      	str	r0, [r4, #0]
 80086ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	9b00      	ldr	r3, [sp, #0]
 80086d2:	6120      	str	r0, [r4, #16]
 80086d4:	6163      	str	r3, [r4, #20]
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	b15b      	cbz	r3, 80086f2 <__smakebuf_r+0x70>
 80086da:	4630      	mov	r0, r6
 80086dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e0:	f000 f81e 	bl	8008720 <_isatty_r>
 80086e4:	b128      	cbz	r0, 80086f2 <__smakebuf_r+0x70>
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	f023 0303 	bic.w	r3, r3, #3
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	431d      	orrs	r5, r3
 80086f6:	81a5      	strh	r5, [r4, #12]
 80086f8:	e7cf      	b.n	800869a <__smakebuf_r+0x18>
	...

080086fc <_fstat_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	2300      	movs	r3, #0
 8008700:	4d06      	ldr	r5, [pc, #24]	; (800871c <_fstat_r+0x20>)
 8008702:	4604      	mov	r4, r0
 8008704:	4608      	mov	r0, r1
 8008706:	4611      	mov	r1, r2
 8008708:	602b      	str	r3, [r5, #0]
 800870a:	f7f9 fa1e 	bl	8001b4a <_fstat>
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	d102      	bne.n	8008718 <_fstat_r+0x1c>
 8008712:	682b      	ldr	r3, [r5, #0]
 8008714:	b103      	cbz	r3, 8008718 <_fstat_r+0x1c>
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	bd38      	pop	{r3, r4, r5, pc}
 800871a:	bf00      	nop
 800871c:	20001cd0 	.word	0x20001cd0

08008720 <_isatty_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	2300      	movs	r3, #0
 8008724:	4d05      	ldr	r5, [pc, #20]	; (800873c <_isatty_r+0x1c>)
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	f7f9 fa1c 	bl	8001b68 <_isatty>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_isatty_r+0x1a>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_isatty_r+0x1a>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20001cd0 	.word	0x20001cd0

08008740 <_init>:
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	bf00      	nop
 8008744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008746:	bc08      	pop	{r3}
 8008748:	469e      	mov	lr, r3
 800874a:	4770      	bx	lr

0800874c <_fini>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	bf00      	nop
 8008750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008752:	bc08      	pop	{r3}
 8008754:	469e      	mov	lr, r3
 8008756:	4770      	bx	lr
